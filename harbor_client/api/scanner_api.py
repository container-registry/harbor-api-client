"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from harbor_client.api_client import ApiClient, Endpoint as _Endpoint
from harbor_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from harbor_client.model.errors import Errors
from harbor_client.model.is_default import IsDefault
from harbor_client.model.scanner_adapter_metadata import ScannerAdapterMetadata
from harbor_client.model.scanner_registration import ScannerRegistration
from harbor_client.model.scanner_registration_req import ScannerRegistrationReq
from harbor_client.model.scanner_registration_settings import ScannerRegistrationSettings


class ScannerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_scanner(
            self,
            scanner_registration_req,
            **kwargs
        ):
            """Create a scanner registration  # noqa: E501

            Creats a new scanner registration with the given data.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_scanner(scanner_registration_req, async_req=True)
            >>> result = thread.get()

            Args:
                scanner_registration_req (ScannerRegistrationReq): A scanner registration to be created.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scanner_registration_req'] = \
                scanner_registration_req
            return self.call_with_http_info(**kwargs)

        self.create_scanner = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners',
                'operation_id': 'create_scanner',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scanner_registration_req',
                    'x_request_id',
                ],
                'required': [
                    'scanner_registration_req',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scanner_registration_req':
                        (ScannerRegistrationReq,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'scanner_registration_req': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_scanner
        )

        def __delete_scanner(
            self,
            registration_id,
            **kwargs
        ):
            """Delete a scanner registration  # noqa: E501

            Deletes the specified scanner registration.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_scanner(registration_id, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str): The scanner registration identifier.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScannerRegistration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            return self.call_with_http_info(**kwargs)

        self.delete_scanner = _Endpoint(
            settings={
                'response_type': (ScannerRegistration,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/{registration_id}',
                'operation_id': 'delete_scanner',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'x_request_id',
                ],
                'required': [
                    'registration_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'registration_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_scanner
        )

        def __get_scanner(
            self,
            registration_id,
            **kwargs
        ):
            """Get a scanner registration details  # noqa: E501

            Retruns the details of the specified scanner registration.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_scanner(registration_id, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str): The scanner registration identifer.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScannerRegistration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            return self.call_with_http_info(**kwargs)

        self.get_scanner = _Endpoint(
            settings={
                'response_type': (ScannerRegistration,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/{registration_id}',
                'operation_id': 'get_scanner',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'x_request_id',
                ],
                'required': [
                    'registration_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'registration_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_scanner
        )

        def __get_scanner_metadata(
            self,
            registration_id,
            **kwargs
        ):
            """Get the metadata of the specified scanner registration  # noqa: E501

            Get the metadata of the specified scanner registration, including the capabilities and customized properties.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_scanner_metadata(registration_id, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str): The scanner registration identifier.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ScannerAdapterMetadata
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            return self.call_with_http_info(**kwargs)

        self.get_scanner_metadata = _Endpoint(
            settings={
                'response_type': (ScannerAdapterMetadata,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/{registration_id}/metadata',
                'operation_id': 'get_scanner_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'x_request_id',
                ],
                'required': [
                    'registration_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'registration_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_scanner_metadata
        )

        def __list_scanners(
            self,
            **kwargs
        ):
            """List scanner registrations  # noqa: E501

            Returns a list of currently configured scanner registrations.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_scanners(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                sort (str): Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\". [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ScannerRegistration]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_scanners = _Endpoint(
            settings={
                'response_type': ([ScannerRegistration],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners',
                'operation_id': 'list_scanners',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_request_id',
                    'q',
                    'sort',
                    'page',
                    'page_size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_request_id':
                        (str,),
                    'q':
                        (str,),
                    'sort':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                    'q': 'q',
                    'sort': 'sort',
                    'page': 'page',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'x_request_id': 'header',
                    'q': 'query',
                    'sort': 'query',
                    'page': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_scanners
        )

        def __ping_scanner(
            self,
            scanner_registration_settings,
            **kwargs
        ):
            """Tests scanner registration settings  # noqa: E501

            Pings scanner adapter to test endpoint URL and authorization settings.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.ping_scanner(scanner_registration_settings, async_req=True)
            >>> result = thread.get()

            Args:
                scanner_registration_settings (ScannerRegistrationSettings): A scanner registration settings to be tested.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['scanner_registration_settings'] = \
                scanner_registration_settings
            return self.call_with_http_info(**kwargs)

        self.ping_scanner = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/ping',
                'operation_id': 'ping_scanner',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scanner_registration_settings',
                    'x_request_id',
                ],
                'required': [
                    'scanner_registration_settings',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scanner_registration_settings':
                        (ScannerRegistrationSettings,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'scanner_registration_settings': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__ping_scanner
        )

        def __set_scanner_as_default(
            self,
            registration_id,
            is_default,
            **kwargs
        ):
            """Set system default scanner registration  # noqa: E501

            Set the specified scanner registration as the system default one.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_scanner_as_default(registration_id, is_default, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str): The scanner registration identifier.
                is_default (IsDefault):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            kwargs['is_default'] = \
                is_default
            return self.call_with_http_info(**kwargs)

        self.set_scanner_as_default = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/{registration_id}',
                'operation_id': 'set_scanner_as_default',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'is_default',
                ],
                'required': [
                    'registration_id',
                    'is_default',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'is_default':
                        (IsDefault,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                },
                'location_map': {
                    'registration_id': 'path',
                    'is_default': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__set_scanner_as_default
        )

        def __update_scanner(
            self,
            registration_id,
            scanner_registration_req,
            **kwargs
        ):
            """Update a scanner registration  # noqa: E501

            Updates the specified scanner registration.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_scanner(registration_id, scanner_registration_req, async_req=True)
            >>> result = thread.get()

            Args:
                registration_id (str): The scanner registration identifier.
                scanner_registration_req (ScannerRegistrationReq): A scanner registraiton to be updated.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['registration_id'] = \
                registration_id
            kwargs['scanner_registration_req'] = \
                scanner_registration_req
            return self.call_with_http_info(**kwargs)

        self.update_scanner = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/scanners/{registration_id}',
                'operation_id': 'update_scanner',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'registration_id',
                    'scanner_registration_req',
                    'x_request_id',
                ],
                'required': [
                    'registration_id',
                    'scanner_registration_req',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'registration_id':
                        (str,),
                    'scanner_registration_req':
                        (ScannerRegistrationReq,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'registration_id': 'registration_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'registration_id': 'path',
                    'scanner_registration_req': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_scanner
        )
