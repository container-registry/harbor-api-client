"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from harbor_client.api_client import ApiClient, Endpoint as _Endpoint
from harbor_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from harbor_client.model.errors import Errors
from harbor_client.model.execution import Execution
from harbor_client.model.instance import Instance
from harbor_client.model.metadata import Metadata
from harbor_client.model.preheat_policy import PreheatPolicy
from harbor_client.model.provider_under_project import ProviderUnderProject
from harbor_client.model.task import Task


class PreheatApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_instance(
            self,
            instance,
            **kwargs
        ):
            """Create p2p provider instances  # noqa: E501

            Create p2p provider instances  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_instance(instance, async_req=True)
            >>> result = thread.get()

            Args:
                instance (Instance): The JSON object of instance.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['instance'] = \
                instance
            return self.call_with_http_info(**kwargs)

        self.create_instance = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances',
                'operation_id': 'create_instance',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance',
                    'x_request_id',
                ],
                'required': [
                    'instance',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance':
                        (Instance,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'instance': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_instance
        )

        def __create_policy(
            self,
            project_name,
            preheat_policy,
            **kwargs
        ):
            """Create a preheat policy under a project  # noqa: E501

            Create a preheat policy under a project  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_policy(project_name, preheat_policy, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy (PreheatPolicy): The policy schema info

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy'] = \
                preheat_policy
            return self.call_with_http_info(**kwargs)

        self.create_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies',
                'operation_id': 'create_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy':
                        (PreheatPolicy,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_policy
        )

        def __delete_instance(
            self,
            preheat_instance_name,
            **kwargs
        ):
            """Delete the specified P2P provider instance  # noqa: E501

            Delete the specified P2P provider instance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_instance(preheat_instance_name, async_req=True)
            >>> result = thread.get()

            Args:
                preheat_instance_name (str): Instance Name

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['preheat_instance_name'] = \
                preheat_instance_name
            return self.call_with_http_info(**kwargs)

        self.delete_instance = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances/{preheat_instance_name}',
                'operation_id': 'delete_instance',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'preheat_instance_name',
                    'x_request_id',
                ],
                'required': [
                    'preheat_instance_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'preheat_instance_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'preheat_instance_name': 'preheat_instance_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'preheat_instance_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_instance
        )

        def __delete_policy(
            self,
            project_name,
            preheat_policy_name,
            **kwargs
        ):
            """Delete a preheat policy  # noqa: E501

            Delete a preheat policy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_policy(project_name, preheat_policy_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            return self.call_with_http_info(**kwargs)

        self.delete_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}',
                'operation_id': 'delete_policy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_policy
        )

        def __get_execution(
            self,
            project_name,
            preheat_policy_name,
            execution_id,
            **kwargs
        ):
            """Get a execution detail by id  # noqa: E501

            Get a execution detail by id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution(project_name, preheat_policy_name, execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                execution_id (int): Execution ID

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Execution
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution = _Endpoint(
            settings={
                'response_type': (Execution,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}',
                'operation_id': 'get_execution',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'execution_id':
                        (int,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'execution_id': 'execution_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'execution_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution
        )

        def __get_instance(
            self,
            preheat_instance_name,
            **kwargs
        ):
            """Get a P2P provider instance  # noqa: E501

            Get a P2P provider instance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_instance(preheat_instance_name, async_req=True)
            >>> result = thread.get()

            Args:
                preheat_instance_name (str): Instance Name

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Instance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['preheat_instance_name'] = \
                preheat_instance_name
            return self.call_with_http_info(**kwargs)

        self.get_instance = _Endpoint(
            settings={
                'response_type': (Instance,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances/{preheat_instance_name}',
                'operation_id': 'get_instance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'preheat_instance_name',
                    'x_request_id',
                ],
                'required': [
                    'preheat_instance_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'preheat_instance_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'preheat_instance_name': 'preheat_instance_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'preheat_instance_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_instance
        )

        def __get_policy(
            self,
            project_name,
            preheat_policy_name,
            **kwargs
        ):
            """Get a preheat policy  # noqa: E501

            Get a preheat policy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_policy(project_name, preheat_policy_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PreheatPolicy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            return self.call_with_http_info(**kwargs)

        self.get_policy = _Endpoint(
            settings={
                'response_type': (PreheatPolicy,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}',
                'operation_id': 'get_policy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_policy
        )

        def __get_preheat_log(
            self,
            project_name,
            preheat_policy_name,
            execution_id,
            task_id,
            **kwargs
        ):
            """Get the log text stream of the specified task for the given execution  # noqa: E501

            Get the log text stream of the specified task for the given execution  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_preheat_log(project_name, preheat_policy_name, execution_id, task_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                execution_id (int): Execution ID
                task_id (int): Task ID

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['execution_id'] = \
                execution_id
            kwargs['task_id'] = \
                task_id
            return self.call_with_http_info(**kwargs)

        self.get_preheat_log = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs',
                'operation_id': 'get_preheat_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'task_id',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'task_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'execution_id':
                        (int,),
                    'task_id':
                        (int,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'execution_id': 'execution_id',
                    'task_id': 'task_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'execution_id': 'path',
                    'task_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_preheat_log
        )

        def __list_executions(
            self,
            project_name,
            preheat_policy_name,
            **kwargs
        ):
            """List executions for the given policy  # noqa: E501

            List executions for the given policy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_executions(project_name, preheat_policy_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                sort (str): Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\". [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Execution]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            return self.call_with_http_info(**kwargs)

        self.list_executions = _Endpoint(
            settings={
                'response_type': ([Execution],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions',
                'operation_id': 'list_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'x_request_id',
                    'page',
                    'page_size',
                    'q',
                    'sort',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'x_request_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'x_request_id': 'X-Request-Id',
                    'page': 'page',
                    'page_size': 'page_size',
                    'q': 'q',
                    'sort': 'sort',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'x_request_id': 'header',
                    'page': 'query',
                    'page_size': 'query',
                    'q': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_executions
        )

        def __list_instances(
            self,
            **kwargs
        ):
            """List P2P provider instances  # noqa: E501

            List P2P provider instances  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_instances(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                sort (str): Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\". [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Instance]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_instances = _Endpoint(
            settings={
                'response_type': ([Instance],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances',
                'operation_id': 'list_instances',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_request_id',
                    'page',
                    'page_size',
                    'q',
                    'sort',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_request_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                    'page': 'page',
                    'page_size': 'page_size',
                    'q': 'q',
                    'sort': 'sort',
                },
                'location_map': {
                    'x_request_id': 'header',
                    'page': 'query',
                    'page_size': 'query',
                    'q': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_instances
        )

        def __list_policies(
            self,
            project_name,
            **kwargs
        ):
            """List preheat policies  # noqa: E501

            List preheat policies  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_policies(project_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                sort (str): Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\". [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PreheatPolicy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            return self.call_with_http_info(**kwargs)

        self.list_policies = _Endpoint(
            settings={
                'response_type': ([PreheatPolicy],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies',
                'operation_id': 'list_policies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'x_request_id',
                    'page',
                    'page_size',
                    'q',
                    'sort',
                ],
                'required': [
                    'project_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'x_request_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'x_request_id': 'X-Request-Id',
                    'page': 'page',
                    'page_size': 'page_size',
                    'q': 'q',
                    'sort': 'sort',
                },
                'location_map': {
                    'project_name': 'path',
                    'x_request_id': 'header',
                    'page': 'query',
                    'page_size': 'query',
                    'q': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_policies
        )

        def __list_providers(
            self,
            **kwargs
        ):
            """List P2P providers  # noqa: E501

            List P2P providers  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_providers(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Metadata]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_providers = _Endpoint(
            settings={
                'response_type': ([Metadata],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/providers',
                'operation_id': 'list_providers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_request_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_providers
        )

        def __list_providers_under_project(
            self,
            project_name,
            **kwargs
        ):
            """Get all providers at project level  # noqa: E501

            Get all providers at project level  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_providers_under_project(project_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ProviderUnderProject]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            return self.call_with_http_info(**kwargs)

        self.list_providers_under_project = _Endpoint(
            settings={
                'response_type': ([ProviderUnderProject],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/providers',
                'operation_id': 'list_providers_under_project',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_providers_under_project
        )

        def __list_tasks(
            self,
            project_name,
            preheat_policy_name,
            execution_id,
            **kwargs
        ):
            """List all the related tasks for the given execution  # noqa: E501

            List all the related tasks for the given execution  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_tasks(project_name, preheat_policy_name, execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                execution_id (int): Execution ID

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                sort (str): Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \"sort=field1,-field2\". [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Task]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.list_tasks = _Endpoint(
            settings={
                'response_type': ([Task],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks',
                'operation_id': 'list_tasks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'x_request_id',
                    'page',
                    'page_size',
                    'q',
                    'sort',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'execution_id':
                        (int,),
                    'x_request_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'q':
                        (str,),
                    'sort':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'execution_id': 'execution_id',
                    'x_request_id': 'X-Request-Id',
                    'page': 'page',
                    'page_size': 'page_size',
                    'q': 'q',
                    'sort': 'sort',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'execution_id': 'path',
                    'x_request_id': 'header',
                    'page': 'query',
                    'page_size': 'query',
                    'q': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_tasks
        )

        def __manual_preheat(
            self,
            project_name,
            preheat_policy_name,
            preheat_policy,
            **kwargs
        ):
            """Manual preheat  # noqa: E501

            Manual preheat  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.manual_preheat(project_name, preheat_policy_name, preheat_policy, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                preheat_policy (PreheatPolicy): The policy schema info

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['preheat_policy'] = \
                preheat_policy
            return self.call_with_http_info(**kwargs)

        self.manual_preheat = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}',
                'operation_id': 'manual_preheat',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'preheat_policy',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'preheat_policy',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'preheat_policy':
                        (PreheatPolicy,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'preheat_policy': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__manual_preheat
        )

        def __ping_instances(
            self,
            instance,
            **kwargs
        ):
            """Ping status of a instance.  # noqa: E501

            This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential)   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.ping_instances(instance, async_req=True)
            >>> result = thread.get()

            Args:
                instance (Instance): The JSON object of instance.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['instance'] = \
                instance
            return self.call_with_http_info(**kwargs)

        self.ping_instances = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances/ping',
                'operation_id': 'ping_instances',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'instance',
                    'x_request_id',
                ],
                'required': [
                    'instance',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'instance':
                        (Instance,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'instance': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__ping_instances
        )

        def __stop_execution(
            self,
            project_name,
            preheat_policy_name,
            execution_id,
            execution,
            **kwargs
        ):
            """Stop a execution  # noqa: E501

            Stop a execution  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.stop_execution(project_name, preheat_policy_name, execution_id, execution, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                execution_id (int): Execution ID
                execution (Execution): The data of execution

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['execution_id'] = \
                execution_id
            kwargs['execution'] = \
                execution
            return self.call_with_http_info(**kwargs)

        self.stop_execution = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}',
                'operation_id': 'stop_execution',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'execution',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'execution_id',
                    'execution',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'execution_id':
                        (int,),
                    'execution':
                        (Execution,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'execution_id': 'execution_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'execution_id': 'path',
                    'execution': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__stop_execution
        )

        def __update_instance(
            self,
            preheat_instance_name,
            instance,
            **kwargs
        ):
            """Update the specified P2P provider instance  # noqa: E501

            Update the specified P2P provider instance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_instance(preheat_instance_name, instance, async_req=True)
            >>> result = thread.get()

            Args:
                preheat_instance_name (str): Instance Name
                instance (Instance): The instance to update

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['preheat_instance_name'] = \
                preheat_instance_name
            kwargs['instance'] = \
                instance
            return self.call_with_http_info(**kwargs)

        self.update_instance = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/p2p/preheat/instances/{preheat_instance_name}',
                'operation_id': 'update_instance',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'preheat_instance_name',
                    'instance',
                    'x_request_id',
                ],
                'required': [
                    'preheat_instance_name',
                    'instance',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'preheat_instance_name':
                        (str,),
                    'instance':
                        (Instance,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'preheat_instance_name': 'preheat_instance_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'preheat_instance_name': 'path',
                    'instance': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_instance
        )

        def __update_policy(
            self,
            project_name,
            preheat_policy_name,
            preheat_policy,
            **kwargs
        ):
            """Update preheat policy  # noqa: E501

            Update preheat policy  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_policy(project_name, preheat_policy_name, preheat_policy, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                preheat_policy_name (str): Preheat Policy Name
                preheat_policy (PreheatPolicy): The policy schema info

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['preheat_policy_name'] = \
                preheat_policy_name
            kwargs['preheat_policy'] = \
                preheat_policy
            return self.call_with_http_info(**kwargs)

        self.update_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/preheat/policies/{preheat_policy_name}',
                'operation_id': 'update_policy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'preheat_policy_name',
                    'preheat_policy',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'preheat_policy_name',
                    'preheat_policy',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'preheat_policy_name':
                        (str,),
                    'preheat_policy':
                        (PreheatPolicy,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'preheat_policy_name': 'preheat_policy_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'preheat_policy_name': 'path',
                    'preheat_policy': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_policy
        )
