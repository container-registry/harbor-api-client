"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from harbor_client.api_client import ApiClient, Endpoint as _Endpoint
from harbor_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from harbor_client.model.artifact import Artifact
from harbor_client.model.errors import Errors
from harbor_client.model.label import Label
from harbor_client.model.tag import Tag


class ArtifactApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_label(
            self,
            project_name,
            repository_name,
            reference,
            label,
            **kwargs
        ):
            """Add label to artifact  # noqa: E501

            Add label to the specified artiact.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_label(project_name, repository_name, reference, label, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                label (Label): The label that added to the artifact. Only the ID property is needed.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['label'] = \
                label
            return self.call_with_http_info(**kwargs)

        self.add_label = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels',
                'operation_id': 'add_label',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'label',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'label',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'label':
                        (Label,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'label': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_label
        )

        def __copy_artifact(
            self,
            project_name,
            repository_name,
            _from,
            **kwargs
        ):
            """Copy artifact  # noqa: E501

            Copy the artifact specified in the \"from\" parameter to the repository.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.copy_artifact(project_name, repository_name, _from, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                _from (str): The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['_from'] = \
                _from
            return self.call_with_http_info(**kwargs)

        self.copy_artifact = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts',
                'operation_id': 'copy_artifact',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    '_from',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    '_from',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    '_from':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    '_from': 'from',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    '_from': 'query',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__copy_artifact
        )

        def __create_tag(
            self,
            project_name,
            repository_name,
            reference,
            tag,
            **kwargs
        ):
            """Create tag  # noqa: E501

            Create a tag for the specified artifact  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_tag(project_name, repository_name, reference, tag, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                tag (Tag): The JSON object of tag.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['tag'] = \
                tag
            return self.call_with_http_info(**kwargs)

        self.create_tag = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags',
                'operation_id': 'create_tag',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'tag',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'tag',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'tag':
                        (Tag,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'tag': 'body',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_tag
        )

        def __delete_artifact(
            self,
            project_name,
            repository_name,
            reference,
            **kwargs
        ):
            """Delete the specific artifact  # noqa: E501

            Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_artifact(project_name, repository_name, reference, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            return self.call_with_http_info(**kwargs)

        self.delete_artifact = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}',
                'operation_id': 'delete_artifact',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_artifact
        )

        def __delete_tag(
            self,
            project_name,
            repository_name,
            reference,
            tag_name,
            **kwargs
        ):
            """Delete tag  # noqa: E501

            Delete the tag of the specified artifact  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_tag(project_name, repository_name, reference, tag_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                tag_name (str): The name of the tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['tag_name'] = \
                tag_name
            return self.call_with_http_info(**kwargs)

        self.delete_tag = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}',
                'operation_id': 'delete_tag',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'tag_name',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'tag_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'tag_name':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'tag_name': 'tag_name',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'tag_name': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_tag
        )

        def __get_addition(
            self,
            project_name,
            repository_name,
            reference,
            addition,
            **kwargs
        ):
            """Get the addition of the specific artifact  # noqa: E501

            Get the addition of the artifact specified by the reference under the project and repository.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_addition(project_name, repository_name, reference, addition, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                addition (str): The type of addition.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['addition'] = \
                addition
            return self.call_with_http_info(**kwargs)

        self.get_addition = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}',
                'operation_id': 'get_addition',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'addition',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'addition',
                ],
                'nullable': [
                ],
                'enum': [
                    'addition',
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('addition',): {

                        "BUILD_HISTORY": "build_history",
                        "VALUES.YAML": "values.yaml",
                        "README.MD": "readme.md",
                        "DEPENDENCIES": "dependencies"
                    },
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'addition':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'addition': 'addition',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'addition': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_addition
        )

        def __get_artifact(
            self,
            project_name,
            repository_name,
            reference,
            **kwargs
        ):
            """Get the specific artifact  # noqa: E501

            Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_artifact(project_name, repository_name, reference, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                x_accept_vulnerabilities (str): A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'. [optional] if omitted the server will use the default value of "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
                with_tag (bool): Specify whether the tags are inclued inside the returning artifacts. [optional] if omitted the server will use the default value of True
                with_label (bool): Specify whether the labels are inclued inside the returning artifacts. [optional] if omitted the server will use the default value of False
                with_scan_overview (bool): Specify whether the scan overview is inclued inside the returning artifacts. [optional] if omitted the server will use the default value of False
                with_signature (bool): Specify whether the signature is inclued inside the returning artifacts. [optional] if omitted the server will use the default value of False
                with_immutable_status (bool): Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\". [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Artifact
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            return self.call_with_http_info(**kwargs)

        self.get_artifact = _Endpoint(
            settings={
                'response_type': (Artifact,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}',
                'operation_id': 'get_artifact',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'x_request_id',
                    'page',
                    'page_size',
                    'x_accept_vulnerabilities',
                    'with_tag',
                    'with_label',
                    'with_scan_overview',
                    'with_signature',
                    'with_immutable_status',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'x_request_id':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'x_accept_vulnerabilities':
                        (str,),
                    'with_tag':
                        (bool,),
                    'with_label':
                        (bool,),
                    'with_scan_overview':
                        (bool,),
                    'with_signature':
                        (bool,),
                    'with_immutable_status':
                        (bool,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                    'page': 'page',
                    'page_size': 'page_size',
                    'x_accept_vulnerabilities': 'X-Accept-Vulnerabilities',
                    'with_tag': 'with_tag',
                    'with_label': 'with_label',
                    'with_scan_overview': 'with_scan_overview',
                    'with_signature': 'with_signature',
                    'with_immutable_status': 'with_immutable_status',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'x_request_id': 'header',
                    'page': 'query',
                    'page_size': 'query',
                    'x_accept_vulnerabilities': 'header',
                    'with_tag': 'query',
                    'with_label': 'query',
                    'with_scan_overview': 'query',
                    'with_signature': 'query',
                    'with_immutable_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_artifact
        )

        def __get_vulnerabilities_addition(
            self,
            project_name,
            repository_name,
            reference,
            **kwargs
        ):
            """Get the vulnerabilities addition of the specific artifact  # noqa: E501

            Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_vulnerabilities_addition(project_name, repository_name, reference, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                x_accept_vulnerabilities (str): A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'. [optional] if omitted the server will use the default value of "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            return self.call_with_http_info(**kwargs)

        self.get_vulnerabilities_addition = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities',
                'operation_id': 'get_vulnerabilities_addition',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'x_request_id',
                    'x_accept_vulnerabilities',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'x_request_id':
                        (str,),
                    'x_accept_vulnerabilities':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                    'x_accept_vulnerabilities': 'X-Accept-Vulnerabilities',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'x_request_id': 'header',
                    'x_accept_vulnerabilities': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_vulnerabilities_addition
        )

        def __list_artifacts(
            self,
            project_name,
            repository_name,
            **kwargs
        ):
            """List artifacts  # noqa: E501

            List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_artifacts(project_name, repository_name, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                x_accept_vulnerabilities (str): A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'. [optional] if omitted the server will use the default value of "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
                with_tag (bool): Specify whether the tags are included inside the returning artifacts. [optional] if omitted the server will use the default value of True
                with_label (bool): Specify whether the labels are included inside the returning artifacts. [optional] if omitted the server will use the default value of False
                with_scan_overview (bool): Specify whether the scan overview is included inside the returning artifacts. [optional] if omitted the server will use the default value of False
                with_signature (bool): Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\". [optional] if omitted the server will use the default value of False
                with_immutable_status (bool): Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\". [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Artifact]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            return self.call_with_http_info(**kwargs)

        self.list_artifacts = _Endpoint(
            settings={
                'response_type': ([Artifact],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts',
                'operation_id': 'list_artifacts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'x_request_id',
                    'q',
                    'page',
                    'page_size',
                    'x_accept_vulnerabilities',
                    'with_tag',
                    'with_label',
                    'with_scan_overview',
                    'with_signature',
                    'with_immutable_status',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'x_request_id':
                        (str,),
                    'q':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'x_accept_vulnerabilities':
                        (str,),
                    'with_tag':
                        (bool,),
                    'with_label':
                        (bool,),
                    'with_scan_overview':
                        (bool,),
                    'with_signature':
                        (bool,),
                    'with_immutable_status':
                        (bool,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'x_request_id': 'X-Request-Id',
                    'q': 'q',
                    'page': 'page',
                    'page_size': 'page_size',
                    'x_accept_vulnerabilities': 'X-Accept-Vulnerabilities',
                    'with_tag': 'with_tag',
                    'with_label': 'with_label',
                    'with_scan_overview': 'with_scan_overview',
                    'with_signature': 'with_signature',
                    'with_immutable_status': 'with_immutable_status',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'x_request_id': 'header',
                    'q': 'query',
                    'page': 'query',
                    'page_size': 'query',
                    'x_accept_vulnerabilities': 'header',
                    'with_tag': 'query',
                    'with_label': 'query',
                    'with_scan_overview': 'query',
                    'with_signature': 'query',
                    'with_immutable_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_artifacts
        )

        def __list_tags(
            self,
            project_name,
            repository_name,
            reference,
            **kwargs
        ):
            """List tags  # noqa: E501

            List tags of the specific artifact  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_tags(project_name, repository_name, reference, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                q (str): Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]. [optional]
                page (int): The page number. [optional] if omitted the server will use the default value of 1
                page_size (int): The size of per page. [optional] if omitted the server will use the default value of 10
                with_signature (bool): Specify whether the signature is included inside the returning tags. [optional] if omitted the server will use the default value of False
                with_immutable_status (bool): Specify whether the immutable status is included inside the returning tags. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Tag]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            return self.call_with_http_info(**kwargs)

        self.list_tags = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags',
                'operation_id': 'list_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'x_request_id',
                    'q',
                    'page',
                    'page_size',
                    'with_signature',
                    'with_immutable_status',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'x_request_id':
                        (str,),
                    'q':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'with_signature':
                        (bool,),
                    'with_immutable_status':
                        (bool,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                    'q': 'q',
                    'page': 'page',
                    'page_size': 'page_size',
                    'with_signature': 'with_signature',
                    'with_immutable_status': 'with_immutable_status',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'x_request_id': 'header',
                    'q': 'query',
                    'page': 'query',
                    'page_size': 'query',
                    'with_signature': 'query',
                    'with_immutable_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_tags
        )

        def __remove_label(
            self,
            project_name,
            repository_name,
            reference,
            label_id,
            **kwargs
        ):
            """Remove label from artifact  # noqa: E501

            Remove the label from the specified artiact.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.remove_label(project_name, repository_name, reference, label_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                label_id (int): The ID of the label that removed from the artifact.

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['label_id'] = \
                label_id
            return self.call_with_http_info(**kwargs)

        self.remove_label = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}',
                'operation_id': 'remove_label',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'label_id',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'label_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'label_id':
                        (int,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'label_id': 'label_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'label_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__remove_label
        )
