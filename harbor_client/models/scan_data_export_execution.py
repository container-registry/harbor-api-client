# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ScanDataExportExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'status': 'str',
        'trigger': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'status_text': 'str',
        'user_name': 'str',
        'file_present': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'status': 'status',
        'trigger': 'trigger',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'status_text': 'status_text',
        'user_name': 'user_name',
        'file_present': 'file_present'
    }

    def __init__(self, id=None, user_id=None, status=None, trigger=None, start_time=None, end_time=None, status_text=None, user_name=None, file_present=None, _configuration=None):  # noqa: E501
        """ScanDataExportExecution - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._status = None
        self._trigger = None
        self._start_time = None
        self._end_time = None
        self._status_text = None
        self._user_name = None
        self._file_present = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if status is not None:
            self.status = status
        if trigger is not None:
            self.trigger = trigger
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status_text is not None:
            self.status_text = status_text
        if user_name is not None:
            self.user_name = user_name
        if file_present is not None:
            self.file_present = file_present

    @property
    def id(self):
        """Gets the id of this ScanDataExportExecution.  # noqa: E501

        The ID of the execution  # noqa: E501

        :return: The id of this ScanDataExportExecution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScanDataExportExecution.

        The ID of the execution  # noqa: E501

        :param id: The id of this ScanDataExportExecution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this ScanDataExportExecution.  # noqa: E501

        The ID if the user triggering the export job  # noqa: E501

        :return: The user_id of this ScanDataExportExecution.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ScanDataExportExecution.

        The ID if the user triggering the export job  # noqa: E501

        :param user_id: The user_id of this ScanDataExportExecution.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def status(self):
        """Gets the status of this ScanDataExportExecution.  # noqa: E501

        The status of the execution  # noqa: E501

        :return: The status of this ScanDataExportExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScanDataExportExecution.

        The status of the execution  # noqa: E501

        :param status: The status of this ScanDataExportExecution.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def trigger(self):
        """Gets the trigger of this ScanDataExportExecution.  # noqa: E501

        The trigger mode  # noqa: E501

        :return: The trigger of this ScanDataExportExecution.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this ScanDataExportExecution.

        The trigger mode  # noqa: E501

        :param trigger: The trigger of this ScanDataExportExecution.  # noqa: E501
        :type: str
        """

        self._trigger = trigger

    @property
    def start_time(self):
        """Gets the start_time of this ScanDataExportExecution.  # noqa: E501

        The start time  # noqa: E501

        :return: The start_time of this ScanDataExportExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScanDataExportExecution.

        The start time  # noqa: E501

        :param start_time: The start_time of this ScanDataExportExecution.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ScanDataExportExecution.  # noqa: E501

        The end time  # noqa: E501

        :return: The end_time of this ScanDataExportExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScanDataExportExecution.

        The end time  # noqa: E501

        :param end_time: The end_time of this ScanDataExportExecution.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def status_text(self):
        """Gets the status_text of this ScanDataExportExecution.  # noqa: E501

        The status text  # noqa: E501

        :return: The status_text of this ScanDataExportExecution.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this ScanDataExportExecution.

        The status text  # noqa: E501

        :param status_text: The status_text of this ScanDataExportExecution.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def user_name(self):
        """Gets the user_name of this ScanDataExportExecution.  # noqa: E501

        The name of the user triggering the job  # noqa: E501

        :return: The user_name of this ScanDataExportExecution.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ScanDataExportExecution.

        The name of the user triggering the job  # noqa: E501

        :param user_name: The user_name of this ScanDataExportExecution.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def file_present(self):
        """Gets the file_present of this ScanDataExportExecution.  # noqa: E501

        Indicates whether the export artifact is present in registry  # noqa: E501

        :return: The file_present of this ScanDataExportExecution.  # noqa: E501
        :rtype: bool
        """
        return self._file_present

    @file_present.setter
    def file_present(self, file_present):
        """Sets the file_present of this ScanDataExportExecution.

        Indicates whether the export artifact is present in registry  # noqa: E501

        :param file_present: The file_present of this ScanDataExportExecution.  # noqa: E501
        :type: bool
        """

        self._file_present = file_present

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanDataExportExecution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanDataExportExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScanDataExportExecution):
            return True

        return self.to_dict() != other.to_dict()
