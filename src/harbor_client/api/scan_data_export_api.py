# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from harbor_client.api_client import ApiClient


class ScanDataExportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_scan_data(self, execution_id, **kwargs):  # noqa: E501
        """Download the scan data export file  # noqa: E501

        Download the scan data report. Default format is CSV  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_scan_data(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int execution_id: Execution ID (required)
        :param str x_request_id: An unique ID for the request
        :param str format: The format of the data to be exported. e.g. CSV or PDF
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.download_scan_data_with_http_info(execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_scan_data_with_http_info(execution_id, **kwargs)  # noqa: E501
            return data

    def download_scan_data_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Download the scan data export file  # noqa: E501

        Download the scan data report. Default format is CSV  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_scan_data_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int execution_id: Execution ID (required)
        :param str x_request_id: An unique ID for the request
        :param str format: The format of the data to be exported. e.g. CSV or PDF
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["execution_id", "x_request_id", "format"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method download_scan_data" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and (
            "execution_id" not in params or params["execution_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `execution_id` when calling `download_scan_data`"
            )  # noqa: E501

        if self.api_client.client_side_validation and (
            "x_request_id" in params and len(params["x_request_id"]) < 1
        ):
            raise ValueError(
                "Invalid value for parameter `x_request_id` when calling `download_scan_data`, length must be greater than or equal to `1`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "execution_id" in params:
            path_params["execution_id"] = params["execution_id"]  # noqa: E501

        query_params = []
        if "format" in params:
            query_params.append(("format", params["format"]))  # noqa: E501

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-Id"] = params["x_request_id"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["basic"]  # noqa: E501

        return self.api_client.call_api(
            "/export/cve/download/{execution_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="file",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def export_scan_data(self, x_scan_data_type, criteria, **kwargs):  # noqa: E501
        """Export scan data for selected projects  # noqa: E501

        Export scan data for selected projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_scan_data(x_scan_data_type, criteria, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_scan_data_type: The type of scan data to export (required)
        :param ScanDataExportRequest criteria: The criteria for the export (required)
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.export_scan_data_with_http_info(
                x_scan_data_type, criteria, **kwargs
            )  # noqa: E501
        else:
            (data) = self.export_scan_data_with_http_info(
                x_scan_data_type, criteria, **kwargs
            )  # noqa: E501
            return data

    def export_scan_data_with_http_info(self, x_scan_data_type, criteria, **kwargs):  # noqa: E501
        """Export scan data for selected projects  # noqa: E501

        Export scan data for selected projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_scan_data_with_http_info(x_scan_data_type, criteria, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_scan_data_type: The type of scan data to export (required)
        :param ScanDataExportRequest criteria: The criteria for the export (required)
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_scan_data_type", "criteria", "x_request_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method export_scan_data" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_scan_data_type' is set
        if self.api_client.client_side_validation and (
            "x_scan_data_type" not in params or params["x_scan_data_type"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `x_scan_data_type` when calling `export_scan_data`"
            )  # noqa: E501
        # verify the required parameter 'criteria' is set
        if self.api_client.client_side_validation and (
            "criteria" not in params or params["criteria"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `criteria` when calling `export_scan_data`"
            )  # noqa: E501

        if self.api_client.client_side_validation and (
            "x_request_id" in params and len(params["x_request_id"]) < 1
        ):
            raise ValueError(
                "Invalid value for parameter `x_request_id` when calling `export_scan_data`, length must be greater than or equal to `1`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-Id"] = params["x_request_id"]  # noqa: E501
        if "x_scan_data_type" in params:
            header_params["X-Scan-Data-Type"] = params["x_scan_data_type"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "criteria" in params:
            body_params = params["criteria"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["basic"]  # noqa: E501

        return self.api_client.call_api(
            "/export/cve",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ScanDataExportJob",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_scan_data_export_execution(self, execution_id, **kwargs):  # noqa: E501
        """Get the specific scan data export execution  # noqa: E501

        Get the scan data export execution specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_data_export_execution(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int execution_id: Execution ID (required)
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_scan_data_export_execution_with_http_info(
                execution_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_scan_data_export_execution_with_http_info(
                execution_id, **kwargs
            )  # noqa: E501
            return data

    def get_scan_data_export_execution_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Get the specific scan data export execution  # noqa: E501

        Get the scan data export execution specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_data_export_execution_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int execution_id: Execution ID (required)
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["execution_id", "x_request_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scan_data_export_execution" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and (
            "execution_id" not in params or params["execution_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `execution_id` when calling `get_scan_data_export_execution`"
            )  # noqa: E501

        if self.api_client.client_side_validation and (
            "x_request_id" in params and len(params["x_request_id"]) < 1
        ):
            raise ValueError(
                "Invalid value for parameter `x_request_id` when calling `get_scan_data_export_execution`, length must be greater than or equal to `1`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}
        if "execution_id" in params:
            path_params["execution_id"] = params["execution_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-Id"] = params["x_request_id"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["basic"]  # noqa: E501

        return self.api_client.call_api(
            "/export/cve/execution/{execution_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ScanDataExportExecution",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_scan_data_export_execution_list(self, **kwargs):  # noqa: E501
        """Get a list of specific scan data export execution jobs for a specified user  # noqa: E501

        Get a list of specific scan data export execution jobs for a specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_data_export_execution_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportExecutionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_scan_data_export_execution_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_scan_data_export_execution_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_scan_data_export_execution_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of specific scan data export execution jobs for a specified user  # noqa: E501

        Get a list of specific scan data export execution jobs for a specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_data_export_execution_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: An unique ID for the request
        :return: ScanDataExportExecutionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scan_data_export_execution_list" % key
                )
            params[key] = val
        del params["kwargs"]

        if self.api_client.client_side_validation and (
            "x_request_id" in params and len(params["x_request_id"]) < 1
        ):
            raise ValueError(
                "Invalid value for parameter `x_request_id` when calling `get_scan_data_export_execution_list`, length must be greater than or equal to `1`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-Id"] = params["x_request_id"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["basic"]  # noqa: E501

        return self.api_client.call_api(
            "/export/cve/executions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ScanDataExportExecutionList",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
