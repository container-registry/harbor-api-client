# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class RetentionPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'algorithm': 'str',
        'rules': 'list[RetentionRule]',
        'trigger': 'RetentionRuleTrigger',
        'scope': 'RetentionPolicyScope'
    }

    attribute_map = {
        'id': 'id',
        'algorithm': 'algorithm',
        'rules': 'rules',
        'trigger': 'trigger',
        'scope': 'scope'
    }

    def __init__(self, id=None, algorithm=None, rules=None, trigger=None, scope=None, _configuration=None):  # noqa: E501
        """RetentionPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._algorithm = None
        self._rules = None
        self._trigger = None
        self._scope = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if algorithm is not None:
            self.algorithm = algorithm
        if rules is not None:
            self.rules = rules
        if trigger is not None:
            self.trigger = trigger
        if scope is not None:
            self.scope = scope

    @property
    def id(self):
        """Gets the id of this RetentionPolicy.  # noqa: E501


        :return: The id of this RetentionPolicy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RetentionPolicy.


        :param id: The id of this RetentionPolicy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def algorithm(self):
        """Gets the algorithm of this RetentionPolicy.  # noqa: E501


        :return: The algorithm of this RetentionPolicy.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this RetentionPolicy.


        :param algorithm: The algorithm of this RetentionPolicy.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def rules(self):
        """Gets the rules of this RetentionPolicy.  # noqa: E501


        :return: The rules of this RetentionPolicy.  # noqa: E501
        :rtype: list[RetentionRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RetentionPolicy.


        :param rules: The rules of this RetentionPolicy.  # noqa: E501
        :type: list[RetentionRule]
        """

        self._rules = rules

    @property
    def trigger(self):
        """Gets the trigger of this RetentionPolicy.  # noqa: E501


        :return: The trigger of this RetentionPolicy.  # noqa: E501
        :rtype: RetentionRuleTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this RetentionPolicy.


        :param trigger: The trigger of this RetentionPolicy.  # noqa: E501
        :type: RetentionRuleTrigger
        """

        self._trigger = trigger

    @property
    def scope(self):
        """Gets the scope of this RetentionPolicy.  # noqa: E501


        :return: The scope of this RetentionPolicy.  # noqa: E501
        :rtype: RetentionPolicyScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RetentionPolicy.


        :param scope: The scope of this RetentionPolicy.  # noqa: E501
        :type: RetentionPolicyScope
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetentionPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetentionPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetentionPolicy):
            return True

        return self.to_dict() != other.to_dict()
