# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class RegistryProviderCredentialPattern(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "access_key_type": "str",
        "access_key_data": "str",
        "access_secret_type": "str",
        "access_secret_data": "str",
    }

    attribute_map = {
        "access_key_type": "access_key_type",
        "access_key_data": "access_key_data",
        "access_secret_type": "access_secret_type",
        "access_secret_data": "access_secret_data",
    }

    def __init__(
        self,
        access_key_type=None,
        access_key_data=None,
        access_secret_type=None,
        access_secret_data=None,
        _configuration=None,
    ):  # noqa: E501
        """RegistryProviderCredentialPattern - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_key_type = None
        self._access_key_data = None
        self._access_secret_type = None
        self._access_secret_data = None
        self.discriminator = None

        if access_key_type is not None:
            self.access_key_type = access_key_type
        if access_key_data is not None:
            self.access_key_data = access_key_data
        if access_secret_type is not None:
            self.access_secret_type = access_secret_type
        if access_secret_data is not None:
            self.access_secret_data = access_secret_data

    @property
    def access_key_type(self):
        """Gets the access_key_type of this RegistryProviderCredentialPattern.  # noqa: E501

        The access key type  # noqa: E501

        :return: The access_key_type of this RegistryProviderCredentialPattern.  # noqa: E501
        :rtype: str
        """
        return self._access_key_type

    @access_key_type.setter
    def access_key_type(self, access_key_type):
        """Sets the access_key_type of this RegistryProviderCredentialPattern.

        The access key type  # noqa: E501

        :param access_key_type: The access_key_type of this RegistryProviderCredentialPattern.  # noqa: E501
        :type: str
        """

        self._access_key_type = access_key_type

    @property
    def access_key_data(self):
        """Gets the access_key_data of this RegistryProviderCredentialPattern.  # noqa: E501

        The access key data  # noqa: E501

        :return: The access_key_data of this RegistryProviderCredentialPattern.  # noqa: E501
        :rtype: str
        """
        return self._access_key_data

    @access_key_data.setter
    def access_key_data(self, access_key_data):
        """Sets the access_key_data of this RegistryProviderCredentialPattern.

        The access key data  # noqa: E501

        :param access_key_data: The access_key_data of this RegistryProviderCredentialPattern.  # noqa: E501
        :type: str
        """

        self._access_key_data = access_key_data

    @property
    def access_secret_type(self):
        """Gets the access_secret_type of this RegistryProviderCredentialPattern.  # noqa: E501

        The access secret type  # noqa: E501

        :return: The access_secret_type of this RegistryProviderCredentialPattern.  # noqa: E501
        :rtype: str
        """
        return self._access_secret_type

    @access_secret_type.setter
    def access_secret_type(self, access_secret_type):
        """Sets the access_secret_type of this RegistryProviderCredentialPattern.

        The access secret type  # noqa: E501

        :param access_secret_type: The access_secret_type of this RegistryProviderCredentialPattern.  # noqa: E501
        :type: str
        """

        self._access_secret_type = access_secret_type

    @property
    def access_secret_data(self):
        """Gets the access_secret_data of this RegistryProviderCredentialPattern.  # noqa: E501

        The access secret data  # noqa: E501

        :return: The access_secret_data of this RegistryProviderCredentialPattern.  # noqa: E501
        :rtype: str
        """
        return self._access_secret_data

    @access_secret_data.setter
    def access_secret_data(self, access_secret_data):
        """Sets the access_secret_data of this RegistryProviderCredentialPattern.

        The access secret data  # noqa: E501

        :param access_secret_data: The access_secret_data of this RegistryProviderCredentialPattern.  # noqa: E501
        :type: str
        """

        self._access_secret_data = access_secret_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RegistryProviderCredentialPattern, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryProviderCredentialPattern):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistryProviderCredentialPattern):
            return True

        return self.to_dict() != other.to_dict()
