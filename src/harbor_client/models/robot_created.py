# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class RobotCreated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "int",
        "name": "str",
        "secret": "str",
        "creation_time": "datetime",
        "expires_at": "int",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "secret": "secret",
        "creation_time": "creation_time",
        "expires_at": "expires_at",
    }

    def __init__(
        self,
        id=None,
        name=None,
        secret=None,
        creation_time=None,
        expires_at=None,
        _configuration=None,
    ):  # noqa: E501
        """RobotCreated - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._secret = None
        self._creation_time = None
        self._expires_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if secret is not None:
            self.secret = secret
        if creation_time is not None:
            self.creation_time = creation_time
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this RobotCreated.  # noqa: E501

        The ID of the robot  # noqa: E501

        :return: The id of this RobotCreated.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RobotCreated.

        The ID of the robot  # noqa: E501

        :param id: The id of this RobotCreated.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RobotCreated.  # noqa: E501

        The name of the tag  # noqa: E501

        :return: The name of this RobotCreated.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RobotCreated.

        The name of the tag  # noqa: E501

        :param name: The name of this RobotCreated.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this RobotCreated.  # noqa: E501

        The secret of the robot  # noqa: E501

        :return: The secret of this RobotCreated.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this RobotCreated.

        The secret of the robot  # noqa: E501

        :param secret: The secret of this RobotCreated.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def creation_time(self):
        """Gets the creation_time of this RobotCreated.  # noqa: E501

        The creation time of the robot.  # noqa: E501

        :return: The creation_time of this RobotCreated.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this RobotCreated.

        The creation time of the robot.  # noqa: E501

        :param creation_time: The creation_time of this RobotCreated.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def expires_at(self):
        """Gets the expires_at of this RobotCreated.  # noqa: E501

        The expiration data of the robot  # noqa: E501

        :return: The expires_at of this RobotCreated.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this RobotCreated.

        The expiration data of the robot  # noqa: E501

        :param expires_at: The expires_at of this RobotCreated.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RobotCreated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RobotCreated):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RobotCreated):
            return True

        return self.to_dict() != other.to_dict()
