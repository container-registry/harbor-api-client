# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ScheduleTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'vendor_type': 'str',
        'vendor_id': 'int',
        'cron': 'str',
        'update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'vendor_type': 'vendor_type',
        'vendor_id': 'vendor_id',
        'cron': 'cron',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, vendor_type=None, vendor_id=None, cron=None, update_time=None, _configuration=None):  # noqa: E501
        """ScheduleTask - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._vendor_type = None
        self._vendor_id = None
        self._cron = None
        self._update_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if vendor_type is not None:
            self.vendor_type = vendor_type
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if cron is not None:
            self.cron = cron
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this ScheduleTask.  # noqa: E501

        the id of the Schedule task  # noqa: E501

        :return: The id of this ScheduleTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduleTask.

        the id of the Schedule task  # noqa: E501

        :param id: The id of this ScheduleTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vendor_type(self):
        """Gets the vendor_type of this ScheduleTask.  # noqa: E501

        the vendor type of the current schedule task  # noqa: E501

        :return: The vendor_type of this ScheduleTask.  # noqa: E501
        :rtype: str
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this ScheduleTask.

        the vendor type of the current schedule task  # noqa: E501

        :param vendor_type: The vendor_type of this ScheduleTask.  # noqa: E501
        :type: str
        """

        self._vendor_type = vendor_type

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ScheduleTask.  # noqa: E501

        the vendor id of the current task  # noqa: E501

        :return: The vendor_id of this ScheduleTask.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ScheduleTask.

        the vendor id of the current task  # noqa: E501

        :param vendor_id: The vendor_id of this ScheduleTask.  # noqa: E501
        :type: int
        """

        self._vendor_id = vendor_id

    @property
    def cron(self):
        """Gets the cron of this ScheduleTask.  # noqa: E501

        the cron of the current schedule task  # noqa: E501

        :return: The cron of this ScheduleTask.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this ScheduleTask.

        the cron of the current schedule task  # noqa: E501

        :param cron: The cron of this ScheduleTask.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def update_time(self):
        """Gets the update_time of this ScheduleTask.  # noqa: E501

        the update time of the schedule task  # noqa: E501

        :return: The update_time of this ScheduleTask.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ScheduleTask.

        the update time of the schedule task  # noqa: E501

        :param update_time: The update_time of this ScheduleTask.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleTask):
            return True

        return self.to_dict() != other.to_dict()
