# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ImmutableSelector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'decoration': 'str',
        'pattern': 'str',
        'extras': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'decoration': 'decoration',
        'pattern': 'pattern',
        'extras': 'extras'
    }

    def __init__(self, kind=None, decoration=None, pattern=None, extras=None, _configuration=None):  # noqa: E501
        """ImmutableSelector - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._kind = None
        self._decoration = None
        self._pattern = None
        self._extras = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if decoration is not None:
            self.decoration = decoration
        if pattern is not None:
            self.pattern = pattern
        if extras is not None:
            self.extras = extras

    @property
    def kind(self):
        """Gets the kind of this ImmutableSelector.  # noqa: E501


        :return: The kind of this ImmutableSelector.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ImmutableSelector.


        :param kind: The kind of this ImmutableSelector.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def decoration(self):
        """Gets the decoration of this ImmutableSelector.  # noqa: E501


        :return: The decoration of this ImmutableSelector.  # noqa: E501
        :rtype: str
        """
        return self._decoration

    @decoration.setter
    def decoration(self, decoration):
        """Sets the decoration of this ImmutableSelector.


        :param decoration: The decoration of this ImmutableSelector.  # noqa: E501
        :type: str
        """

        self._decoration = decoration

    @property
    def pattern(self):
        """Gets the pattern of this ImmutableSelector.  # noqa: E501


        :return: The pattern of this ImmutableSelector.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ImmutableSelector.


        :param pattern: The pattern of this ImmutableSelector.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def extras(self):
        """Gets the extras of this ImmutableSelector.  # noqa: E501


        :return: The extras of this ImmutableSelector.  # noqa: E501
        :rtype: str
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this ImmutableSelector.


        :param extras: The extras of this ImmutableSelector.  # noqa: E501
        :type: str
        """

        self._extras = extras

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImmutableSelector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImmutableSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImmutableSelector):
            return True

        return self.to_dict() != other.to_dict()
