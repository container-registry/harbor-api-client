# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ScannerCapability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"consumes_mime_types": "list[str]", "produces_mime_types": "list[str]"}

    attribute_map = {
        "consumes_mime_types": "consumes_mime_types",
        "produces_mime_types": "produces_mime_types",
    }

    def __init__(
        self, consumes_mime_types=None, produces_mime_types=None, _configuration=None
    ):  # noqa: E501
        """ScannerCapability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._consumes_mime_types = None
        self._produces_mime_types = None
        self.discriminator = None

        if consumes_mime_types is not None:
            self.consumes_mime_types = consumes_mime_types
        if produces_mime_types is not None:
            self.produces_mime_types = produces_mime_types

    @property
    def consumes_mime_types(self):
        """Gets the consumes_mime_types of this ScannerCapability.  # noqa: E501


        :return: The consumes_mime_types of this ScannerCapability.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes_mime_types

    @consumes_mime_types.setter
    def consumes_mime_types(self, consumes_mime_types):
        """Sets the consumes_mime_types of this ScannerCapability.


        :param consumes_mime_types: The consumes_mime_types of this ScannerCapability.  # noqa: E501
        :type: list[str]
        """

        self._consumes_mime_types = consumes_mime_types

    @property
    def produces_mime_types(self):
        """Gets the produces_mime_types of this ScannerCapability.  # noqa: E501


        :return: The produces_mime_types of this ScannerCapability.  # noqa: E501
        :rtype: list[str]
        """
        return self._produces_mime_types

    @produces_mime_types.setter
    def produces_mime_types(self, produces_mime_types):
        """Sets the produces_mime_types of this ScannerCapability.


        :param produces_mime_types: The produces_mime_types of this ScannerCapability.  # noqa: E501
        :type: list[str]
        """

        self._produces_mime_types = produces_mime_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ScannerCapability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScannerCapability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScannerCapability):
            return True

        return self.to_dict() != other.to_dict()
