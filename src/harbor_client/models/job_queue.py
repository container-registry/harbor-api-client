# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class JobQueue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_type': 'str',
        'count': 'int',
        'latency': 'int',
        'paused': 'bool'
    }

    attribute_map = {
        'job_type': 'job_type',
        'count': 'count',
        'latency': 'latency',
        'paused': 'paused'
    }

    def __init__(self, job_type=None, count=None, latency=None, paused=None, _configuration=None):  # noqa: E501
        """JobQueue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._job_type = None
        self._count = None
        self._latency = None
        self._paused = None
        self.discriminator = None

        if job_type is not None:
            self.job_type = job_type
        if count is not None:
            self.count = count
        if latency is not None:
            self.latency = latency
        if paused is not None:
            self.paused = paused

    @property
    def job_type(self):
        """Gets the job_type of this JobQueue.  # noqa: E501

        The type of the job queue  # noqa: E501

        :return: The job_type of this JobQueue.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobQueue.

        The type of the job queue  # noqa: E501

        :param job_type: The job_type of this JobQueue.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def count(self):
        """Gets the count of this JobQueue.  # noqa: E501

        The count of jobs in the job queue  # noqa: E501

        :return: The count of this JobQueue.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this JobQueue.

        The count of jobs in the job queue  # noqa: E501

        :param count: The count of this JobQueue.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def latency(self):
        """Gets the latency of this JobQueue.  # noqa: E501

        The latency the job queue (seconds)  # noqa: E501

        :return: The latency of this JobQueue.  # noqa: E501
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this JobQueue.

        The latency the job queue (seconds)  # noqa: E501

        :param latency: The latency of this JobQueue.  # noqa: E501
        :type: int
        """

        self._latency = latency

    @property
    def paused(self):
        """Gets the paused of this JobQueue.  # noqa: E501

        The paused status of the job queue  # noqa: E501

        :return: The paused of this JobQueue.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this JobQueue.

        The paused status of the job queue  # noqa: E501

        :param paused: The paused of this JobQueue.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobQueue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobQueue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobQueue):
            return True

        return self.to_dict() != other.to_dict()
