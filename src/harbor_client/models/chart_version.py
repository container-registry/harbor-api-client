# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ChartVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'labels': 'list[Label]',
        'created': 'str',
        'removed': 'bool',
        'digest': 'str',
        'urls': 'list[str]'
    }

    attribute_map = {
        'labels': 'labels',
        'created': 'created',
        'removed': 'removed',
        'digest': 'digest',
        'urls': 'urls'
    }

    def __init__(self, labels=None, created=None, removed=None, digest=None, urls=None, _configuration=None):  # noqa: E501
        """ChartVersion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._labels = None
        self._created = None
        self._removed = None
        self._digest = None
        self._urls = None
        self.discriminator = None

        if labels is not None:
            self.labels = labels
        if created is not None:
            self.created = created
        if removed is not None:
            self.removed = removed
        if digest is not None:
            self.digest = digest
        if urls is not None:
            self.urls = urls

    @property
    def labels(self):
        """Gets the labels of this ChartVersion.  # noqa: E501

        A list of label  # noqa: E501

        :return: The labels of this ChartVersion.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ChartVersion.

        A list of label  # noqa: E501

        :param labels: The labels of this ChartVersion.  # noqa: E501
        :type: list[Label]
        """

        self._labels = labels

    @property
    def created(self):
        """Gets the created of this ChartVersion.  # noqa: E501

        The created time of the chart entry  # noqa: E501

        :return: The created of this ChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ChartVersion.

        The created time of the chart entry  # noqa: E501

        :param created: The created of this ChartVersion.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def removed(self):
        """Gets the removed of this ChartVersion.  # noqa: E501

        A flag to indicate if the chart entry is removed  # noqa: E501

        :return: The removed of this ChartVersion.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this ChartVersion.

        A flag to indicate if the chart entry is removed  # noqa: E501

        :param removed: The removed of this ChartVersion.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def digest(self):
        """Gets the digest of this ChartVersion.  # noqa: E501

        The digest value of the chart entry  # noqa: E501

        :return: The digest of this ChartVersion.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ChartVersion.

        The digest value of the chart entry  # noqa: E501

        :param digest: The digest of this ChartVersion.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def urls(self):
        """Gets the urls of this ChartVersion.  # noqa: E501

        The urls of the chart entry  # noqa: E501

        :return: The urls of this ChartVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this ChartVersion.

        The urls of the chart entry  # noqa: E501

        :param urls: The urls of this ChartVersion.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChartVersion):
            return True

        return self.to_dict() != other.to_dict()
