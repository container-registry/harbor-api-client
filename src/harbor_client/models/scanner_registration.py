# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class ScannerRegistration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "uuid": "str",
        "name": "str",
        "description": "str",
        "url": "str",
        "disabled": "bool",
        "is_default": "bool",
        "auth": "str",
        "access_credential": "str",
        "skip_cert_verify": "bool",
        "use_internal_addr": "bool",
        "create_time": "datetime",
        "update_time": "datetime",
        "adapter": "str",
        "vendor": "str",
        "version": "str",
        "health": "str",
    }

    attribute_map = {
        "uuid": "uuid",
        "name": "name",
        "description": "description",
        "url": "url",
        "disabled": "disabled",
        "is_default": "is_default",
        "auth": "auth",
        "access_credential": "access_credential",
        "skip_cert_verify": "skip_certVerify",
        "use_internal_addr": "use_internal_addr",
        "create_time": "create_time",
        "update_time": "update_time",
        "adapter": "adapter",
        "vendor": "vendor",
        "version": "version",
        "health": "health",
    }

    def __init__(
        self,
        uuid=None,
        name=None,
        description=None,
        url=None,
        disabled=False,
        is_default=False,
        auth="",
        access_credential=None,
        skip_cert_verify=False,
        use_internal_addr=False,
        create_time=None,
        update_time=None,
        adapter=None,
        vendor=None,
        version=None,
        health="",
        _configuration=None,
    ):  # noqa: E501
        """ScannerRegistration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._name = None
        self._description = None
        self._url = None
        self._disabled = None
        self._is_default = None
        self._auth = None
        self._access_credential = None
        self._skip_cert_verify = None
        self._use_internal_addr = None
        self._create_time = None
        self._update_time = None
        self._adapter = None
        self._vendor = None
        self._version = None
        self._health = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if disabled is not None:
            self.disabled = disabled
        if is_default is not None:
            self.is_default = is_default
        if auth is not None:
            self.auth = auth
        if access_credential is not None:
            self.access_credential = access_credential
        if skip_cert_verify is not None:
            self.skip_cert_verify = skip_cert_verify
        if use_internal_addr is not None:
            self.use_internal_addr = use_internal_addr
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if adapter is not None:
            self.adapter = adapter
        if vendor is not None:
            self.vendor = vendor
        if version is not None:
            self.version = version
        if health is not None:
            self.health = health

    @property
    def uuid(self):
        """Gets the uuid of this ScannerRegistration.  # noqa: E501

        The unique identifier of this registration.  # noqa: E501

        :return: The uuid of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ScannerRegistration.

        The unique identifier of this registration.  # noqa: E501

        :param uuid: The uuid of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this ScannerRegistration.  # noqa: E501

        The name of this registration.  # noqa: E501

        :return: The name of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScannerRegistration.

        The name of this registration.  # noqa: E501

        :param name: The name of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ScannerRegistration.  # noqa: E501

        An optional description of this registration.  # noqa: E501

        :return: The description of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScannerRegistration.

        An optional description of this registration.  # noqa: E501

        :param description: The description of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this ScannerRegistration.  # noqa: E501

        A base URL of the scanner adapter  # noqa: E501

        :return: The url of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScannerRegistration.

        A base URL of the scanner adapter  # noqa: E501

        :param url: The url of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def disabled(self):
        """Gets the disabled of this ScannerRegistration.  # noqa: E501

        Indicate whether the registration is enabled or not  # noqa: E501

        :return: The disabled of this ScannerRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ScannerRegistration.

        Indicate whether the registration is enabled or not  # noqa: E501

        :param disabled: The disabled of this ScannerRegistration.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def is_default(self):
        """Gets the is_default of this ScannerRegistration.  # noqa: E501

        Indicate if the registration is set as the system default one  # noqa: E501

        :return: The is_default of this ScannerRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ScannerRegistration.

        Indicate if the registration is set as the system default one  # noqa: E501

        :param is_default: The is_default of this ScannerRegistration.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def auth(self):
        """Gets the auth of this ScannerRegistration.  # noqa: E501

        Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"   # noqa: E501

        :return: The auth of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this ScannerRegistration.

        Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"   # noqa: E501

        :param auth: The auth of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._auth = auth

    @property
    def access_credential(self):
        """Gets the access_credential of this ScannerRegistration.  # noqa: E501

        An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.   # noqa: E501

        :return: The access_credential of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._access_credential

    @access_credential.setter
    def access_credential(self, access_credential):
        """Sets the access_credential of this ScannerRegistration.

        An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.   # noqa: E501

        :param access_credential: The access_credential of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._access_credential = access_credential

    @property
    def skip_cert_verify(self):
        """Gets the skip_cert_verify of this ScannerRegistration.  # noqa: E501

        Indicate if skip the certificate verification when sending HTTP requests  # noqa: E501

        :return: The skip_cert_verify of this ScannerRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._skip_cert_verify

    @skip_cert_verify.setter
    def skip_cert_verify(self, skip_cert_verify):
        """Sets the skip_cert_verify of this ScannerRegistration.

        Indicate if skip the certificate verification when sending HTTP requests  # noqa: E501

        :param skip_cert_verify: The skip_cert_verify of this ScannerRegistration.  # noqa: E501
        :type: bool
        """

        self._skip_cert_verify = skip_cert_verify

    @property
    def use_internal_addr(self):
        """Gets the use_internal_addr of this ScannerRegistration.  # noqa: E501

        Indicate whether use internal registry addr for the scanner to pull content or not  # noqa: E501

        :return: The use_internal_addr of this ScannerRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._use_internal_addr

    @use_internal_addr.setter
    def use_internal_addr(self, use_internal_addr):
        """Sets the use_internal_addr of this ScannerRegistration.

        Indicate whether use internal registry addr for the scanner to pull content or not  # noqa: E501

        :param use_internal_addr: The use_internal_addr of this ScannerRegistration.  # noqa: E501
        :type: bool
        """

        self._use_internal_addr = use_internal_addr

    @property
    def create_time(self):
        """Gets the create_time of this ScannerRegistration.  # noqa: E501

        The creation time of this registration  # noqa: E501

        :return: The create_time of this ScannerRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ScannerRegistration.

        The creation time of this registration  # noqa: E501

        :param create_time: The create_time of this ScannerRegistration.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ScannerRegistration.  # noqa: E501

        The update time of this registration  # noqa: E501

        :return: The update_time of this ScannerRegistration.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ScannerRegistration.

        The update time of this registration  # noqa: E501

        :param update_time: The update_time of this ScannerRegistration.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def adapter(self):
        """Gets the adapter of this ScannerRegistration.  # noqa: E501

        Optional property to describe the name of the scanner registration  # noqa: E501

        :return: The adapter of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._adapter

    @adapter.setter
    def adapter(self, adapter):
        """Sets the adapter of this ScannerRegistration.

        Optional property to describe the name of the scanner registration  # noqa: E501

        :param adapter: The adapter of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._adapter = adapter

    @property
    def vendor(self):
        """Gets the vendor of this ScannerRegistration.  # noqa: E501

        Optional property to describe the vendor of the scanner registration  # noqa: E501

        :return: The vendor of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ScannerRegistration.

        Optional property to describe the vendor of the scanner registration  # noqa: E501

        :param vendor: The vendor of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this ScannerRegistration.  # noqa: E501

        Optional property to describe the version of the scanner registration  # noqa: E501

        :return: The version of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ScannerRegistration.

        Optional property to describe the version of the scanner registration  # noqa: E501

        :param version: The version of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def health(self):
        """Gets the health of this ScannerRegistration.  # noqa: E501

        Indicate the healthy of the registration  # noqa: E501

        :return: The health of this ScannerRegistration.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ScannerRegistration.

        Indicate the healthy of the registration  # noqa: E501

        :param health: The health of this ScannerRegistration.  # noqa: E501
        :type: str
        """

        self._health = health

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ScannerRegistration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScannerRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScannerRegistration):
            return True

        return self.to_dict() != other.to_dict()
