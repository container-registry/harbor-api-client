# coding: utf-8

"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harbor_client.configuration import Configuration


class AuthproxySetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "endpoint": "str",
        "tokenreivew_endpoint": "str",
        "skip_search": "bool",
        "verify_cert": "bool",
        "server_certificate": "str",
    }

    attribute_map = {
        "endpoint": "endpoint",
        "tokenreivew_endpoint": "tokenreivew_endpoint",
        "skip_search": "skip_search",
        "verify_cert": "verify_cert",
        "server_certificate": "server_certificate",
    }

    def __init__(
        self,
        endpoint=None,
        tokenreivew_endpoint=None,
        skip_search=None,
        verify_cert=None,
        server_certificate=None,
        _configuration=None,
    ):  # noqa: E501
        """AuthproxySetting - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._endpoint = None
        self._tokenreivew_endpoint = None
        self._skip_search = None
        self._verify_cert = None
        self._server_certificate = None
        self.discriminator = None

        if endpoint is not None:
            self.endpoint = endpoint
        if tokenreivew_endpoint is not None:
            self.tokenreivew_endpoint = tokenreivew_endpoint
        if skip_search is not None:
            self.skip_search = skip_search
        if verify_cert is not None:
            self.verify_cert = verify_cert
        if server_certificate is not None:
            self.server_certificate = server_certificate

    @property
    def endpoint(self):
        """Gets the endpoint of this AuthproxySetting.  # noqa: E501

        The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'  # noqa: E501

        :return: The endpoint of this AuthproxySetting.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this AuthproxySetting.

        The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'  # noqa: E501

        :param endpoint: The endpoint of this AuthproxySetting.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def tokenreivew_endpoint(self):
        """Gets the tokenreivew_endpoint of this AuthproxySetting.  # noqa: E501

        The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'  # noqa: E501

        :return: The tokenreivew_endpoint of this AuthproxySetting.  # noqa: E501
        :rtype: str
        """
        return self._tokenreivew_endpoint

    @tokenreivew_endpoint.setter
    def tokenreivew_endpoint(self, tokenreivew_endpoint):
        """Sets the tokenreivew_endpoint of this AuthproxySetting.

        The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'  # noqa: E501

        :param tokenreivew_endpoint: The tokenreivew_endpoint of this AuthproxySetting.  # noqa: E501
        :type: str
        """

        self._tokenreivew_endpoint = tokenreivew_endpoint

    @property
    def skip_search(self):
        """Gets the skip_search of this AuthproxySetting.  # noqa: E501

        The flag to determine whether Harbor can skip search the user/group when adding him as a member.  # noqa: E501

        :return: The skip_search of this AuthproxySetting.  # noqa: E501
        :rtype: bool
        """
        return self._skip_search

    @skip_search.setter
    def skip_search(self, skip_search):
        """Sets the skip_search of this AuthproxySetting.

        The flag to determine whether Harbor can skip search the user/group when adding him as a member.  # noqa: E501

        :param skip_search: The skip_search of this AuthproxySetting.  # noqa: E501
        :type: bool
        """

        self._skip_search = skip_search

    @property
    def verify_cert(self):
        """Gets the verify_cert of this AuthproxySetting.  # noqa: E501

        The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.  # noqa: E501

        :return: The verify_cert of this AuthproxySetting.  # noqa: E501
        :rtype: bool
        """
        return self._verify_cert

    @verify_cert.setter
    def verify_cert(self, verify_cert):
        """Sets the verify_cert of this AuthproxySetting.

        The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.  # noqa: E501

        :param verify_cert: The verify_cert of this AuthproxySetting.  # noqa: E501
        :type: bool
        """

        self._verify_cert = verify_cert

    @property
    def server_certificate(self):
        """Gets the server_certificate of this AuthproxySetting.  # noqa: E501

        The certificate to be pinned when connecting auth proxy.  # noqa: E501

        :return: The server_certificate of this AuthproxySetting.  # noqa: E501
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this AuthproxySetting.

        The certificate to be pinned when connecting auth proxy.  # noqa: E501

        :param server_certificate: The server_certificate of this AuthproxySetting.  # noqa: E501
        :type: str
        """

        self._server_certificate = server_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AuthproxySetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthproxySetting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthproxySetting):
            return True

        return self.to_dict() != other.to_dict()
