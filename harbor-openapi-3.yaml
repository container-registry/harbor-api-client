openapi: 3.0.0
info:
  version: 2.0
  description: These APIs provide services for manipulating Harbor project.
  title: Harbor API
paths:
  '/projects/{project_id}/metadatas':
    post:
      description: |
        This endpoint is aimed to add metadata of a project.
      summary: Add metadata for the project.
      responses:
        '200':
          description: Add metadata successfully.
        '400':
          description: Invalid request.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to the project.
        '404':
          description: Project ID does not exist.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Selected project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMetadata'
        description: The metadata of project.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint returns metadata of the project specified by project ID.
      summary: Get project metadata.
      responses:
        '200':
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        '401':
          description: User need to login first.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: The ID of project.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/users/{user_id}/cli_secret':
    put:
      description: >
        This endpoint let user generate a new CLI secret for himself.  This API
        only works when auth mode is set to 'OIDC'.

        Once this API returns with successful status, the old secret will be
        invalid, as there will be only one CLI secret

        for a user.
      summary: Set CLI secret for a user.
      responses:
        '200':
          description: The secret is successfully updated
        '400':
          description: >-
            Invalid user ID.  Or user is not onboarded via OIDC authentication.
            Or the secret does not meet the standard.
        '401':
          description: User need to log in first.
        '403':
          description: Non-admin user can only generate the cli secret of himself.
        '404':
          description: User ID does not exist.
        '412':
          description: >-
            The auth mode of the system is not "oidc_auth", or the user is not
            onboarded via OIDC AuthN.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: User ID
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: The new secret
        description: JSON object that includes the new secret
        required: true
      tags:
        - Products
  /ldap/groups/search:
    get:
      description: >
        This endpoint searches the available ldap groups based on related
        configuration parameters. support to search by groupname or groupdn.
      summary: Search available ldap groups.
      responses:
        '200':
          description: Search ldap group successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
        '400':
          description: The Ldap group DN is invalid.
        '404':
          description: No ldap group found.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: Ldap group name
          in: query
          name: groupname
          schema:
            type: string
        - required: false
          description: The LDAP group DN
          in: query
          name: groupdn
          schema:
            type: string
      tags:
        - Products
  /users/current/permissions:
    get:
      description: |
        This endpoint is to get the current user permissions.
      summary: Get current user permissions.
      responses:
        '200':
          description: Get current user permission successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Permission'
                type: array
        '401':
          description: User need to log in first.
        '500':
          description: Internal errors.
      parameters:
        - required: false
          description: Get permissions of the scope
          in: query
          name: scope
          schema:
            type: string
        - required: false
          description: >
            If true, the resources in the response are relative to the scope,

            eg for resource '/project/1/repository' if relative is 'true' then
            the resource in response will be 'repository'.
          in: query
          name: relative
          schema:
            type: boolean
      tags:
        - Products
  '/users/{user_id}':
    put:
      description: |
        This endpoint let a registered user change his profile.
      summary: Update a registered user to change his profile.
      responses:
        '200':
          description: Updated user's profile successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Registered user ID
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        description: 'Only email, realname and comment can be modified.'
        required: true
      tags:
        - Products
    get:
      description: |
        Get user's profile with user id.
      summary: Get a user's profile.
      responses:
        '200':
          description: Get user's profile successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Registered user ID
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      tags:
        - Products
    delete:
      description: |
        This endpoint let administrator of Harbor mark a registered user as
        be removed.It actually won't be deleted from DB.
      summary: Mark a registered user as be removed.
      responses:
        '200':
          description: Marked user as be removed successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: User ID for marking as to be removed.
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      tags:
        - Products
  /users/search:
    get:
      description: |
        This endpoint is to search the users by username.
      summary: Search users by username
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: 'Search users by username, email successfully.'
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSearch'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/UserSearch'
                type: array
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          description: Username for filtering results.
          in: query
          name: username
          schema:
            type: string
        - in: query
          description: 'The page number, default is 1.'
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
  /users/current:
    get:
      description: |
        This endpoint is to get the current user information.
      summary: Get current user info.
      responses:
        '200':
          description: Get current user information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User need to log in first.
      tags:
        - Products
  /labels:
    post:
      description: |
        This endpoint let user creates a label.
      summary: Post creates a label
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: Create successfully.
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '409':
          description: Label with the same name and same scope already exists.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The json object of label.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint let user list labels by name, scope and project_id
      summary: List labels according to the query strings.
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: Get successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: The label name.
          in: query
          name: name
          schema:
            type: string
        - required: true
          description: >-
            The label scope. Valid values are g and p. g for global labels and p
            for project labels.
          in: query
          name: scope
          schema:
            type: string
        - in: query
          description: 'Relevant project ID, required when scope is p.'
          required: false
          name: project_id
          schema:
            type: integer
            format: int64
        - in: query
          description: The page number.
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
  /ldap/users/import:
    post:
      description: >
        This endpoint adds the selected available ldap users to harbor based on
        related configuration parameters from the system. System will try to
        guess the user email address and realname, add to harbor user
        information.

        If have errors when import user, will return the list of importing
        failed uid and the failed reason.
      summary: Import selected available ldap users.
      responses:
        '200':
          description: Add ldap users successfully.
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '404':
          description: Failed import some users.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LdapFailedImportUsers'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/LdapFailedImportUsers'
                type: array
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapImportUsers'
        description: >-
          The uid listed for importing. This list will check users validity of
          ldap service based on configuration from the system.
        required: true
      tags:
        - Products
  '/projects/{project_id}/scanner/candidates':
    get:
      description: >
        Retrieve the system configured scanner registrations as candidates of
        setting project level scanner.
      summary: >-
        Get scanner registration candidates for configurating project level
        scanner
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: A list of scanner registrations.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                type: array
        '400':
          description: Bad project ID or query parameters
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '500':
          description: Internal server error happened
      parameters:
        - in: query
          description: The page number.
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
        - in: path
          description: The project identifier.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
        - Scanners
  '/chartrepo/{repo}/charts/{name}/{version}/labels':
    post:
      description: Mark label to the specified chart version.
      summary: Mark label to chart.
      responses:
        '200':
          description: The label is successfully marked to the chart version.
        '400':
          $ref: '#/components/schemas/BadRequestFormatedError'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '409':
          $ref: '#/components/schemas/ConflictFormatedError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'
      parameters:
        - required: true
          description: The project name
          in: path
          name: repo
          schema:
            type: string
        - required: true
          description: The chart name
          in: path
          name: name
          schema:
            type: string
        - required: true
          description: The chart version
          in: path
          name: version
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The label being marked to the chart version
        required: true
      tags:
        - Products
        - Chart Repository
        - Label
    get:
      description: Return the attahced labels of the specified chart version.
      summary: Return the attahced labels of chart.
      responses:
        '200':
          $ref: '#/components/schemas/Labels'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'
      parameters:
        - required: true
          description: The project name
          in: path
          name: repo
          schema:
            type: string
        - required: true
          description: The chart name
          in: path
          name: name
          schema:
            type: string
        - required: true
          description: The chart version
          in: path
          name: version
          schema:
            type: string
      tags:
        - Products
        - Chart Repository
        - Label
  '/users/{user_id}/password':
    put:
      description: >
        This endpoint is for user to update password. Users with the admin role
        can change any user's password. Guest users can change only their own
        password.
      summary: Change the password on a user that already exists.
      responses:
        '200':
          description: Updated password successfully.
        '400':
          description: Invalid user ID; Old password is blank; New password is blank.
        '401':
          description: Don't have authority to change password. Please check login status.
        '403':
          description: >-
            The caller does not have permission to update the password of the
            user with given ID, or the old password in request body is not
            correct.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Registered user ID.
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        description: >-
          Password to be updated, the attribute 'old_password' is optional when
          the API is called by the system administrator.
        required: true
      tags:
        - Products
  '/projects/{project_id}/webhook/policies':
    post:
      description: |
        This endpoint create a webhook policy if the project does not have one.
      summary: Create project webhook policy.
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: Project webhook policy create successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to create webhook policy of the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        description: Properties "targets" and "event_types" needed.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint returns webhook policies of a project.
      summary: List project webhook policies.
      responses:
        '200':
          description: List project webhook policies successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookPolicy'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookPolicy'
                type: array
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to list webhook policies of the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/registries/{id}/namespace':
    get:
      description: |
        This endpoint let user list namespaces of registry according to query.
      summary: List namespaces of registry
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Namespace'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Namespace'
                type: array
        '401':
          description: User need to login first.
        '403':
          description: User has no privilege for the operation.
        '404':
          description: No registry found.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          description: The registry ID.
          in: path
          name: id
          schema:
            type: integer
        - required: false
          description: The name of namespace.
          in: query
          name: name
          schema:
            type: string
      tags:
        - Products
  '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}':
    delete:
      description: Remove label from the specified chart version.
      summary: Remove label from chart.
      responses:
        '200':
          description: The label is successfully unmarked from the chart version.
        '400':
          $ref: '#/components/schemas/BadRequestFormatedError'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'
      parameters:
        - required: true
          description: The project name
          in: path
          name: repo
          schema:
            type: string
        - required: true
          description: The chart name
          in: path
          name: name
          schema:
            type: string
        - required: true
          description: The chart version
          in: path
          name: version
          schema:
            type: string
        - required: true
          description: The label ID
          in: path
          name: id
          schema:
            type: integer
      tags:
        - Products
        - Chart Repository
        - Label
  '/projects/{project_id}/webhook/jobs':
    get:
      description: |
        This endpoint returns webhook jobs of a project.
      summary: List project webhook jobs
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: List project webhook jobs successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookJob'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookJob'
                type: array
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to list webhook jobs of the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: query
          description: The policy ID.
          required: true
          name: policy_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  /ldap/ping:
    post:
      description: >
        This endpoint ping the available ldap service for test related
        configuration parameters.
      summary: Ping available ldap service.
      responses:
        '200':
          description: Ping ldap service successfully.
        '400':
          description: Inviald ldap configuration parameters.
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConf'
        description: >-
          ldap configuration. support input ldap service configuration. If it's
          a empty request, will load current configuration from the system.
      tags:
        - Products
  /registries/ping:
    post:
      description: >
        This endpoint checks status of a registry, the registry can be given by
        ID or URL (together with credential)
      summary: Ping status of a registry.
      responses:
        '200':
          description: Registry is healthy.
        '400':
          description: No proper registry information provided.
        '401':
          description: User need to log in first.
        '404':
          description: Registry not found (when registry is provided by ID).
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        description: Registry to ping.
        required: true
      tags:
        - Products
  '/projects/{project_id}/immutabletagrules/{id}':
    put:
      summary: Update the immutable tag rule or enable or disable the rule
      responses:
        '200':
          description: Update the immutable tag rule successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: >-
            User have no permission to update the immutable tag rule of the
            project.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: Immutable tag rule ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ImmutableRule'
      tags:
        - Products
    delete:
      summary: Delete the immutable tag rule.
      responses:
        '200':
          description: Delete the immutable tag rule successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to delete immutable tags of the project.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: Immutable tag rule ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  /email/ping:
    post:
      description: |
        Test connection and authentication with email server.
      summary: Test connection and authentication with email server.
      responses:
        '200':
          description: Ping email server successfully.
        '400':
          description: Inviald email server settings.
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailServerSetting'
        description: >-
          Email server settings, if some of the settings are not assigned, they
          will be read from system configuration.
      tags:
        - Products
  '/quotas/{id}':
    put:
      description: Update hard limits of the specified quota
      summary: Update the specified quota
      responses:
        '200':
          description: Updated quota hard limits successfully.
        '400':
          description: Illegal format of quota update request.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to the quota.
        '404':
          description: Quota ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          description: Quota ID
          in: path
          name: id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaUpdateReq'
        description: The new hard limits for the quota
        required: true
      tags:
        - Products
        - Quota
    get:
      description: Get the specified quota
      summary: Get the specified quota
      responses:
        '200':
          description: Successfully retrieved the quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quota'
            text/plain:
              schema:
                $ref: '#/components/schemas/Quota'
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to call this API
        '404':
          description: Quota does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          description: Quota ID
          in: path
          name: id
          schema:
            type: integer
      tags:
        - Products
        - Quota
  /health:
    get:
      description: |
        The endpoint returns the health stauts of the system.
      summary: Health check API
      responses:
        '200':
          description: The system health status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverallHealthStatus'
            text/plain:
              schema:
                $ref: '#/components/schemas/OverallHealthStatus'
      tags:
        - Products
  /search:
    get:
      description: >
        The Search endpoint returns information about the projects
        ,repositories  and helm charts offered at public status or related to
        the current logged in user. The response includes the project,
        repository list and charts in a proper display order.
      summary: 'Search for projects, repositories and helm charts'
      responses:
        '200':
          description: An array of search results
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Search'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Search'
                type: array
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          description: Search parameter for project and repository name.
          in: query
          name: q
          schema:
            type: string
      tags:
        - Products
  /users:
    post:
      description: |
        This endpoint is to create a user if the user does not already exist.
      summary: Creates a new user account.
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: User created successfully.
        '400':
          description: Unsatisfied with constraints of the user creation.
        '403':
          description: >-
            User registration can only be used by admin role user when
            self-registration is off.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New created user.
        required: true
      tags:
        - Products
    get:
      description: >
        This endpoint is for user to search registered users, support for
        filtering results with username.Notice, by now this operation is only
        for administrator.
      summary: Get registered users of Harbor.
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: Searched for users of Harbor successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: Username for filtering results.
          in: query
          name: username
          schema:
            type: string
        - required: false
          description: Email for filtering results.
          in: query
          name: email
          schema:
            type: string
        - in: query
          description: 'The page number, default is 1.'
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
  '/projects/{project_id}/metadatas/{meta_name}':
    put:
      description: |
        This endpoint is aimed to update the metadata of a project.
      summary: Update metadata of a project.
      responses:
        '200':
          description: Updated metadata successfully.
        '400':
          description: Invalid request.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to the project.
        '404':
          description: Project or metadata does not exist.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: The ID of project.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - required: true
          description: The name of metadat.
          in: path
          name: meta_name
          schema:
            type: string
      tags:
        - Products
    get:
      description: |
        This endpoint returns specified metadata of a project.
      summary: Get project metadata
      responses:
        '200':
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        '401':
          description: User need to log in first.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Project ID for filtering results.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - required: true
          description: The name of metadat.
          in: path
          name: meta_name
          schema:
            type: string
      tags:
        - Products
    delete:
      description: |
        This endpoint is aimed to delete metadata of a project.
      summary: Delete metadata of a project
      responses:
        '200':
          description: Metadata is deleted successfully.
        '400':
          description: Invalid requst.
        '403':
          description: User need to log in first.
        '404':
          description: Project or metadata does not exist.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: The ID of project.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - required: true
          description: The name of metadat.
          in: path
          name: meta_name
          schema:
            type: string
      tags:
        - Products
  '/registries/{id}':
    put:
      description: |
        This endpoint is for update a given registry.
      summary: Update a given registry.
      responses:
        '200':
          description: Updated registry successfully.
        '400':
          description: The registry is associated with policy which is enabled.
        '401':
          description: User need to log in first.
        '404':
          description: Registry does not exist.
        '409':
          description: Registry name is already used.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: The registry's ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistry'
        description: Updates registry.
        required: true
      tags:
        - Products
    get:
      description: This endpoint is for get specific registry.
      summary: Get registry.
      responses:
        '200':
          description: Get registry successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
            text/plain:
              schema:
                $ref: '#/components/schemas/Registry'
        '401':
          description: User need to log in first.
        '404':
          description: Registry not found
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: The registry ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      description: |
        This endpoint is for to delete specific registry.
      summary: Delete specific registry.
      responses:
        '200':
          description: Registry deleted successfully.
        '400':
          description: Registry's ID is invalid or the registry is used by policies.
        '401':
          description: Only admin has this authority.
        '404':
          description: Registry does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: The registry's ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/projects/{project_id}/scanner':
    put:
      description: >-
        Set one of the system configured scanner registration as the indepndent
        scanner of the specified project.
      summary: Configure scanner for the specified project
      responses:
        '200':
          description: Successfully set the project level scanner
        '400':
          description: Bad project ID
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
      parameters:
        - in: path
          description: The project identifier.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectScanner'
        required: true
      tags:
        - Scanners
    get:
      description: >-
        Get the scanner registration of the specified project. If no scanner
        registration is configured for the specified project, the system default
        scanner registration will be returned.
      summary: Get project level scanner
      responses:
        '200':
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '400':
          description: Bad project ID
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
      parameters:
        - in: path
          description: The project identifier.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
        - Scanners
  /ldap/users/search:
    get:
      description: >
        This endpoint searches the available ldap users based on related
        configuration parameters. Support searched by input ladp configuration,
        load configuration from the system and specific filter.
      summary: Search available ldap users.
      responses:
        '200':
          description: Search ldap users successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LdapUsers'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/LdapUsers'
                type: array
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: Registered user ID
          in: query
          name: username
          schema:
            type: string
      tags:
        - Products
  /replication/policies:
    post:
      description: |
        This endpoint let user create a replication policy
      summary: Create a replication policy
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationPolicy'
        description: The policy model.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint let user list replication policies
      summary: List replication policies
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: Get policy successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReplicationPolicy'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ReplicationPolicy'
                type: array
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - required: false
          description: The replication policy name.
          in: query
          name: name
          schema:
            type: string
        - in: query
          description: The page number.
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
  '/scanners/{registration_id}':
    put:
      description: |
        Updates the specified scanner registration.
      summary: Update a scanner registration
      responses:
        '200':
          description: Updated successfully
        '401':
          description: Unauthorized request
        '403':
          description: 'Request is not allowed, system role required'
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
      parameters:
        - required: true
          description: The scanner registration identifier.
          in: path
          name: registration_id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        description: A scanner registraiton to be updated.
        required: true
      tags:
        - Scanners
    get:
      description: |
        Retruns the details of the specified scanner registration.
      summary: Get a scanner registration details
      responses:
        '200':
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '401':
          description: Unauthorized request
        '403':
          description: 'Request is not allowed, system role required'
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
      parameters:
        - required: true
          description: The scanner registration identifer.
          in: path
          name: registration_id
          schema:
            type: string
      tags:
        - Products
        - Scanners
    delete:
      description: |
        Deletes the specified scanner registration.
      summary: Delete a scanner registration
      responses:
        '200':
          description: Deleted successfully and return the deleted registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '401':
          description: Unauthorized request
        '403':
          description: >-
            Request is not allowed, system role required or registration is
            immutable
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
      parameters:
        - required: true
          description: The scanner registration identifier.
          in: path
          name: registration_id
          schema:
            type: string
      tags:
        - Scanners
    patch:
      description: |
        Set the specified scanner registration as the system default one.
      summary: Set system default scanner registration
      responses:
        '200':
          description: >-
            Successfully set the specified scanner registration as system
            default
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '500':
          description: Internal server error happened
      parameters:
        - required: true
          description: The scanner registration identifier.
          in: path
          name: registration_id
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IsDefault'
        required: true
      tags:
        - Scanners
  '/projects/{project_id}/members/{mid}':
    put:
      description: Update project member relationship
      summary: Update project member
      responses:
        '200':
          description: Project member updated successfully.
        '400':
          description: >-
            Invalid role id, it should be 1,2 or 3, or invalid project id, or
            invalid member id.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: project or project member does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: Member ID.
          required: true
          name: mid
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      tags:
        - Products
    get:
      description: Get the project member information
      summary: Get the project member information
      responses:
        '200':
          description: Project member retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberEntity'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectMemberEntity'
        '400':
          description: 'Illegal format of project member or invalid project id, member id.'
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: Project or projet member does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: The member ID
          required: true
          name: mid
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      summary: Delete project member
      responses:
        '200':
          description: Project member deleted successfully.
        '400':
          description: The project id or project member id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: Member ID.
          required: true
          name: mid
          schema:
            type: integer
            format: int64
      tags:
        - Products
  /scanners:
    post:
      description: |
        Creats a new scanner registration with the given data.
      summary: Create a scanner registration
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: Created successfully
        '400':
          description: Bad registration request
        '401':
          description: Unauthorized request
        '403':
          description: 'Request is not allowed, system role required'
        '500':
          description: Internal server error happened
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        description: A scanner registration to be created.
        required: true
      tags:
        - Scanners
    get:
      description: |
        Returns a list of currently configured scanner registrations.
      summary: List scanner registrations
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          description: A list of scanner registrations.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
                type: array
        '400':
          description: Bad query paramters
        '401':
          description: Unauthorized request
        '403':
          description: 'Request is not allowed, system role required'
        '500':
          description: Internal server error happened
      parameters:
        - in: query
          description: The page number.
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: The size of per page.
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
        - Scanners
  /replication/adapters:
    get:
      description: |
        This endpoint let user list supported adapters.
      summary: List supported adapters.
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
            text/plain:
              schema:
                items:
                  type: string
                type: array
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Unexpected internal errors.
      tags:
        - Products
  /statistics:
    get:
      description: >
        This endpoint is aimed to statistic all of the projects number and
        repositories number relevant to the logined user, also the public
        projects number and repositories number. If the user is admin, he can
        also get total projects number and total repositories number.
      summary: Get projects number and repositories number relevant to the user
      responses:
        '200':
          description: >-
            Get the projects number and repositories number relevant to the user
            successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticMap'
            text/plain:
              schema:
                $ref: '#/components/schemas/StatisticMap'
        '401':
          description: User need to log in first.
        '500':
          description: Unexpected internal errors.
      tags:
        - Products
  '/projects/{project_id}/webhook/events':
    get:
      description: Get supportted event types and notify types.
      summary: Get supported event types and notify types.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedWebhookEventTypes'
            text/plain:
              schema:
                $ref: '#/components/schemas/SupportedWebhookEventTypes'
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to list webhook jobs of the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/projects/{project_id}/immutabletagrules':
    post:
      description: |
        This endpoint add an immutable tag rule to the project
      summary: Add an immutable tag rule to current project
      responses:
        '200':
          description: Add the immutable tag rule successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to get immutable tag rule of the project.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ImmutableRule'
      tags:
        - Products
    get:
      description: |
        This endpoint returns the immutable tag rules of a project
      summary: List all immutable tag rules of current project
      responses:
        '200':
          description: List project immutable tag rules successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImmutableRule'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ImmutableRule'
                type: array
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to list immutable tag rules of the project.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/replication/policies/{id}':
    put:
      description: |
        This endpoint let user update policy.
      summary: Update the replication policy
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - in: path
          description: policy ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationPolicy'
        description: The replication policy model.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint let user get replication policy by specific ID.
      summary: Get replication policy.
      responses:
        '200':
          description: Get the replication policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationPolicy'
            text/plain:
              schema:
                $ref: '#/components/schemas/ReplicationPolicy'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - in: path
          description: policy ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      description: |
        Delete the replication policy specified by ID.
      summary: Delete the replication policy specified by ID.
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - in: path
          description: Replication policy ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  /registries:
    post:
      description: |
        This endpoint is for user to create a new registry.
      summary: Create a new registry.
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: Registry created successfully.
        '400':
          description: Unsatisfied with constraints of the registry creation.
        '401':
          description: User need to log in first.
        '409':
          description: Registry name already exists.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        description: New created registry.
        required: true
      tags:
        - Products
    get:
      description: |
        List registries according to the query.
      summary: List registries.
      responses:
        '200':
          description: List registries successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
        '401':
          description: User need to log in first.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: 'Deprecated, use `q` instead.'
          in: query
          name: name
          schema:
            type: string
        - $ref: '#/components/parameters/query'
      tags:
        - Products
  '/registries/{id}/info':
    get:
      description: Get the info of one specific registry.
      summary: Get registry info.
      responses:
        '200':
          description: Get registry successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryInfo'
            text/plain:
              schema:
                $ref: '#/components/schemas/RegistryInfo'
        '401':
          description: User need to log in first.
        '404':
          description: Registry not found
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: The registry ID.
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/projects/{project_id}/webhook/policies/test':
    post:
      description: |
        This endpoint tests webhook connection of a project.
      summary: Test project webhook connection
      responses:
        '200':
          description: Test webhook connection successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to get webhook policy of the project.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        description: Only property "targets" needed.
        required: true
      tags:
        - Products
  '/projects/{project_id}/members':
    post:
      description: >-
        Create project member relationship, the member can be one of the
        user_member and group_member,  The user_member need to specify user_id
        or username. If the user already exist in harbor DB, specify the
        user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the
        user. The group_member need to specify id or ldap_group_dn. If the group
        already exist in harbor DB. specify the user group's id,  If does not
        exist, it will SearchAndOnBoard the group.
      summary: Create project member
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: Project member created successfully.
        '400':
          description: >-
            Illegal format of project member or project id is invalid, or LDAP
            DN is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '409':
          description: >-
            A user group with same group name already exist or an LDAP user
            group with same DN already exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMember'
      tags:
        - Products
    get:
      description: Get all project member information
      summary: Get all project member information
      responses:
        '200':
          description: Get project members successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProjectMemberEntity'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/ProjectMemberEntity'
                type: array
        '400':
          description: The project id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: Project ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: query
          description: The entity name to search.
          name: entityname
          schema:
            type: string
      tags:
        - Products
  /usergroups:
    post:
      description: Create user group information
      summary: Create user group
      responses:
        '201':
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
          description: User group created successfully.
        '400':
          description: Invalid LDAP group DN.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '409':
          description: >-
            A user group with same group name already exist, or an LDAP user
            group with same DN already exist.
        '500':
          description: Unexpected internal errors.
      requestBody:
        $ref: '#/components/requestBodies/UserGroup'
      tags:
        - Products
    get:
      description: Get all user groups information
      summary: Get all user groups information
      responses:
        '200':
          description: Get user group successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/UserGroup'
                type: array
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '500':
          description: Unexpected internal errors.
      tags:
        - Products
  '/labels/{id}':
    put:
      description: |
        This endpoint let user update label properties.
      summary: Update the label properties.
      responses:
        '200':
          description: Update successfully.
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '409':
          description: The label with the same name already exists.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Label ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The updated label json object.
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint let user get the label by specific ID.
      summary: Get the label specified by ID.
      responses:
        '200':
          description: Get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
            text/plain:
              schema:
                $ref: '#/components/schemas/Label'
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Label ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      description: |
        Delete the label specified by ID.
      summary: Delete the label specified by ID.
      responses:
        '200':
          description: Delete successfully.
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Label ID
          required: true
          name: id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  /quotas:
    get:
      description: List quotas
      summary: List quotas
      responses:
        '200':
          headers:
            X-Total-Count:
              description: The total count of access logs
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          description: Successfully retrieved the quotas.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Quota'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Quota'
                type: array
        '401':
          description: User is not authenticated.
        '403':
          description: User does not have permission to call this API.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: false
          description: The reference type of quota.
          in: query
          name: reference
          schema:
            type: string
        - required: false
          description: The reference id of quota.
          in: query
          name: reference_id
          schema:
            type: string
        - required: false
          description: >
            Sort method, valid values include:

            'hard.resource_name', '-hard.resource_name', 'used.resource_name',
            '-used.resource_name'.

            Here '-' stands for descending order, resource_name should be the
            real resource name of the quota.
          in: query
          name: sort
          schema:
            type: string
        - in: query
          description: 'The page number, default is 1.'
          required: false
          name: page
          schema:
            type: integer
            format: int32
        - in: query
          description: 'The size of per page, default is 10, maximum is 100.'
          required: false
          name: page_size
          schema:
            type: integer
            format: int32
      tags:
        - Products
  '/users/{user_id}/sysadmin':
    put:
      description: |
        This endpoint let a registered user change to be an administrator
        of Harbor.
      summary: Update a registered user to change to be an administrator of Harbor.
      responses:
        '200':
          description: Updated user's admin role successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Registered user ID
          required: true
          name: user_id
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SysAdminFlag'
        description: Toggle a user to admin or not.
        required: true
      tags:
        - Products
  /configurations:
    put:
      description: >
        This endpoint is for modifying system configurations that only provides
        for admin user.
      summary: Modify system configurations.
      responses:
        '200':
          description: Modify system configurations successfully.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
        description: >-
          The configuration map can contain a subset of the attributes of the
          schema, which are to be updated.
        required: true
      tags:
        - Products
    get:
      description: >
        This endpoint is for retrieving system configurations that only provides
        for admin user.
      summary: Get system configurations.
      responses:
        '200':
          description: Get system configurations successfully. The response body is a map.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
        '401':
          description: User need to log in first.ß
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
      tags:
        - Products
  /system/oidc/ping:
    post:
      description: >-
        Test the OIDC endpoint, the setting of the endpoint is provided in the
        request.  This API can only be called by system admin.
      summary: Test the OIDC endpoint.
      responses:
        '200':
          description: Ping succeeded.  The OIDC endpoint is valid.
        '400':
          description: The ping failed
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to call this API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The URL of OIDC endpoint to be tested.
                verify_cert:
                  type: boolean
                  description: Whether the certificate should be verified
        description: Request body for OIDC endpoint to be tested.
        required: true
      tags:
        - Products
        - System
  /scanners/ping:
    post:
      description: |
        Pings scanner adapter to test endpoint URL and authorization settings.
      summary: Tests scanner registration settings
      responses:
        '200':
          description: Test succeeded
        '400':
          description: Bad registration settings
        '401':
          description: Unauthorized request
        '403':
          description: 'Request is not allowed, system role required'
        '500':
          description: Internal server error happened
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationSettings'
        description: A scanner registration settings to be tested.
        required: true
      tags:
        - Products
        - Scanners
  /system/CVEAllowlist:
    put:
      description: >-
        This API overwrites the system level allowlist of CVE with the list in
        request body.  Only system Admin has permission to call this API.
      summary: Update the system level allowlist of CVE.
      responses:
        '200':
          description: Successfully updated the CVE allowlist.
        '401':
          description: User is not authenticated.
        '403':
          description: User does not have permission to call this API.
        '500':
          description: Unexpected internal errors.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CVEAllowlist'
        description: The allowlist with new content
      tags:
        - Products
        - System
    get:
      description: >-
        Get the system level allowlist of CVE.  This API can be called by all
        authenticated users.
      summary: Get the system level allowlist of CVE.
      responses:
        '200':
          description: Successfully retrieved the CVE allowlist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVEAllowlist'
            text/plain:
              schema:
                $ref: '#/components/schemas/CVEAllowlist'
        '401':
          description: User is not authenticated.
        '500':
          description: Unexpected internal errors.
      tags:
        - Products
        - System
  '/usergroups/{group_id}':
    put:
      description: Update user group information
      summary: Update group information
      responses:
        '200':
          description: User group updated successfully.
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: Only admin has this authority.
        '404':
          description: User group does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Group ID
          required: true
          name: group_id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UserGroup'
      tags:
        - Products
    get:
      description: Get user group information
      summary: Get user group information
      responses:
        '200':
          description: User group get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
            text/plain:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '404':
          description: User group does not exist.
        '500':
          description: Unexpected internal errors.
      parameters:
        - in: path
          description: Group ID
          required: true
          name: group_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      description: Delete user group
      summary: Delete user group
      responses:
        '200':
          description: User group deleted successfully.
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: Only admin has this authority.
        '500':
          description: Unexpected internal errors.
      parameters:
        - required: true
          name: group_id
          in: path
          schema:
            type: integer
      tags:
        - Products
  '/projects/{project_id}/webhook/policies/{policy_id}':
    put:
      description: |
        This endpoint is aimed to update the webhook policy of a project.
      summary: Update webhook policy of a project.
      responses:
        '200':
          description: Update webhook policy successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to update webhook policy of the project.
        '404':
          description: Webhook policy ID does not exist.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: The id of webhook policy.
          required: true
          name: policy_id
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        description: >-
          All properties needed except "id", "project_id", "creation_time",
          "update_time".
        required: true
      tags:
        - Products
    get:
      description: |
        This endpoint returns specified webhook policy of a project.
      summary: Get project webhook policy
      responses:
        '200':
          description: Get webhook policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookPolicy'
            text/plain:
              schema:
                $ref: '#/components/schemas/WebhookPolicy'
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to get webhook policy of the project.
        '404':
          description: Webhook policy ID does not exist.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: The id of webhook policy.
          required: true
          name: policy_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
    delete:
      description: |
        This endpoint is aimed to delete webhookpolicy of a project.
      summary: Delete webhook policy of a project
      responses:
        '200':
          description: Delete webhook policy successfully.
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to delete webhook policy of the project.
        '404':
          description: Webhook policy ID does not exist.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
        - in: path
          description: The id of webhook policy.
          required: true
          name: policy_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
  '/scanners/{registration_id}/metadata':
    get:
      description: >
        Get the metadata of the specified scanner registration, including the
        capabilities and customzied properties.
      summary: Get the metadata of the specified scanner registration
      responses:
        '200':
          description: The metadata of the specified scanner adapter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerAdapterMetadata'
            text/plain:
              schema:
                $ref: '#/components/schemas/ScannerAdapterMetadata'
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '500':
          description: Internal server error happened
      parameters:
        - required: true
          description: The scanner registration identifier.
          in: path
          name: registration_id
          schema:
            type: string
      tags:
        - Products
        - Scanners
  '/projects/{project_id}/webhook/lasttrigger':
    get:
      description: >
        This endpoint returns last trigger information of project webhook
        policy.
      summary: Get project webhook policy last trigger info
      responses:
        '200':
          description: Test webhook connection successfully.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookLastTrigger'
                type: array
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookLastTrigger'
                type: array
        '400':
          description: Illegal format of provided ID value.
        '401':
          description: User need to log in first.
        '403':
          description: User have no permission to get webhook policy of the project.
        '500':
          description: Internal server errors.
      parameters:
        - in: path
          description: Relevant project ID.
          required: true
          name: project_id
          schema:
            type: integer
            format: int64
      tags:
        - Products
security:
  - basicAuth: []
servers:
  - url: 'http://localhost/api/v2.0'
  - url: 'https://localhost/api/v2.0'
components:
  parameters:
    query:
      description: >-
        Query string to query resources. Supported query patterns are "exact
        match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union
        releationship(k={v1 v2 v3})" and "list with intersetion
        relationship(k=(v1 v2 v3))". The value of range and list can be
        string(enclosed by " or '), integer or time(in format "2020-04-09
        02:36:00"). All of these query patterns should be put in the query
        string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
      required: false
      name: q
      in: query
      schema:
        type: string
  responses:
    NotFound:
      description: Not Found
    OK:
      description: Success
    Unauthorized:
      description: Unauthorized
    Created:
      headers:
        Location:
          description: The URL of the created resource
          schema:
            type: string
      description: Created
    Forbidden:
      description: Forbidden
    PreconditionFailed:
      description: Precondition Failed
    InternalServerError:
      description: Internal Server Error
    BadRequest:
      description: Bad Request
    UnsupportedMediaType:
      description: >-
        The Media Type of the request is not supported, it has to be
        "application/json"
    Conflict:
      description: Conflict
  requestBodies:
    UserGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGroup'
    ImmutableRule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImmutableRule'
      required: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    QuotaRefObject:
      additionalProperties: {}
      type: object
    ImmutableSelector:
      type: object
      properties:
        decoration:
          type: string
        pattern:
          type: string
        kind:
          type: string
        extras:
          type: string
    ScannerAdapterMetadata:
      type: object
      description: The metadata info of the scanner adapter
      properties:
        name:
          $ref: '#/components/schemas/Scanner'
        capabilities:
          items:
            $ref: '#/components/schemas/ScannerCapability'
          type: array
        properties:
          additionalProperties:
            type: string
          type: object
          example:
            harbor.scanner-adapter/registry-authorization-type: Bearer
    RegistryInfo:
      type: object
      description: >-
        The registry info contains the base info and capability declarations of
        the registry
      properties:
        type:
          type: string
          description: The registry type
        supported_resource_filters:
          items:
            $ref: '#/components/schemas/FilterStyle'
          type: array
          description: The filters that the registry supports
        supported_triggers:
          items:
            type: string
          type: array
          description: The triggers that the registry supports
        description:
          type: string
          description: The description
    ProjectMemberEntity:
      type: object
      properties:
        entity_id:
          type: integer
          description: >-
            the id of entity, if the member is a user, it is user_id in user
            table. if the member is a user group, it is the user group's ID in
            user_group table.
        role_name:
          type: string
          description: the name of the role
        entity_name:
          type: string
          description: the name of the group member.
        entity_type:
          type: string
          description: 'the entity''s type, u for user entity, g for group entity.'
        project_id:
          type: integer
          description: the project id
        id:
          type: integer
          description: the project member id
        role_id:
          type: integer
          description: the role id
    SupportedWebhookEventTypes:
      type: object
      description: Supportted webhook event types and notify types.
      properties:
        event_type:
          items:
            $ref: '#/components/schemas/EventType'
          type: array
        notify_type:
          items:
            $ref: '#/components/schemas/NotifyType'
          type: array
    PutRegistry:
      type: object
      properties:
        access_key:
          type: string
          description: The registry access key.
        credential_type:
          type: string
          description: 'Credential type of the registry, e.g. ''basic''.'
        name:
          type: string
          description: The registry name.
        access_secret:
          type: string
          description: The registry access secret.
        url:
          type: string
          description: The registry address URL string.
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
        description:
          type: string
          description: Description of the registry.
    LdapImportUsers:
      type: object
      properties:
        ldap_uid_list:
          items:
            type: string
          type: array
          description: selected uid list
    Role:
      type: object
      properties:
        role_mask:
          type: string
        role_name:
          type: string
          description: Name the the role.
        role_code:
          type: string
          description: Description of permissions for the role.
        role_id:
          type: integer
          description: ID in table.
          format: int32
    FilterStyle:
      type: object
      description: The style of the resource filter
      properties:
        type:
          type: string
          description: The filter type
        style:
          type: string
          description: The filter style
        values:
          items:
            type: string
          type: array
          description: The filter values
    UserProfile:
      type: object
      properties:
        comment:
          type: string
          description: The new comment.
        email:
          type: string
          description: The new email.
        realname:
          type: string
          description: The new realname.
    UnauthorizedChartAPIError:
      type: object
      description: Unauthorized
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    BadRequestFormatedError:
      type: object
      description: Bad request
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    RoleParam:
      type: object
      properties:
        username:
          type: string
          description: Username relevant to a project role member.
        roles:
          items:
            type: integer
            format: int32
          type: array
          description: Role ID for updating project role member.
    User:
      type: object
      properties:
        username:
          type: string
        comment:
          type: string
        update_time:
          type: string
        password:
          type: string
        user_id:
          type: integer
          description: The ID of the user.
          format: int
        realname:
          type: string
        deleted:
          type: boolean
        creation_time:
          type: string
        admin_role_in_auth:
          type: boolean
          description: >-
            indicate the admin privilege is grant by authenticator (LDAP), is
            always false unless it is the current login user
        role_id:
          type: integer
          format: int
        sysadmin_flag:
          type: boolean
        role_name:
          type: string
        reset_uuid:
          type: string
        Salt:
          type: string
        email:
          type: string
    Registry:
      type: object
      properties:
        status:
          type: string
          description: Health status of the registry.
        credential:
          $ref: '#/components/schemas/RegistryCredential'
        update_time:
          type: string
          description: The update time of the policy.
        name:
          type: string
          description: The registry name.
        url:
          type: string
          description: The registry URL string.
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
        creation_time:
          type: string
          description: The create time of the policy.
        type:
          type: string
          description: 'Type of the registry, e.g. ''harbor''.'
        id:
          type: integer
          description: The registry ID.
          format: int64
        description:
          type: string
          description: Description of the registry.
    Search:
      type: object
      properties:
        project:
          items:
            $ref: '#/components/schemas/Project'
          type: array
          description: Search results of the projects that matched the filter keywords.
        chart:
          items:
            $ref: '#/components/schemas/SearchResult'
          type: array
          description: Search results of the charts that macthed the filter keywords.
        repository:
          items:
            $ref: '#/components/schemas/SearchRepository'
          type: array
          description: Search results of the repositories that matched the filter keywords.
    ScannerCapability:
      type: object
      properties:
        produces_mime_types:
          items:
            type: string
            example: >-
              application/vnd.scanner.adapter.vuln.report.harbor+json;
              version=1.0
          type: array
        consumes_mime_types:
          items:
            type: string
            example: application/vnd.docker.distribution.manifest.v2+json
          type: array
    ChartAPIError:
      required:
        - error
      type: object
      description: The error object returned by chart repository API
      properties:
        error:
          type: string
          description: The error message returned by the chart API
    RegistryCredential:
      type: object
      properties:
        access_key:
          type: string
          description: 'Access key, e.g. user name when credential type is ''basic''.'
        access_secret:
          type: string
          description: 'Access secret, e.g. password when credential type is ''basic''.'
        type:
          type: string
          description: 'Credential type, such as ''basic'', ''oauth''.'
    QuotaSwitcher:
      type: object
      properties:
        enabled:
          type: boolean
          description: The quota is enable or disable
    ScannerRegistrationSettings:
      type: object
      properties:
        url:
          format: url
          type: string
          example: 'http://harbor-scanner-clair:8080'
          description: A base URL of the scanner adapter.
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        name:
          type: string
          description: The name of this registration
          example: Clair
        auth:
          default: ''
          type: string
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
    Project:
      type: object
      properties:
        update_time:
          type: string
          description: The update time of the project.
        owner_name:
          type: string
          description: The owner name of the project.
        name:
          type: string
          description: The name of the project.
        deleted:
          type: boolean
          description: A deletion mark of the project.
        owner_id:
          type: integer
          description: The owner ID of the project always means the creator of the project.
          format: int32
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        chart_count:
          type: integer
          description: The total number of charts under this project.
        creation_time:
          type: string
          description: The creation time of the project.
        togglable:
          type: boolean
          description: >-
            Correspond to the UI about whether the project's publicity is
            updatable (for UI)
        current_user_role_id:
          type: integer
          description: >-
            The role ID with highest permission of the current user who
            triggered the API (for UI).  This attribute is deprecated and will
            be removed in future versions.
        current_user_role_ids:
          items:
            type: integer
            format: int32
          type: array
          description: >-
            The list of role ID of the current user who triggered the API (for
            UI)
        cve_allowlist:
          $ref: '#/components/schemas/CVEAllowlist'
        project_id:
          type: integer
          description: Project ID
          format: int32
        registry_id:
          type: integer
          description: >-
            The ID of referenced registry when the project is a proxy cache
            project.
          format: int64
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
    NotifyType:
      type: string
      description: Webhook supportted notify type.
      example: http
    ProjectMember:
      type: object
      properties:
        role_id:
          type: integer
          description: >-
            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for
            maintainer
        member_group:
          $ref: '#/components/schemas/UserGroup'
        member_user:
          $ref: '#/components/schemas/UserEntity'
    ChartVersion:
      allOf:
        - $ref: '#/components/schemas/ChartMetadata'
        - type: object
          properties:
            removed:
              type: boolean
              description: A flag to indicate if the chart entry is removed
            digest:
              type: string
              description: The digest value of the chart entry
            urls:
              items:
                type: string
              type: array
              description: The urls of the chart entry
            created:
              type: string
              description: The created time of the chart entry
      type: object
      properties:
        labels:
          $ref: '#/components/schemas/Labels'
      description: A specified chart entry
    UserSearch:
      type: object
      properties:
        username:
          type: string
        user_id:
          type: integer
          description: The ID of the user.
          format: int
    Scanner:
      type: object
      properties:
        version:
          type: string
          description: Version of the scanner adapter
          example: 1.0.1
        vendor:
          type: string
          description: Name of the scanner provider
          example: CentOS
        name:
          type: string
          description: Name of the scanner
          example: Clair
    NotFoundChartAPIError:
      type: object
      description: Not found
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    Labels:
      items:
        $ref: '#/components/schemas/Label'
      type: array
      description: A list of label
    LdapUsers:
      type: object
      properties:
        ldap_email:
          type: string
          description: >-
            system will try to guess the user email address form "mail" or
            "email" attribute.
        ldap_realname:
          type: string
          description: >-
            system will try to guess the user realname form "uid" or "cn"
            attribute.
        ldap_username:
          type: string
          description: search ldap user name based on ldapconf.
    UserEntity:
      type: object
      properties:
        username:
          type: string
          description: The name of the user.
        user_id:
          type: integer
          description: The ID of the user.
    ProjectMetadata:
      type: object
      properties:
        enable_content_trust:
          type: string
          description: >-
            Whether content trust is enabled or not. If it is enabled, user
            can't pull unsigned images from this project. The valid values are
            "true", "false".
        auto_scan:
          type: string
          description: >-
            Whether scan images automatically when pushing. The valid values are
            "true", "false".
        severity:
          type: string
          description: >-
            If the vulnerability is high than severity defined here, the images
            can't be pulled. The valid values are "none", "low", "medium",
            "high", "critical".
        public:
          type: string
          description: >-
            The public status of the project. The valid values are "true",
            "false".
        reuse_sys_cve_allowlist:
          type: string
          description: >-
            Whether this project reuse the system level CVE allowlist as the
            allowlist of its own.  The valid values are "true", "false". If it
            is set to "true" the actual allowlist associate with this project,
            if any, will be ignored.
        prevent_vul:
          type: string
          description: >-
            Whether prevent the vulnerable images from running. The valid values
            are "true", "false".
    SysAdminFlag:
      type: object
      properties:
        sysadmin_flag:
          type: boolean
          description: 'true-admin, false-not admin.'
    LdapFailedImportUsers:
      type: object
      properties:
        ldap_uid:
          type: string
          description: the uid can't add to system.
        error:
          type: string
          description: fail reason.
    ResourceList:
      additionalProperties:
        type: integer
        format: int64
      type: object
    ForbiddenChartAPIError:
      type: object
      description: Operation is forbidden or quota exceeded
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    ReplicationTrigger:
      type: object
      properties:
        type:
          type: string
          description: >-
            The replication policy trigger type. The valid values are manual,
            event_based and scheduled.
        trigger_settings:
          $ref: '#/components/schemas/TriggerSettings'
    WebhookLastTrigger:
      type: object
      description: The webhook policy and last trigger time group by event type.
      properties:
        enabled:
          type: boolean
          description: Whether or not the webhook policy enabled.
        creation_time:
          type: string
          description: The creation time of webhook policy.
        event_type:
          type: string
          description: The webhook event type.
        last_trigger_time:
          type: string
          description: The last trigger time of webhook policy.
    InternalChartAPIError:
      type: object
      description: Internal server error occurred
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    PingRegistry:
      type: object
      properties:
        access_key:
          type: string
          description: The registry access key.
        credential_type:
          type: string
          description: 'Credential type of the registry, e.g. ''basic''.'
        access_secret:
          type: string
          description: The registry access secret.
        url:
          type: string
          description: The registry address URL string.
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
        type:
          type: string
          description: 'Type of the registry, e.g. ''harbor''.'
        id:
          type: integer
          description: The ID of the registry
    Namespace:
      type: object
      description: The namespace of registry
      properties:
        name:
          type: string
          description: The name of namespace
        metadata:
          type: object
          description: The metadata of namespace
    WebhookJob:
      type: object
      description: The webhook job.
      properties:
        status:
          type: string
          description: The webhook job status.
        update_time:
          type: string
          description: The webhook job update time.
        event_type:
          type: string
          description: The webhook job event type.
        creation_time:
          type: string
          description: The webhook job creation time.
        job_detail:
          type: string
          description: The webhook job notify detailed data.
        id:
          type: integer
          description: The webhook job ID.
          format: int64
        notify_type:
          type: string
          description: The webhook job notify type.
        policy_id:
          type: integer
          description: The webhook policy ID.
          format: int64
    Label:
      type: object
      properties:
        update_time:
          type: string
          description: The update time of label.
        description:
          type: string
          description: The description of label.
        color:
          type: string
          description: The color of label.
        creation_time:
          type: string
          description: The creation time of label.
        deleted:
          type: boolean
          description: The label is deleted or not.
        scope:
          type: string
          description: 'The scope of label, g for global labels and p for project labels.'
        project_id:
          type: integer
          description: The project ID if the label is a project label.
        id:
          type: integer
          description: The ID of label.
        name:
          type: string
          description: The name of label.
    SearchRepository:
      type: object
      properties:
        repository_name:
          type: string
          description: The name of the repository
        project_name:
          type: string
          description: The name of the project that the repository belongs to
        artifact_count:
          type: integer
          description: The count of artifacts in the repository
        project_public:
          type: boolean
          description: >-
            The flag to indicate the publicity of the project that the
            repository belongs to (1 is public, 0 is not)
        project_id:
          type: integer
          description: The ID of the project that the repository belongs to
        pull_count:
          type: integer
          description: The count how many times the repository is pulled
    CVEAllowlist:
      type: object
      description: The CVE Allowlist for system or project
      properties:
        items:
          items:
            $ref: '#/components/schemas/CVEAllowlistItem'
          type: array
        project_id:
          type: integer
          description: >-
            ID of the project which the allowlist belongs to.  For system level
            allowlist this attribute is zero.
        id:
          type: integer
          description: ID of the allowlist
        expires_at:
          type: integer
          description: >-
            the time for expiration of the allowlist, in the form of seconds
            since epoch.  This is an optional attribute, if it's not set the CVE
            allowlist does not expire.
    StringConfigItem:
      type: object
      properties:
        editable:
          type: boolean
          description: The configure item can be updated or not
        value:
          type: string
          description: The string value of current config item
    InsufficientStorageChartAPIError:
      type: object
      description: Insufficient storage
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    ImmutableRule:
      type: object
      properties:
        priority:
          type: integer
        scope_selectors:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ImmutableSelector'
            type: array
          type: object
        disabled:
          type: boolean
        params:
          additionalProperties:
            type: object
          type: object
        template:
          type: string
        action:
          type: string
        tag_selectors:
          items:
            $ref: '#/components/schemas/ImmutableSelector'
          type: array
        id:
          type: integer
    BoolConfigItem:
      type: object
      properties:
        editable:
          type: boolean
          description: The configure item can be updated or not
        value:
          type: boolean
          description: The boolean value of current config item
    TriggerSettings:
      type: object
      properties:
        cron:
          type: string
          description: The cron string for scheduled trigger
    Permission:
      type: object
      description: The permission
      properties:
        action:
          type: string
          description: The permission action
        resource:
          type: string
          description: The permission resoruce
    SearchResult:
      type: object
      description: The chart search result item
      properties:
        score:
          type: integer
          description: The matched level
        name:
          type: string
          description: The chart name with repo name
        chart:
          $ref: '#/components/schemas/ChartVersion'
    Quota:
      type: object
      description: The quota object
      properties:
        update_time:
          type: string
          description: the update time of the quota
        used:
          $ref: '#/components/schemas/ResourceList'
        ref:
          $ref: '#/components/schemas/QuotaRefObject'
        hard:
          $ref: '#/components/schemas/ResourceList'
        creation_time:
          type: string
          description: the creation time of the quota
        id:
          type: integer
          description: ID of the quota
    EmailServerSetting:
      type: object
      properties:
        email_ssl:
          type: boolean
          description: Use ssl/tls or not.
        email_password:
          type: string
          description: The password of email server.
        email_identity:
          type: string
          description: The dentity of email server.
        email_port:
          type: integer
          description: The port of email server.
        email_username:
          type: string
          description: The username of email server.
        email_host:
          type: string
          description: The host of email server.
    ProjectScanner:
      type: object
      properties:
        uuid:
          type: string
          description: The identifier of the scanner registration
    Password:
      type: object
      properties:
        new_password:
          type: string
          description: New password for marking as to be updated.
        old_password:
          type: string
          description: The user's existing password.
    OverallHealthStatus:
      type: object
      description: The system health status
      properties:
        status:
          type: string
          description: >-
            The overall health status. It is "healthy" only when all the
            components' status are "healthy"
        components:
          items:
            $ref: '#/components/schemas/ComponentHealthStatus'
          type: array
    CVEAllowlistItem:
      type: object
      description: The item in CVE allowlist
      properties:
        cve_id:
          type: string
          description: 'The ID of the CVE, such as "CVE-2019-10164"'
    RoleRequest:
      type: object
      properties:
        role_id:
          type: integer
          description: >-
            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for
            maintainer
    ReplicationPolicy:
      type: object
      properties:
        update_time:
          type: string
          description: The update time of the policy.
        description:
          type: string
          description: The description of the policy.
        enabled:
          type: boolean
          description: Whether the policy is enabled or not.
        filters:
          items:
            $ref: '#/components/schemas/ReplicationFilter'
          type: array
          description: The replication policy filter array.
        dest_registry:
          $ref: '#/components/schemas/Registry'
        creation_time:
          type: string
          description: The create time of the policy.
        src_registry:
          $ref: '#/components/schemas/Registry'
        dest_namespace:
          type: string
          description: The destination namespace.
        trigger:
          $ref: '#/components/schemas/ReplicationTrigger'
        deletion:
          type: boolean
          description: Whether to replicate the deletion operation.
        override:
          type: boolean
          description: Whether to override the resources on the destination registry.
        id:
          type: integer
          description: The policy ID.
          format: int64
        name:
          type: string
          description: The policy name.
    ComponentOverviewEntry:
      type: object
      properties:
        count:
          type: integer
          description: number of the components with certain severity.
        severity:
          type: integer
          description: '1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High'
    QuotaUpdateReq:
      type: object
      properties:
        hard:
          $ref: '#/components/schemas/ResourceList'
    WebhookPolicy:
      type: object
      description: The webhook policy object
      properties:
        update_time:
          type: string
          description: The update time of the webhook policy.
        description:
          type: string
          description: The description of webhook policy.
        creator:
          type: string
          description: The creator of the webhook policy.
        creation_time:
          type: string
          description: The create time of the webhook policy.
        enabled:
          type: boolean
          description: Whether the webhook policy is enabled or not.
        targets:
          items:
            $ref: '#/components/schemas/WebhookTargetObject'
          type: array
        event_types:
          items:
            type: string
          type: array
        project_id:
          type: integer
          description: The project ID of webhook policy.
        id:
          type: integer
          description: The webhook policy ID.
          format: int64
        name:
          type: string
          description: The name of webhook policy.
    ConfigurationsResponse:
      type: object
      properties:
        oidc_verify_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        email_identity:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_search_filter:
          $ref: '#/components/schemas/StringConfigItem'
        auth_mode:
          $ref: '#/components/schemas/StringConfigItem'
        self_registration:
          $ref: '#/components/schemas/BoolConfigItem'
        oidc_scope:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        storage_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        scan_all_policy:
          type: object
          properties:
            type:
              type: string
              description: >-
                The type of scan all policy, currently the valid values are
                "none" and "daily"
            parameter:
              type: object
              properties:
                daily_time:
                  type: integer
                  description: >-
                    The offset in seconds of UTC 0 o'clock, only valid when the
                    policy type is "daily"
              description: >-
                The parameters of the policy, the values are dependant on the
                type of the policy.
        verify_remote_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        ldap_timeout:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_filter:
          $ref: '#/components/schemas/StringConfigItem'
        read_only:
          $ref: '#/components/schemas/BoolConfigItem'
        quota_per_project_enable:
          $ref: '#/components/schemas/BoolConfigItem'
        ldap_url:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_name:
          $ref: '#/components/schemas/StringConfigItem'
        project_creation_restriction:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_uid:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_client_id:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_attribute_name:
          $ref: '#/components/schemas/StringConfigItem'
        email_insecure:
          $ref: '#/components/schemas/BoolConfigItem'
        ldap_group_admin_dn:
          $ref: '#/components/schemas/StringConfigItem'
        email_username:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_endpoint:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_scope:
          type: integer
          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
        count_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        token_expiration:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_group_search_scope:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_ssl:
          $ref: '#/components/schemas/BoolConfigItem'
        email_port:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_host:
          $ref: '#/components/schemas/StringConfigItem'
        email_from:
          $ref: '#/components/schemas/StringConfigItem'
    UserGroup:
      type: object
      properties:
        group_name:
          type: string
          description: The name of the user group
        ldap_group_dn:
          type: string
          description: The DN of the LDAP group if group type is 1 (LDAP group).
        group_type:
          type: integer
          description: 'The group type, 1 for LDAP group, 2 for HTTP group.'
        id:
          type: integer
          description: The ID of the user group
    IntegerConfigItem:
      type: object
      properties:
        editable:
          type: boolean
          description: The configure item can be updated or not
        value:
          type: integer
          description: The integer value of current config item
    ProjectReq:
      type: object
      properties:
        project_name:
          type: string
          description: The name of the project.
        cve_allowlist:
          $ref: '#/components/schemas/CVEAllowlist'
        count_limit:
          type: integer
          description: The count quota of the project.
          format: int64
        registry_id:
          type: integer
          description: The ID of referenced registry when creating the proxy cache project
          format: int64
        storage_limit:
          type: integer
          description: The storage quota of the project.
          format: int64
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
    IsDefault:
      type: object
      properties:
        is_default:
          type: boolean
          description: A flag indicating whether a scanner registration is default.
    Configurations:
      type: object
      properties:
        oidc_verify_cert:
          type: boolean
          description: >-
            Whether verify your OIDC server certificate, disable it if your OIDC
            server is hosted via self-hosted certificate.
        email_identity:
          type: string
          description: By default it's empty so the email_username is picked.
        ldap_group_search_filter:
          type: string
          description: The filter to search the ldap group.
        auth_mode:
          type: string
          description: 'The auth mode of current system, such as "db_auth", "ldap_auth"'
        self_registration:
          type: boolean
          description: >-
            Whether the Harbor instance supports self-registration.  If it's set
            to false, admin need to add user to the instance.
        oidc_scope:
          type: string
          description: >-
            The scope sent to OIDC server during authentication, should be
            separated by comma. It has to contain “openid”, and
            “offline_access”. If you are using google, please remove
            “offline_access” from this field.
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        storage_per_project:
          type: string
          description: The default storage quota for the new created projects.
        scan_all_policy:
          type: object
          properties:
            type:
              type: string
              description: >-
                The type of scan all policy, currently the valid values are
                "none" and "daily"
            parameter:
              type: object
              properties:
                daily_time:
                  type: integer
                  description: >-
                    The offset in seconds of UTC 0 o'clock, only valid when the
                    policy type is "daily"
              description: >-
                The parameters of the policy, the values are dependant on the
                type of the policy.
        verify_remote_cert:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access a remote Harbor instance for replication.
        ldap_timeout:
          type: integer
          description: timeout in seconds for connection to LDAP server.
        ldap_base_dn:
          type: string
          description: The Base DN for LDAP binding.
        ldap_filter:
          type: string
          description: The filter for LDAP binding.
        read_only:
          type: boolean
          description: '''docker push'' is prohibited by Harbor if you set it to true.   '
        quota_per_project_enable:
          type: boolean
          description: This attribute indicates whether quota per project enabled in harbor
        ldap_url:
          type: string
          description: The URL of LDAP server.
        oidc_name:
          type: string
          description: The name of the OIDC provider.
        project_creation_restriction:
          type: string
          description: >-
            This attribute restricts what users have the permission to create
            project.  It can be "everyone" or "adminonly".
        ldap_uid:
          type: string
          description: >-
            The attribute which is used as identity for the LDAP binding, such
            as "CN" or "SAMAccountname"
        oidc_client_id:
          type: string
          description: The client id of the OIDC.
        ldap_group_base_dn:
          type: string
          description: The base DN to search LDAP group.
        ldap_group_attribute_name:
          type: string
          description: >-
            The attribute which is used as identity of the LDAP group, default
            is cn.
        email_insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the email server.
        ldap_group_admin_dn:
          type: string
          description: >-
            Specify the ldap group which have the same privilege with Harbor
            admin.
        email_username:
          type: string
          description: The username for authenticate against SMTP server.
        oidc_endpoint:
          type: string
          description: 'The URL of an OIDC-complaint server, must start with ''https://''.'
        oidc_client_secret:
          type: string
          description: The client secret of the OIDC.
        ldap_scope:
          type: integer
          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
        count_per_project:
          type: string
          description: The default count quota for the new created projects.
        token_expiration:
          type: integer
          description: 'The expiration time of the token for internal Registry, in minutes.'
        ldap_group_search_scope:
          type: integer
          description: >-
            The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,
            2-LDAP_SCOPE_SUBTREE'
        email_ssl:
          type: boolean
          description: >-
            When it's set to true the system will access Email server via TLS by
            default.  If it's set to false, it still will handle "STARTTLS" from
            server side.
        email_port:
          type: integer
          description: The port of SMTP server.
        email_host:
          type: string
          description: The hostname of SMTP server that sends Email notification.
        email_from:
          type: string
          description: The sender name for Email notification.
    WebhookTargetObject:
      type: object
      description: The webhook policy target object.
      properties:
        type:
          type: string
          description: The webhook target notify type.
        auth_header:
          type: string
          description: The webhook auth header.
        skip_cert_verify:
          type: boolean
          description: Whether or not to skip cert verify.
        address:
          type: string
          description: The webhook target address.
    ChartMetadata:
      required:
        - name
        - version
        - engine
        - icon
        - apiVersion
        - appVersion
      type: object
      description: The metadata of chart version
      properties:
        engine:
          type: string
          description: The name of template engine
        description:
          type: string
          description: A one-sentence description of chart
        deprecated:
          type: boolean
          description: Whether or not this chart is deprecated
        appVersion:
          type: string
          description: The version of the application enclosed in the chart
        apiVersion:
          type: string
          description: The API version of this chart
        name:
          type: string
          description: The name of the chart
        sources:
          items:
            type: string
          type: array
          description: The URL to the source code of chart
        version:
          type: string
          description: A SemVer 2 version of chart
        keywords:
          items:
            type: string
          type: array
          description: A list of string keywords
        home:
          type: string
          description: The URL to the relevant project page
        icon:
          type: string
          description: The URL to an icon file
    ScannerRegistrationReq:
      type: object
      properties:
        name:
          type: string
          description: The name of this registration
          example: Clair
        url:
          format: url
          type: string
          example: 'http://harbor-scanner-clair:8080'
          description: A base URL of the scanner adapter.
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        auth:
          default: ''
          type: string
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
          example: Bearer
        disabled:
          default: false
          type: boolean
          description: Indicate whether the registration is enabled or not
        use_internal_addr:
          default: false
          type: boolean
          description: >-
            Indicate whether use internal registry addr for the scanner to pull
            content or not
        skip_certVerify:
          default: false
          type: boolean
          description: >-
            Indicate if skip the certificate verification when sending HTTP
            requests
        description:
          type: string
          description: An optional description of this registration.
          example: >
            A free-to-use tool that scans container images for package
            vulnerabilities.
    LdapConf:
      type: object
      properties:
        ldap_url:
          type: string
          description: The url of ldap service.
        ldap_uid:
          type: string
          description: The serach uid from ldap service attributes.
        ldap_search_dn:
          type: string
          description: The search dn of ldap service.
        ldap_connection_timeout:
          type: integer
          description: The connect timeout of ldap service(second).
          format: int64
        ldap_search_password:
          type: string
          description: The search password of ldap service.
        ldap_scope:
          type: integer
          description: The serach scope of ldap service.
          format: int64
        ldap_base_dn:
          type: string
          description: The base dn of ldap service.
        ldap_filter:
          type: string
          description: The serach filter of ldap service.
    ComponentHealthStatus:
      type: object
      description: The health status of component
      properties:
        status:
          type: string
          description: The health status of component
        name:
          type: string
          description: The component name
        error:
          type: string
          description: (optional) The error message when the status is "unhealthy"
    ConflictFormatedError:
      type: object
      description: Conflicts
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    StatisticMap:
      type: object
      properties:
        total_project_count:
          type: integer
          description: 'The count of the total projects, only be seen when the is admin.'
          format: int32
        public_project_count:
          type: integer
          description: The count of the public projects.
          format: int32
        private_project_count:
          type: integer
          description: The count of the private projects which the user is a member of.
          format: int32
        public_repo_count:
          type: integer
          description: >-
            The count of the public repositories belonging to the public
            projects which the user is a member of.
          format: int32
        total_repo_count:
          type: integer
          description: >-
            The count of the total repositories, only be seen when the user is
            admin.
          format: int32
        private_repo_count:
          type: integer
          description: >-
            The count of the private repositories belonging to the projects
            which the user is a member of.
          format: int32
    ProjectSummary:
      type: object
      properties:
        maintainer_count:
          type: integer
          description: The total number of maintainer members.
        project_admin_count:
          type: integer
          description: The total number of project admin members.
        developer_count:
          type: integer
          description: The total number of developer members.
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        quota:
          type: object
          properties:
            hard:
              $ref: '#/components/schemas/ResourceList'
            used:
              $ref: '#/components/schemas/ResourceList'
        guest_count:
          type: integer
          description: The total number of guest members.
        registry:
          $ref: '#/components/schemas/Registry'
        chart_count:
          type: integer
          description: The total number of charts under this project.
    ScannerRegistration:
      type: object
      description: >
        Registration represents a named configuration for invoking a scanner via
        its adapter.
      properties:
        disabled:
          default: false
          type: boolean
          description: Indicate whether the registration is enabled or not
        vendor:
          type: string
          description: Optional property to describe the vendor of the scanner registration
          example: CentOS
        description:
          type: string
          description: An optional description of this registration.
          example: >
            A free-to-use tool that scans container images for package
            vulnerabilities.
        url:
          format: url
          type: string
          example: 'http://harbor-scanner-clair:8080'
          description: A base URL of the scanner adapter
        adapter:
          type: string
          description: Optional property to describe the name of the scanner registration
          example: Clair
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        uuid:
          type: string
          description: The unique identifier of this registration.
        auth:
          default: ''
          type: string
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
          example: Bearer
        is_default:
          default: false
          type: boolean
          description: Indicate if the registration is set as the system default one
        version:
          type: string
          description: >-
            Optional property to describe the version of the scanner
            registration
          example: 1.0.1
        health:
          default: ''
          type: string
          description: Indicate the healthy of the registration
          example: healthy
        use_internal_addr:
          default: false
          type: boolean
          description: >-
            Indicate whether use internal registry addr for the scanner to pull
            content or not
        skip_certVerify:
          default: false
          type: boolean
          description: >-
            Indicate if skip the certificate verification when sending HTTP
            requests
        name:
          type: string
          example: Clair
          description: The name of this registration.
    EventType:
      type: string
      description: Webhook supportted event type.
      example: pullImage
    ReplicationFilter:
      type: object
      properties:
        type:
          type: string
          description: The replication policy filter type.
        value:
          type: string
          description: The value of replication policy filter.
