openapi: 3.0.0
info:
  title: Harbor API
  description: These APIs provide services for manipulating Harbor project.
  version: 2.0
security:
  - basic: []
  - {}
paths:
  '/health':
    get:
      summary: Health check API
      description: |
        The endpoint returns the health stauts of the system.
      tags:
        - Products
      operationId: health
      responses:
        '200':
          description: The system health status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverallHealthStatus'
  '/projects/{project_id}/metadatas':
    get:
      summary: Get project metadata.
      description: |
        This endpoint returns metadata of the project specified by project ID.
      operationId: projectMetadata
      parameters:
        - name: project_id
          in: path
          description: The ID of project.
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - Products
      responses:
        '200':
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        '401':
          description: User need to login first.
        '500':
          description: Internal server errors.
    post:
      summary: Add metadata for the project.
      description: |
        This endpoint is aimed to add metadata of a project.
      operationId: setProjectMetadata
      parameters:
        - name: project_id
          in: path
          required: true
          description: Selected project ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMetadata'
        description: The metadata of project.
        required: true
      tags:
        - Products
      responses:
        '200':
          description: Add metadata successfully.
        '400':
          description: Invalid request.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to the project.
        '404':
          description: Project ID does not exist.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Internal server errors.
  '/projects/{project_id}/metadatas/{meta_name}':
    get:
      summary: Get project metadata
      description: |
        This endpoint returns specified metadata of a project.
      operationId: specifiedProjectMetadata
      parameters:
        - name: project_id
          in: path
          description: Project ID for filtering results.
          required: true
          schema:
            type: integer
            format: int64
        - name: meta_name
          in: path
          description: The name of metadat.
          required: true
          schema:
            type: string
      tags:
        - Products
      responses:
        '200':
          description: Get metadata successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadata'
        '401':
          description: User need to log in first.
        '500':
          description: Internal server errors.
    put:
      summary: Update metadata of a project.
      description: |
        This endpoint is aimed to update the metadata of a project.
      operationId: updateProjectMetadata
      parameters:
        - name: project_id
          in: path
          required: true
          description: The ID of project.
          schema:
            type: integer
            format: int64
        - name: meta_name
          in: path
          description: The name of metadat.
          required: true
          schema:
            type: string
      tags:
        - Products
      responses:
        '200':
          description: Updated metadata successfully.
        '400':
          description: Invalid request.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission to the project.
        '404':
          description: Project or metadata does not exist.
        '500':
          description: Internal server errors.
    delete:
      summary: Delete metadata of a project
      description: |
        This endpoint is aimed to delete metadata of a project.
      operationId: removeProjectMetadata
      parameters:
        - name: project_id
          in: path
          description: The ID of project.
          required: true
          schema:
            type: integer
            format: int64
        - name: meta_name
          in: path
          description: The name of metadat.
          required: true
          schema:
            type: string
      tags:
        - Products
      responses:
        '200':
          description: Metadata is deleted successfully.
        '400':
          description: Invalid requst.
        '403':
          description: User need to log in first.
        '404':
          description: Project or metadata does not exist.
        '500':
          description: Internal server errors.
  '/projects/{project_id}/members':
    get:
      summary: Get all project member information
      description: Get all project member information
      operationId: allProjectMembers
      parameters:
        - name: project_id
          in: path
          required: true
          description: Relevant project ID.
          schema:
            type: integer
            format: int64
        - name: entityname
          in: query
          description: The entity name to search.
          schema:
            type: string
      tags:
        - Products
      responses:
        '200':
          description: Get project members successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMemberEntity'
        '400':
          description: The project id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: Project ID does not exist.
        '500':
          description: Unexpected internal errors.
    post:
      summary: Create project member
      description: >-
        Create project member relationship, the member can be one of the
        user_member and group_member,  The user_member need to specify user_id
        or username. If the user already exist in harbor DB, specify the
        user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the
        user. The group_member need to specify id or ldap_group_dn. If the group
        already exist in harbor DB. specify the user group's id,  If does not
        exist, it will SearchAndOnBoard the group.
      operationId: createProjectMemberRelationship
      tags:
        - Products
      parameters:
        - name: project_id
          in: path
          required: true
          description: Relevant project ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMember'
      responses:
        '201':
          description: Project member created successfully.
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
        '400':
          description: >-
            Illegal format of project member or project id is invalid, or LDAP
            DN is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '409':
          description: >-
            A user group with same group name already exist or an LDAP user
            group with same DN already exist.
        '500':
          description: Unexpected internal errors.
  '/projects/{project_id}/members/{mid}':
    get:
      summary: Get the project member information
      description: Get the project member information
      operationId: projectMember
      tags:
        - Products
      parameters:
        - name: project_id
          in: path
          required: true
          description: Relevant project ID.
          schema:
            type: integer
            format: int64
        - name: mid
          in: path
          required: true
          description: The member ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project member retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMemberEntity'
        '400':
          description: 'Illegal format of project member or invalid project id, member id.'
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: Project or projet member does not exist.
        '500':
          description: Unexpected internal errors.
    put:
      summary: Update project member
      description: Update project member relationship
      operationId: setProjectMember
      tags:
        - Products
      parameters:
        - name: project_id
          in: path
          required: true
          description: Relevant project ID.
          schema:
            type: integer
            format: int64
        - name: mid
          in: path
          required: true
          description: Member ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
      responses:
        '200':
          description: Project member updated successfully.
        '400':
          description: >-
            Invalid role id, it should be 1,2 or 3, or invalid project id, or
            invalid member id.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '404':
          description: project or project member does not exist.
        '500':
          description: Unexpected internal errors.
    delete:
      summary: Delete project member
      operationId: deleteProjectMember
      tags:
        - Products
      parameters:
        - name: project_id
          in: path
          required: true
          description: Relevant project ID.
          schema:
            type: integer
            format: int64
        - name: mid
          in: path
          required: true
          description: Member ID.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project member deleted successfully.
        '400':
          description: The project id or project member id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the project.
        '500':
          description: Unexpected internal errors.
  '/statistics':
    get:
      summary: Get projects number and repositories number relevant to the user
      description: >
        This endpoint is aimed to statistic all of the projects number and
        repositories number relevant to the logined user, also the public
        projects number and repositories number. If the user is admin, he can
        also get total projects number and total repositories number.
      operationId: statistics
      tags:
        - Products
      responses:
        '200':
          description: >-
            Get the projects number and repositories number relevant to the user
            successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticMap'
        '401':
          description: User need to log in first.
        '500':
          description: Unexpected internal errors.
  '/users':
    get:
      summary: Get registered users of Harbor.
      description: >
        This endpoint is for user to search registered users, support for
        filtering results with username.Notice, by now this operation is only
        for administrator.
      operationId: users
      parameters:
        - name: username
          in: query
          required: false
          description: Username for filtering results.
          schema:
            type: string
        - name: email
          in: query
          required: false
          description: Email for filtering results.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: 'The page number, default is 1.'
          schema:
            type: integer
            format: int32
        - name: page_size
          in: query
          required: false
          description: The size of per page.
          schema:
            type: integer
            format: int32
      tags:
        - Products
      responses:
        '200':
          description: Searched for users of Harbor successfully.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
    post:
      summary: Creates a new user account.
      description: |
        This endpoint is to create a user if the user does not already exist.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: New created user.
        required: true
      tags:
        - Products
      responses:
        '201':
          description: User created successfully.
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
        '400':
          description: Unsatisfied with constraints of the user creation.
        '403':
          description: >-
            User registration can only be used by admin role user when
            self-registration is off.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
  '/users/current':
    get:
      summary: Get current user info.
      description: |
        This endpoint is to get the current user information.
      operationId: currentUser
      tags:
        - Products
      responses:
        '200':
          description: Get current user information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User need to log in first.
  '/users/current/permissions':
    get:
      summary: Get current user permissions.
      description: |
        This endpoint is to get the current user permissions.
      operationId: currentUserPermissions
      parameters:
        - name: scope
          in: query
          required: false
          description: Get permissions of the scope
          schema:
            type: string
        - name: relative
          in: query
          required: false
          description: >
            If true, the resources in the response are relative to the scope,

            eg for resource '/project/1/repository' if relative is 'true' then
            the resource in response will be 'repository'.
          schema:
            type: boolean
      tags:
        - Products
      responses:
        '200':
          description: Get current user permission successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          description: User need to log in first.
        '500':
          description: Internal errors.
  '/users/search':
    get:
      summary: Search users by username
      description: |
        This endpoint is to search the users by username.
      operationId: searchUser
      parameters:
        - name: username
          in: query
          required: true
          description: Username for filtering results.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: 'The page number, default is 1.'
          schema:
            type: integer
            format: int32
        - name: page_size
          in: query
          required: false
          description: The size of per page.
          schema:
            type: integer
            format: int32
      tags:
        - Products
      responses:
        '200':
          description: 'Search users by username, email successfully.'
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearch'
        '500':
          description: Unexpected internal errors.
  '/users/{user_id}':
    get:
      summary: Get a user's profile.
      description: |
        Get user's profile with user id.
      operationId: user
      parameters:
        - name: user_id
          in: path
          required: true
          description: Registered user ID
          schema:
            type: integer
            format: int
      tags:
        - Products
      responses:
        '200':
          description: Get user's profile successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
    put:
      summary: Update a registered user to change his profile.
      description: |
        This endpoint let a registered user change his profile.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: Registered user ID
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        description: 'Only email, realname and comment can be modified.'
        required: true
      tags:
        - Products
      responses:
        '200':
          description: Updated user's profile successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
    delete:
      summary: Mark a registered user as be removed.
      description: |
        This endpoint let administrator of Harbor mark a registered user as
        be removed.It actually won't be deleted from DB.
      operationId: removeUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID for marking as to be removed.
          schema:
            type: integer
            format: int
      tags:
        - Products
      responses:
        '200':
          description: Marked user as be removed successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
  '/users/{user_id}/password':
    put:
      summary: Change the password on a user that already exists.
      description: >
        This endpoint is for user to update password. Users with the admin role
        can change any user's password. Guest users can change only their own
        password.
      operationId: changePassword
      parameters:
        - name: user_id
          in: path
          required: true
          description: Registered user ID.
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        description: >-
          Password to be updated, the attribute 'old_password' is optional when
          the API is called by the system administrator.
        required: true
      tags:
        - Products
      responses:
        '200':
          description: Updated password successfully.
        '400':
          description: Invalid user ID; Old password is blank; New password is blank.
        '401':
          description: Don't have authority to change password. Please check login status.
        '403':
          description: >-
            The caller does not have permission to update the password of the
            user with given ID, or the old password in request body is not
            correct.
        '500':
          description: Unexpected internal errors.
  '/users/{user_id}/sysadmin':
    put:
      summary: Update a registered user to change to be an administrator of Harbor.
      description: |
        This endpoint let a registered user change to be an administrator
        of Harbor.
      operationId: makeAdmin
      parameters:
        - name: user_id
          in: path
          required: true
          description: Registered user ID
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SysAdminFlag'
        description: Toggle a user to admin or not.
        required: true
      tags:
        - Products
      responses:
        '200':
          description: Updated user's admin role successfully.
        '400':
          description: Invalid user ID.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '404':
          description: User ID does not exist.
        '500':
          description: Unexpected internal errors.
  '/users/{user_id}/cli_secret':
    put:
      summary: Set CLI secret for a user.
      description: >
        This endpoint let user generate a new CLI secret for himself.  This API
        only works when auth mode is set to 'OIDC'.

        Once this API returns with successful status, the old secret will be
        invalid, as there will be only one CLI secret

        for a user.
      operationId: setCliSecret
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: The new secret
        description: JSON object that includes the new secret
        required: true
      tags:
        - Products
      responses:
        '200':
          description: The secret is successfully updated
        '400':
          description: >-
            Invalid user ID.  Or user is not onboarded via OIDC authentication.
            Or the secret does not meet the standard.
        '401':
          description: User need to log in first.
        '403':
          description: Non-admin user can only generate the cli secret of himself.
        '404':
          description: User ID does not exist.
        '412':
          description: >-
            The auth mode of the system is not "oidc_auth", or the user is not
            onboarded via OIDC AuthN.
        '500':
          description: Unexpected internal errors.
  '/labels':
    get:
      summary: List labels according to the query strings.
      description: |
        This endpoint let user list labels by name, scope and project_id
      operationId: listLabel
      parameters:
        - name: name
          in: query
          required: false
          description: The label name.
          schema:
            type: string
        - name: scope
          in: query
          required: true
          description: >-
            The label scope. Valid values are g and p. g for global labels and p
            for project labels.
          schema:
            type: string
        - name: project_id
          in: query
          required: false
          description: 'Relevant project ID, required when scope is p.'
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            type: integer
            format: int32
        - name: page_size
          in: query
          required: false
          description: The size of per page.
          schema:
            type: integer
            format: int32
      tags:
        - Products
      responses:
        '200':
          description: Get successfully.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '500':
          description: Unexpected internal errors.
    post:
      summary: Post creates a label
      description: |
        This endpoint let user creates a label.
      operationId: createLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The json object of label.
        required: true
      tags:
        - Products
      responses:
        '201':
          description: Create successfully.
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '409':
          description: Label with the same name and same scope already exists.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
  '/labels/{id}':
    get:
      summary: Get the label specified by ID.
      description: |
        This endpoint let user get the label by specific ID.
      operationId: label
      parameters:
        - name: id
          in: path
          required: true
          description: Label ID
          schema:
            type: integer
            format: int64
      tags:
        - Products
      responses:
        '200':
          description: Get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '500':
          description: Unexpected internal errors.
    put:
      summary: Update the label properties.
      description: |
        This endpoint let user update label properties.
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          required: true
          description: Label ID
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The updated label json object.
        required: true
      tags:
        - Products
      responses:
        '200':
          description: Update successfully.
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '409':
          description: The label with the same name already exists.
        '500':
          description: Unexpected internal errors.
    delete:
      summary: Delete the label specified by ID.
      description: |
        Delete the label specified by ID.
      operationId: removeLabelById
      parameters:
        - name: id
          in: path
          required: true
          description: Label ID
          schema:
            type: integer
            format: int64
      tags:
        - Products
      responses:
        '200':
          description: Delete successfully.
        '400':
          description: Invalid parameters.
        '401':
          description: User need to log in first.
        '404':
          description: The resource does not exist.
        '500':
          description: Unexpected internal errors.
  /usergroups:
    get:
      summary: Get all user groups information
      description: Get all user groups information
      operationId: listUserGroups
      tags:
        - Products
      responses:
        '200':
          description: Get user group successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '500':
          description: Unexpected internal errors.
    post:
      summary: Create user group
      description: Create user group information
      operationId: createUsergroup
      tags:
        - Products
      requestBody:
        $ref: '#/components/requestBodies/UserGroup'
      responses:
        '201':
          description: User group created successfully.
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
        '400':
          description: Invalid LDAP group DN.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '409':
          description: >-
            A user group with same group name already exist, or an LDAP user
            group with same DN already exist.
        '500':
          description: Unexpected internal errors.
  '/usergroups/{group_id}':
    get:
      summary: Get user group information
      description: Get user group information
      operationId: usergroup
      tags:
        - Products
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User group get successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: User in session does not have permission to the user group.
        '404':
          description: User group does not exist.
        '500':
          description: Unexpected internal errors.
    put:
      summary: Update group information
      description: Update user group information
      operationId: updateUsergroup
      tags:
        - Products
      parameters:
        - name: group_id
          in: path
          required: true
          description: Group ID
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UserGroup'
      responses:
        '200':
          description: User group updated successfully.
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: Only admin has this authority.
        '404':
          description: User group does not exist.
        '500':
          description: Unexpected internal errors.
    delete:
      summary: Delete user group
      description: Delete user group
      operationId: deleteUsergroup
      tags:
        - Products
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User group deleted successfully.
        '400':
          description: The user group id is invalid.
        '401':
          description: User need to log in first.
        '403':
          description: Only admin has this authority.
        '500':
          description: Unexpected internal errors.
  '/configurations':
    get:
      summary: Get system configurations.
      description: >
        This endpoint is for retrieving system configurations that only provides
        for admin user.
      operationId: systemConfiguration
      tags:
        - Products
      responses:
        '200':
          description: Get system configurations successfully. The response body is a map.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
        '401':
          description: User need to log in first.ß
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
    put:
      summary: Modify system configurations.
      description: >
        This endpoint is for modifying system configurations that only provides
        for admin user.
      operationId: updateSystemConfiguration
      tags:
        - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
        description: >-
          The configuration map can contain a subset of the attributes of the
          schema, which are to be updated.
        required: true
      responses:
        '200':
          description: Modify system configurations successfully.
        '401':
          description: User need to log in first.
        '403':
          description: User does not have permission of admin role.
        '500':
          description: Unexpected internal errors.
  '/email/ping':
    post:
      summary: Test connection and authentication with email server.
      operationId: emailPing
      description: |
        Test connection and authentication with email server.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailServerSetting'
        description: >-
          Email server settings, if some of the settings are not assigned, they
          will be read from system configuration.
      tags:
        - Products
      responses:
        '200':
          description: Ping email server successfully.
        '400':
          description: Inviald email server settings.
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
  '/chartrepo/{repo}/charts/{name}/{version}/labels':
    get:
      summary: Return the attahced labels of chart.
      description: Return the attahced labels of the specified chart version.
      operationId: listAttahcedLabelsOfChart
      tags:
        - Products
        - Chart Repository
        - Label
      parameters:
        - name: repo
          in: path
          required: true
          description: The project name
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The chart name
          schema:
            type: string
        - name: version
          in: path
          required: true
          description: The chart version
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/schemas/Labels'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'
    post:
      summary: Mark label to chart.
      description: Mark label to the specified chart version.
      operationId: markLabelToChart
      tags:
        - Products
        - Chart Repository
        - Label
      parameters:
        - name: repo
          in: path
          required: true
          description: The project name
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The chart name
          schema:
            type: string
        - name: version
          in: path
          required: true
          description: The chart version
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The label being marked to the chart version
        required: true
      responses:
        '200':
          description: The label is successfully marked to the chart version.
        '400':
          $ref: '#/components/schemas/BadRequestFormatedError'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '409':
          $ref: '#/components/schemas/ConflictFormatedError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'
  '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}':
    delete:
      summary: Remove label from chart.
      description: Remove label from the specified chart version.
      operationId: removeLabelFromChart
      tags:
        - Products
        - Chart Repository
        - Label
      parameters:
        - name: repo
          in: path
          required: true
          description: The project name
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: The chart name
          schema:
            type: string
        - name: version
          in: path
          required: true
          description: The chart version
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The label ID
          schema:
            type: integer
      responses:
        '200':
          description: The label is successfully unmarked from the chart version.
        '400':
          $ref: '#/components/schemas/BadRequestFormatedError'
        '401':
          $ref: '#/components/schemas/UnauthorizedChartAPIError'
        '403':
          $ref: '#/components/schemas/ForbiddenChartAPIError'
        '404':
          $ref: '#/components/schemas/NotFoundChartAPIError'
        '500':
          $ref: '#/components/schemas/InternalChartAPIError'

  /search:
    get:
      summary: 'Search for projects, repositories and helm charts'
      description: >-
        The Search endpoint returns information about the projects, repositories
        and helm charts offered at public status or related to the current
        logged in user. The response includes the project, repository list and
        charts in a proper display order.
      parameters:
        - name: q
          in: query
          description: Search parameter for project and repository name.
          required: true
          schema:
            type: string
      tags:
        - search
      operationId: search
      responses:
        '200':
          description: An array of search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '500':
          $ref: '#/components/responses/500'
  /ldap/ping:
    post:
      operationId: pingLdap
      summary: Ping available ldap service.
      description: >
        This endpoint ping the available ldap service for test related
        configuration parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConf'
        description: >-
          ldap configuration. support input ldap service configuration. If it is
          a empty request, will load current configuration from the system.
      tags:
        - Ldap
      responses:
        '200':
          description: Ping ldap service successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapPingResult'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /ldap/users/search:
    get:
      operationId: searchLdapUser
      summary: Search available ldap users.
      description: >
        This endpoint searches the available ldap users based on related
        configuration parameters. Support searched by input ladp configuration,
        load configuration from the system and specific filter.
      parameters:
        - name: username
          in: query
          required: false
          description: Registered user ID
          schema:
            type: string
      tags:
        - Ldap
      responses:
        '200':
          description: Search ldap users successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapUser'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /ldap/users/import:
    post:
      operationId: importLdapUser
      summary: Import selected available ldap users.
      description: >
        This endpoint adds the selected available ldap users to harbor based on
        related configuration parameters from the system. System will try to
        guess the user email address and realname, add to harbor user
        information. If have errors when import user, will return the list of
        importing failed uid and the failed reason.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapImportUsers'
        description: >-
          The uid listed for importing. This list will check users validity of
          ldap service based on configuration from the system.
        required: true
      tags:
        - Ldap
      responses:
        '200':
          description: Add ldap users successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: Failed import some users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LdapFailedImportUser'
        '500':
          $ref: '#/components/responses/500'
  /ldap/groups/search:
    get:
      summary: Search available ldap groups.
      operationId: searchLdapGroup
      description: >
        This endpoint searches the available ldap groups based on related
        configuration parameters. support to search by groupname or groupdn.
      parameters:
        - name: groupname
          in: query
          required: false
          description: Ldap group name
          schema:
            type: string
        - name: groupdn
          in: query
          required: false
          description: The LDAP group DN
          schema:
            type: string
      tags:
        - Ldap
      responses:
        '200':
          description: Search ldap group successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /projects:
    get:
      summary: List projects
      description: This endpoint returns projects created by Harbor.
      tags:
        - project
      operationId: listProjects
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
        - name: name
          in: query
          description: The name of project.
          required: false
          schema:
            type: string
        - name: public
          in: query
          description: The project is public or private.
          required: false
          schema:
            type: boolean
            format: int32
        - name: owner
          in: query
          description: The name of project owner.
          required: false
          schema:
            type: string
        - name: with_detail
          in: query
          description: >-
            Bool value indicating whether return detailed information of the
            project
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Return all matched projects.
          headers:
            X-Total-Count:
              description: The total count of projects
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    head:
      summary: Check if the project name user provided already exists.
      description: >-
        This endpoint is used to check if the project name provided already
        exist.
      tags:
        - project
      operationId: headProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: project_name
          in: query
          description: Project name for checking exists.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a new project.
      description: This endpoint is for user to create a new project.
      tags:
        - project
      operationId: createProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/resourceNameInLocation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectReq'
        description: New created project.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}':
    get:
      summary: Return specific project detail information
      description: This endpoint returns specific project information by project ID.
      tags:
        - project
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: Return matched project information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update properties for a selected project.
      description: This endpoint is aimed to update the properties of a project.
      tags:
        - project
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectReq'
        description: Updates of project.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete project by projectID
      description: This endpoint is aimed to delete project by project ID.
      tags:
        - project
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/_deletable':
    get:
      summary: Get the deletable status of the project
      description: Get the deletable status of the project
      tags:
        - project
      operationId: getProjectDeletable
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: Return deletable status of the project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDeletable'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/summary':
    get:
      summary: Get summary of the project.
      description: Get summary of the project.
      tags:
        - project
      operationId: getProjectSummary
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: Get summary of the project successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories':
    get:
      summary: List repositories
      description: List repositories of the specified project
      tags:
        - repository
      operationId: listRepositories
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of repositories
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}':
    get:
      summary: Get repository
      description: Get the repository specified by name
      tags:
        - repository
      operationId: getRepository
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update repository
      description: Update the repository specified by name
      tags:
        - repository
      operationId: updateRepository
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        description: The JSON object of repository.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete repository
      description: Delete the repository specified by name
      tags:
        - repository
      operationId: deleteRepository
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts':
    get:
      summary: List artifacts
      description: >-
        List artifacts under the specific project and repository. Except the
        basic properties, the other supported queries in "q" includes "tags=*"
        to list only tagged artifacts, "tags=nil" to list only untagged
        artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v",
        "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1,
        id2)" to list artifacts that both labels with id1 and id2 are added to
      tags:
        - artifact
      operationId: listArtifacts
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/acceptVulnerabilities'
        - name: with_tag
          in: query
          description: Specify whether the tags are included inside the returning artifacts
          required: false
          schema:
            type: boolean
            default: true
        - name: with_label
          in: query
          description: >-
            Specify whether the labels are included inside the returning
            artifacts
          required: false
          schema:
            type: boolean
            default: false
        - name: with_scan_overview
          in: query
          description: >-
            Specify whether the scan overview is included inside the returning
            artifacts
          required: false
          schema:
            type: boolean
            default: false
        - name: with_signature
          in: query
          description: >-
            Specify whether the signature is included inside the tags of the
            returning artifacts. Only works when setting "with_tag=true"
          required: false
          schema:
            type: boolean
            default: false
        - name: with_immutable_status
          in: query
          description: >-
            Specify whether the immutable status is included inside the tags of
            the returning artifacts. Only works when setting "with_tag=true"
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of artifacts
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artifact'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Copy artifact
      description: Copy the artifact specified in the "from" parameter to the repository.
      tags:
        - artifact
      operationId: copyArtifact
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - name: from
          in: query
          description: >-
            The artifact from which the new artifact is copied from, the format
            should be "project/repository:tag" or "project/repository@digest".
          required: true
          schema:
            type: string
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}':
    get:
      summary: Get the specific artifact
      description: >-
        Get the artifact specified by the reference under the project and
        repository. The reference can be digest or tag.
      tags:
        - artifact
      operationId: getArtifact
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/acceptVulnerabilities'
        - name: with_tag
          in: query
          description: Specify whether the tags are inclued inside the returning artifacts
          required: false
          schema:
            type: boolean
            default: true
        - name: with_label
          in: query
          description: >-
            Specify whether the labels are inclued inside the returning
            artifacts
          required: false
          schema:
            type: boolean
            default: false
        - name: with_scan_overview
          in: query
          description: >-
            Specify whether the scan overview is inclued inside the returning
            artifacts
          required: false
          schema:
            type: boolean
            default: false
        - name: with_signature
          in: query
          description: >-
            Specify whether the signature is inclued inside the returning
            artifacts
          required: false
          schema:
            type: boolean
            default: false
        - name: with_immutable_status
          in: query
          description: >-
            Specify whether the immutable status is inclued inside the tags of
            the returning artifacts. Only works when setting "with_tag=true"
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the specific artifact
      description: >-
        Delete the artifact specified by the reference under the project and
        repository. The reference can be digest or tag
      tags:
        - artifact
      operationId: deleteArtifact
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan':
    post:
      summary: Scan the artifact
      description: Scan the specified artifact
      tags:
        - scan
      operationId: scanArtifact
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log':
    get:
      summary: Get the log of the scan report
      description: Get the log of the scan report
      tags:
        - scan
      operationId: getReportLog
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - name: report_id
          in: path
          required: true
          description: The report id to get the log
          schema:
            type: string
      responses:
        '200':
          description: Successfully get scan log file
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags':
    post:
      summary: Create tag
      description: Create a tag for the specified artifact
      tags:
        - artifact
      operationId: createTag
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        description: The JSON object of tag.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: List tags
      description: List tags of the specific artifact
      tags:
        - artifact
      operationId: listTags
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: with_signature
          in: query
          description: Specify whether the signature is included inside the returning tags
          required: false
          schema:
            type: boolean
            default: false
        - name: with_immutable_status
          in: query
          description: >-
            Specify whether the immutable status is included inside the
            returning tags
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of tags
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}':
    delete:
      summary: Delete tag
      description: Delete the tag of the specified artifact
      tags:
        - artifact
      operationId: deleteTag
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - $ref: '#/components/parameters/tagName'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities':
    get:
      summary: Get the vulnerabilities addition of the specific artifact
      description: >-
        Get the vulnerabilities addition of the artifact specified by the
        reference under the project and repository.
      tags:
        - artifact
      operationId: getVulnerabilitiesAddition
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - $ref: '#/components/parameters/acceptVulnerabilities'
      responses:
        '200':
          description: Success
          headers:
            Content-Type:
              description: The content type of the vulnerabilities addition
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}':
    get:
      summary: Get the addition of the specific artifact
      description: >-
        Get the addition of the artifact specified by the reference under the
        project and repository.
      tags:
        - artifact
      operationId: getAddition
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - name: addition
          in: path
          description: The type of addition.
          required: true
          schema:
            type: string
            enum:
              - build_history
              - values.yaml
              - readme.md
              - dependencies
      responses:
        '200':
          description: Success
          headers:
            Content-Type:
              description: The content type of the addition
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels':
    post:
      summary: Add label to artifact
      description: Add label to the specified artiact.
      tags:
        - artifact
      operationId: addLabel
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: The label that added to the artifact. Only the ID property is needed.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}':
    delete:
      summary: Remove label from artifact
      description: Remove the label from the specified artiact.
      tags:
        - artifact
      operationId: removeLabel
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/repositoryName'
        - $ref: '#/components/parameters/reference'
        - name: label_id
          in: path
          description: The ID of the label that removed from the artifact.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/scanner':
    get:
      summary: Get project level scanner
      description: >-
        Get the scanner registration of the specified project. If no scanner
        registration is configured for the specified project, the system default
        scanner registration will be returned.
      tags:
        - project
      operationId: getScannerOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '400':
          description: Bad project ID
        '401':
          description: Unauthorized request
        '403':
          description: Request is not allowed
        '404':
          description: The requested object is not found
        '500':
          description: Internal server error happened
    put:
      summary: Configure scanner for the specified project
      description: >-
        Set one of the system configured scanner registration as the indepndent
        scanner of the specified project.
      tags:
        - project
      operationId: setScannerOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectScanner'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/scanner/candidates':
    get:
      summary: >-
        Get scanner registration candidates for configurating project level
        scanner
      description: >-
        Retrieve the system configured scanner registrations as candidates of
        setting project level scanner.
      tags:
        - project
      operationId: listScannerCandidatesOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: A list of scanner registrations.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /audit-logs:
    get:
      summary: Get recent logs of the projects which the user is a member of
      description: >
        This endpoint let user see the recent operation logs of the projects
        which he is member of
      tags:
        - auditlog
      operationId: listAuditLogs
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of auditlogs
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/logs':
    get:
      summary: Get recent logs of the projects
      description: Get recent logs of the projects
      tags:
        - project
      operationId: getLogs
      parameters:
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of auditlogs
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  /p2p/preheat/providers:
    get:
      summary: List P2P providers
      description: List P2P providers
      tags:
        - preheat
      operationId: ListProviders
      parameters:
        - $ref: '#/components/parameters/requestId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metadata'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /p2p/preheat/instances/ping:
    post:
      summary: Ping status of a instance.
      description: >
        This endpoint checks status of a instance, the instance can be given by
        ID or Endpoint URL (together with credential)
      operationId: PingInstances
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        $ref: '#/components/requestBodies/Instance'
      tags:
        - preheat
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Instance not found (when instance is provided by ID).
        '500':
          $ref: '#/components/responses/500'
  /p2p/preheat/instances:
    get:
      summary: List P2P provider instances
      description: List P2P provider instances
      tags:
        - preheat
      operationId: ListInstances
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of preheating provider instances
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create p2p provider instances
      description: Create p2p provider instances
      tags:
        - preheat
      operationId: CreateInstance
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        $ref: '#/components/requestBodies/Instance'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/p2p/preheat/instances/{preheat_instance_name}':
    get:
      summary: Get a P2P provider instance
      description: Get a P2P provider instance
      tags:
        - preheat
      operationId: GetInstance
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/instanceName'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the specified P2P provider instance
      description: Delete the specified P2P provider instance
      tags:
        - preheat
      operationId: DeleteInstance
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/instanceName'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update the specified P2P provider instance
      description: Update the specified P2P provider instance
      tags:
        - preheat
      operationId: UpdateInstance
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/instanceName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        description: The instance to update
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies':
    post:
      summary: Create a preheat policy under a project
      description: Create a preheat policy under a project
      tags:
        - preheat
      operationId: CreatePolicy
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
      requestBody:
        $ref: '#/components/requestBodies/PreheatPolicy'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: List preheat policies
      description: List preheat policies
      tags:
        - preheat
      operationId: ListPolicies
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: List preheat policies success
          headers:
            X-Total-Count:
              description: The total count of policies
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PreheatPolicy'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies/{preheat_policy_name}':
    get:
      summary: Get a preheat policy
      description: Get a preheat policy
      tags:
        - preheat
      operationId: GetPolicy
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
      responses:
        '200':
          description: Get a preheat policy success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreheatPolicy'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update preheat policy
      description: Update preheat policy
      tags:
        - preheat
      operationId: UpdatePolicy
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
      requestBody:
        $ref: '#/components/requestBodies/PreheatPolicy'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Manual preheat
      description: Manual preheat
      tags:
        - preheat
      operationId: ManualPreheat
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
      requestBody:
        $ref: '#/components/requestBodies/PreheatPolicy'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a preheat policy
      description: Delete a preheat policy
      tags:
        - preheat
      operationId: DeletePolicy
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions':
    get:
      summary: List executions for the given policy
      description: List executions for the given policy
      tags:
        - preheat
      operationId: ListExecutions
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: List executions success
          headers:
            X-Total-Count:
              description: The total count of executions
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}':
    get:
      summary: Get a execution detail by id
      description: Get a execution detail by id
      tags:
        - preheat
      operationId: GetExecution
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
        - $ref: '#/components/parameters/executionId'
      responses:
        '200':
          description: Get execution success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Stop a execution
      description: Stop a execution
      tags:
        - preheat
      operationId: StopExecution
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
        - $ref: '#/components/parameters/executionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Execution'
        description: The data of execution
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks':
    get:
      summary: List all the related tasks for the given execution
      description: List all the related tasks for the given execution
      tags:
        - preheat
      operationId: ListTasks
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
        - $ref: '#/components/parameters/executionId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: List tasks success
          headers:
            X-Total-Count:
              description: The total count of tasks
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs':
    get:
      summary: Get the log text stream of the specified task for the given execution
      description: Get the log text stream of the specified task for the given execution
      tags:
        - preheat
      operationId: GetPreheatLog
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
        - $ref: '#/components/parameters/preheatPolicyName'
        - $ref: '#/components/parameters/executionId'
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Get log success
          headers:
            Content-Type:
              description: Content type of response
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name}/preheat/providers':
    get:
      summary: Get all providers at project level
      description: Get all providers at project level
      tags:
        - preheat
      operationId: ListProvidersUnderProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/projectName'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderUnderProject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/robots':
    get:
      summary: Get all robot accounts of specified project
      description: Get all robot accounts of specified project
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      tags:
        - robotv1
      operationId: ListRobotV1
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of robot accounts
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Robot'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a robot account
      description: Create a robot account
      tags:
        - robotv1
      operationId: CreateRobotV1
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotCreateV1'
        description: The JSON object of a robot account.
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Request-Id:
              description: The ID of the corresponding request for the response
              schema:
                type: string
            Location:
              description: The location of the resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotCreated'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/robots/{robot_id}':
    get:
      summary: Get a robot account
      description: This endpoint returns specific robot account information by robot ID.
      tags:
        - robotv1
      operationId: GetRobotByIDV1
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/robotId'
      responses:
        '200':
          description: Return matched robot information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update status of robot account.
      description: Used to disable/enable a specified robot account.
      tags:
        - robotv1
      operationId: UpdateRobotV1
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/robotId'
      requestBody:
        $ref: '#/components/requestBodies/Robot'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a robot account
      description: This endpoint deletes specific robot account information by robot ID.
      tags:
        - robotv1
      operationId: DeleteRobotV1
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/robotId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/immutabletagrules':
    get:
      summary: List all immutable tag rules of current project
      description: |
        This endpoint returns the immutable tag rules of a project
      tags:
        - immutable
      operationId: ListImmuRules
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of immutable tag
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImmutableRule'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add an immutable tag rule to current project
      description: |
        This endpoint add an immutable tag rule to the project
      tags:
        - immutable
      operationId: CreateImmuRule
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      requestBody:
        $ref: '#/components/requestBodies/ImmutableRule'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}':
    put:
      summary: Update the immutable tag rule or enable or disable the rule
      tags:
        - immutable
      operationId: UpdateImmuRule
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/immutableRuleId'
      requestBody:
        $ref: '#/components/requestBodies/ImmutableRule'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the immutable tag rule.
      tags:
        - immutable
      operationId: DeleteImmuRule
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/immutableRuleId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/webhook/policies':
    get:
      summary: List project webhook policies.
      description: |
        This endpoint returns webhook policies of a project.
      tags:
        - webhook
      operationId: ListWebhookPoliciesOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of webhook policies.
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookPolicy'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create project webhook policy.
      description: |
        This endpoint create a webhook policy if the project does not have one.
      tags:
        - webhook
      operationId: CreateWebhookPolicyOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        description: Properties "targets" and "event_types" needed.
        required: true
      responses:
        '201':
          description: Project webhook policy create successfully.
          headers:
            X-Request-Id:
              description: The ID of the corresponding request for the response
              schema:
                type: string
            Location:
              description: The location of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}':
    get:
      summary: Get project webhook policy
      description: |
        This endpoint returns specified webhook policy of a project.
      tags:
        - webhook
      operationId: GetWebhookPolicyOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/webhookPolicyId'
      responses:
        '200':
          description: Get webhook policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookPolicy'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update webhook policy of a project.
      description: |
        This endpoint is aimed to update the webhook policy of a project.
      tags:
        - webhook
      operationId: UpdateWebhookPolicyOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/webhookPolicyId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPolicy'
        description: >-
          All properties needed except "id", "project_id", "creation_time",
          "update_time".
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete webhook policy of a project
      description: |
        This endpoint is aimed to delete webhookpolicy of a project.
      tags:
        - webhook
      operationId: DeleteWebhookPolicyOfProject
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/webhookPolicyId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/webhook/lasttrigger':
    get:
      summary: Get project webhook policy last trigger info
      description: >
        This endpoint returns last trigger information of project webhook
        policy.
      tags:
        - webhook
      operationId: LastTrigger
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: Test webhook connection successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLastTrigger'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/webhook/jobs':
    get:
      summary: List project webhook jobs
      description: |
        This endpoint returns webhook jobs of a project.
      tags:
        - webhookjob
      operationId: ListWebhookJobs
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: policy_id
          in: query
          required: true
          description: The policy ID.
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status of webhook job.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List project webhook jobs successfully.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookJob'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/projects/{project_name_or_id}/webhook/events':
    get:
      summary: Get supported event types and notify types.
      description: Get supportted event types and notify types.
      tags:
        - webhook
      operationId: GetSupportedEventTypes
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/isResourceName'
        - $ref: '#/components/parameters/projectNameOrId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedWebhookEventTypes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/icons/{digest}':
    get:
      summary: Get artifact icon
      description: >-
        Get the artifact icon with the specified digest. As the original icon
        image is resized and encoded before returning, the parameter "digest" in
        the path doesn't match the hash of the returned content
      tags:
        - icon
      operationId: getIcon
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/digest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Icon'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /robots:
    get:
      summary: Get robot account
      description: List the robot accounts with the specified level and project.
      tags:
        - robot
      operationId: ListRobot
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of robot accounts
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Robot'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a robot account
      description: Create a robot account
      tags:
        - robot
      operationId: CreateRobot
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotCreate'
        description: The JSON object of a robot account.
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Request-Id:
              description: The ID of the corresponding request for the response
              schema:
                type: string
            Location:
              description: The location of the resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotCreated'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /quotas:
    get:
      summary: List quotas
      description: List quotas
      tags:
        - quota
      operationId: listQuotas
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: reference
          in: query
          description: The reference type of quota.
          required: false
          schema:
            type: string
        - name: reference_id
          in: query
          description: The reference id of quota.
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: >
            Sort method, valid values include:

            'hard.resource_name', '-hard.resource_name', 'used.resource_name',
            '-used.resource_name'.

            Here '-' stands for descending order, resource_name should be the
            real resource name of the quota.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the quotas.
          headers:
            X-Total-Count:
              description: The total count of access logs
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quota'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/quotas/{id}':
    get:
      summary: Get the specified quota
      description: Get the specified quota
      tags:
        - quota
      operationId: getQuota
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: Quota ID
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quota'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update the specified quota
      description: Update hard limits of the specified quota
      tags:
        - quota
      operationId: updateQuota
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: Quota ID
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaUpdateReq'
        description: The new hard limits for the quota
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/robots/{robot_id}':
    get:
      summary: Get a robot account
      description: This endpoint returns specific robot account information by robot ID.
      tags:
        - robot
      operationId: GetRobotByID
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/robotId'
      responses:
        '200':
          description: Return matched robot information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update a robot account
      description: This endpoint updates specific robot account information by robot ID.
      tags:
        - robot
      operationId: UpdateRobot
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/robotId'
      requestBody:
        $ref: '#/components/requestBodies/Robot'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Refresh the robot secret
      description: Refresh the robot secret
      tags:
        - robot
      operationId: RefreshSec
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/robotId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RobotSec'
        description: The JSON object of a robot account.
        required: true
      responses:
        '200':
          description: Return refreshed robot sec.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotSec'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a robot account
      description: This endpoint deletes specific robot account information by robot ID.
      tags:
        - robot
      operationId: DeleteRobot
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/robotId'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /replication/policies:
    get:
      summary: List replication policies
      description: List replication policies
      tags:
        - replication
      operationId: listReplicationPolicies
      parameters:
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: name
          in: query
          required: false
          description: 'Deprecated, use "query" instead. The policy name.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of the resources
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationPolicy'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a replication policy
      description: Create a replication policy
      tags:
        - replication
      operationId: createReplicationPolicy
      requestBody:
        $ref: '#/components/requestBodies/ReplicationPolicy'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/replication/policies/{id}':
    get:
      summary: Get the specific replication policy
      description: Get the specific replication policy
      tags:
        - replication
      operationId: getReplicationPolicy
      parameters:
        - name: id
          in: path
          required: true
          description: Policy ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationPolicy'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the specific replication policy
      description: Delete the specific replication policy
      tags:
        - replication
      operationId: deleteReplicationPolicy
      parameters:
        - name: id
          in: path
          required: true
          description: Replication policy ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update the replication policy
      description: Update the replication policy
      tags:
        - replication
      operationId: updateReplicationPolicy
      parameters:
        - name: id
          in: path
          required: true
          description: The policy ID
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ReplicationPolicy'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /replication/executions:
    get:
      summary: List replication executions
      description: List replication executions
      tags:
        - replication
      operationId: listReplicationExecutions
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: policy_id
          in: query
          required: false
          description: The ID of the policy that the executions belong to.
          schema:
            type: integer
        - name: status
          in: query
          required: false
          description: The execution status.
          schema:
            type: string
        - name: trigger
          in: query
          required: false
          description: The trigger mode.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of the resources
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationExecution'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Start one replication execution
      description: Start one replication execution according to the policy
      tags:
        - replication
      operationId: startReplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartReplicationExecution'
        description: The ID of policy that the execution belongs to
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/replication/executions/{id}':
    get:
      summary: Get the specific replication execution
      description: Get the replication execution specified by ID
      tags:
        - replication
      operationId: getReplicationExecution
      parameters:
        - name: id
          in: path
          description: The ID of the execution.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationExecution'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Stop the specific replication execution
      description: Stop the replication execution specified by ID
      tags:
        - replication
      operationId: stopReplication
      parameters:
        - name: id
          in: path
          description: The ID of the execution.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/replication/executions/{id}/tasks':
    get:
      summary: List replication tasks for a specific execution
      description: List replication tasks for a specific execution
      tags:
        - replication
      operationId: listReplicationTasks
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: id
          in: path
          description: The ID of the execution that the tasks belongs to.
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          description: The task status.
          schema:
            type: string
        - name: resource_type
          in: query
          required: false
          description: The resource type.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of the resources
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationTask'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/replication/executions/{id}/tasks/{task_id}/log':
    get:
      summary: Get the log of the specific replication task
      description: Get the log of the specific replication task
      tags:
        - replication
      operationId: getReplicationLog
      parameters:
        - name: id
          in: path
          description: The ID of the execution that the tasks belongs to.
          required: true
          schema:
            type: integer
            format: int64
        - name: task_id
          in: path
          description: The ID of the task.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Content-Type:
              description: The content type of response body
              schema:
                type: string
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /replication/adapters:
    get:
      summary: List registry adapters
      description: List registry adapters
      tags:
        - registry
      operationId: listRegistryProviderTypes
      parameters:
        - $ref: '#/components/parameters/requestId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /replication/adapterinfos:
    get:
      summary: List all registered registry provider information
      description: List all registered registry provider information
      tags:
        - registry
      operationId: listRegistryProviderInfos
      parameters:
        - $ref: '#/components/parameters/requestId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RegistryProviderInfo'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /registries:
    post:
      summary: Create a registry
      description: Create a registry
      tags:
        - registry
      operationId: createRegistry
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registry'
        description: The registry
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: List the registries
      description: List the registries
      tags:
        - registry
      operationId: listRegistries
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: name
          in: query
          required: false
          description: 'Deprecated, use `q` instead.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: The total count of the resources
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Registry'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /registries/ping:
    post:
      summary: Check status of a registry
      description: Check status of a registry
      tags:
        - registry
      operationId: pingRegistry
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryPing'
        description: The registry
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/registries/{id}':
    get:
      summary: Get the specific registry
      description: Get the specific registry
      tags:
        - registry
      operationId: getRegistry
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: Registry ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete the specific registry
      description: Delete the specific registry
      tags:
        - registry
      operationId: deleteRegistry
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: Registry ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update the registry
      description: Update the registry
      tags:
        - registry
      operationId: updateRegistry
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: The registry ID
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryUpdate'
        description: The registry
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  '/registries/{id}/info':
    get:
      summary: Get the registry info
      description: Get the registry info
      tags:
        - registry
      operationId: getRegistryInfo
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: id
          in: path
          required: true
          description: Registry ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryInfo'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /scans/all/metrics:
    get:
      summary: Get the metrics of the latest scan all process
      description: Get the metrics of the latest scan all process
      tags:
        - scanAll
      operationId: getLatestScanAllMetrics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
  /scans/schedule/metrics:
    get:
      summary: Get the metrics of the latest scheduled scan all process
      description: Get the metrics of the latest scheduled scan all process
      tags:
        - scanAll
      operationId: getLatestScheduledScanAllMetrics
      deprecated: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
  /systeminfo:
    get:
      summary: Get general system info
      description: >
        This API is for retrieving general system info, this can be called by
        anonymous request.  Some attributes will be omitted in the response when
        this API is called by anonymous request.
      operationId: systeminfo
      tags:
        - systeminfo
      responses:
        '200':
          description: Get general info successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralInfo'
        '500':
          $ref: '#/components/responses/500'
  /systeminfo/volumes:
    get:
      summary: Get system volume info (total/free size).
      description: >
        This endpoint is for retrieving system volume info that only provides
        for admin user.  Note that the response only reflects the storage status
        of local disk.
      operationId: systeminfoVolumes
      tags:
        - systeminfo
      responses:
        '200':
          description: Get system volumes successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /systeminfo/getcert:
    get:
      summary: Get default root certificate.
      description: |
        This endpoint is for downloading a default root certificate.
      operationId: systeminfoCert
      tags:
        - systeminfo
      responses:
        '200':
          description: Get default root certificate successfully.
          headers:
            Content-Disposition:
              description: To set the filename of the downloaded file.
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Not found the default root certificate.
        '500':
          $ref: '#/components/responses/500'
  /system/oidc/ping:
    post:
      summary: Test the OIDC endpoint.
      description: >
        Test the OIDC endpoint, the setting of the endpoint is provided in the
        request.  This API can only be called by system admin.
      tags:
        - oidc
      operationId: pingOIDC
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The URL of OIDC endpoint to be tested.
                verify_cert:
                  type: boolean
                  description: Whether the certificate should be verified
        description: Request body for OIDC endpoint to be tested.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /system/gc:
    get:
      summary: Get gc results.
      description: This endpoint let user get gc execution history.
      tags:
        - gc
      operationId: getGCHistory
      parameters:
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Get gc results successfully.
          headers:
            X-Total-Count:
              description: The total count of history
              schema:
                type: integer
            Link:
              description: Link refers to the previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GCHistory'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/system/gc/{gc_id}':
    get:
      summary: Get gc status.
      description: This endpoint let user get gc status filtered by specific ID.
      operationId: getGC
      parameters:
        - $ref: '#/components/parameters/gcId'
      tags:
        - gc
      responses:
        '200':
          description: Get gc results successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GCHistory'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/system/gc/{gc_id}/log':
    get:
      summary: Get gc job log.
      description: This endpoint let user get gc job logs filtered by specific ID.
      operationId: getGCLog
      parameters:
        - $ref: '#/components/parameters/gcId'
      tags:
        - gc
      responses:
        '200':
          description: Get successfully.
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /system/gc/schedule:
    get:
      summary: Get gc's schedule.
      description: This endpoint is for get schedule of gc job.
      operationId: getGCSchedule
      tags:
        - gc
      responses:
        '200':
          description: Get gc's schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GCHistory'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a gc schedule.
      description: |
        This endpoint is for update gc schedule.
      operationId: createGCSchedule
      requestBody:
        $ref: '#/components/requestBodies/Schedule'
      tags:
        - gc
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update gc's schedule.
      description: |
        This endpoint is for update gc schedule.
      operationId: updateGCSchedule
      requestBody:
        $ref: '#/components/requestBodies/Schedule'
      tags:
        - gc
      responses:
        '200':
          description: Updated gc's schedule successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /system/CVEAllowlist:
    get:
      summary: Get the system level allowlist of CVE.
      description: >-
        Get the system level allowlist of CVE.  This API can be called by all
        authenticated users.
      operationId: getSystemCVEAllowlist
      tags:
        - SystemCVEAllowlist
      responses:
        '200':
          description: Successfully retrieved the CVE allowlist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CVEAllowlist'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update the system level allowlist of CVE.
      description: >-
        This API overwrites the system level allowlist of CVE with the list in
        request body.  Only system Admin has permission to call this API.
      operationId: putSystemCVEAllowlist
      tags:
        - SystemCVEAllowlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CVEAllowlist'
        description: The allowlist with new content
      responses:
        '200':
          description: Successfully updated the CVE allowlist.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /system/scanAll/schedule:
    get:
      summary: Get scan all's schedule.
      description: >-
        This endpoint is for getting a schedule for the scan all job, which
        scans all of images in Harbor.
      tags:
        - scanAll
      operationId: getScanAllSchedule
      responses:
        '200':
          description: >-
            Get a schedule for the scan all job, which scans all of images in
            Harbor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update scan all's schedule.
      description: >-
        This endpoint is for updating the schedule of scan all job, which scans
        all of images in Harbor.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
        description: >-
          Updates the schedule of scan all job, which scans all of images in
          Harbor.
        required: true
      tags:
        - scanAll
      operationId: updateScanAllSchedule
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a schedule or a manual trigger for the scan all job.
      description: >-
        This endpoint is for creating a schedule or a manual trigger for the
        scan all job, which scans all of images in Harbor.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
        description: Create a schedule or a manual trigger for the scan all job.
        required: true
      tags:
        - scanAll
      operationId: createScanAllSchedule
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          $ref: '#/components/responses/409'
        '412':
          $ref: '#/components/responses/412'
        '500':
          $ref: '#/components/responses/500'
  /ping:
    get:
      summary: Ping Harbor to check if it's alive.
      description: >-
        This API simply replies a pong to indicate the process to handle API is
        up, disregarding the health status of dependent components.
      operationId: ping
      tags:
        - ping
      responses:
        '200':
          description: The API server is alive
          content:
            text/plain:
              schema:
                type: string
  /retentions/metadatas:
    get:
      summary: Get Retention Metadatas
      description: Get Retention Metadatas.
      operationId: getRentenitionMetadata
      tags:
        - Retention
      responses:
        '200':
          description: Get Retention Metadatas successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionMetadata'
  /retentions:
    post:
      summary: Create Retention Policy
      operationId: createRetention
      description: >-
        Create Retention Policy, you can reference metadatas API for the policy
        model. You can check project metadatas to find whether a retention
        policy is already binded. This method should only be called when no
        retention policy binded to project yet.
      tags:
        - Retention
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicy'
        description: Create Retention Policy successfully.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/retentions/{id}':
    get:
      summary: Get Retention Policy
      operationId: getRetention
      description: Get Retention Policy.
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get Retention Policy successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicy'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update Retention Policy
      operationId: updateRetention
      description: >-
        Update Retention Policy, you can reference metadatas API for the policy
        model. You can check project metadatas to find whether a retention
        policy is already binded. This method should only be called when
        retention policy has already binded to project.
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicy'
        required: true
      responses:
        '200':
          description: Update Retention Policy successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/retentions/{id}/executions':
    post:
      summary: Trigger a Retention Execution
      operationId: triggerRetentionExecution
      description: >-
        Trigger a Retention Execution, if dry_run is True, nothing would be
        deleted actually.
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dry_run:
                  type: boolean
        required: true
      responses:
        '200':
          description: Trigger a Retention job successfully.
        '201':
          $ref: '#/components/responses/201'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Retention executions
      operationId: listRetentionExecutions
      description: >-
        Get Retention executions, execution status may be delayed before job
        service schedule it up.
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          required: false
          description: The size of per page.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get a Retention execution successfully.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecution'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/retentions/{id}/executions/{eid}':
    patch:
      summary: Stop a Retention execution
      operationId: operateRetentionExecution
      description: 'Stop a Retention execution, only support "stop" action now.'
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
        - name: eid
          in: path
          required: true
          description: Retention execution ID.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
        description: 'The action, only support "stop" now.'
        required: true
      responses:
        '200':
          description: Stop a Retention job successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/retentions/{id}/executions/{eid}/tasks':
    get:
      summary: Get Retention tasks
      operationId: listRetentionTasks
      description: 'Get Retention tasks, each repository as a task.'
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
        - name: eid
          in: path
          required: true
          description: Retention execution ID.
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            type: integer
            format: int64
        - name: page_size
          in: query
          required: false
          description: The size of per page.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get Retention job tasks successfully.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetentionExecutionTask'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/retentions/{id}/executions/{eid}/tasks/{tid}':
    get:
      summary: Get Retention job task log
      operationId: getRetentionTaskLog
      description: >-
        Get Retention job task log, tags ratain or deletion detail will be shown
        in a table.
      tags:
        - Retention
      parameters:
        - name: id
          in: path
          required: true
          description: Retention ID.
          schema:
            type: integer
            format: int64
        - name: eid
          in: path
          required: true
          description: Retention execution ID.
          schema:
            type: integer
            format: int64
        - name: tid
          in: path
          required: true
          description: Retention execution ID.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get Retention job task log successfully.
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /scanners:
    get:
      summary: List scanner registrations
      description: |
        Returns a list of currently configured scanner registrations.
      tags:
        - scanner
      operationId: listScanners
      parameters:
        - $ref: '#/components/parameters/requestId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: A list of scanner registrations.
          headers:
            X-Total-Count:
              description: The total count of available items
              schema:
                type: integer
            Link:
              description: Link to previous page and next page
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScannerRegistration'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a scanner registration
      description: |
        Creats a new scanner registration with the given data.
      tags:
        - scanner
      operationId: createScanner
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        description: A scanner registration to be created.
        required: true
      responses:
        '201':
          description: Created successfully
          headers:
            Location:
              description: The URL of the created resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /scanners/ping:
    post:
      summary: Tests scanner registration settings
      description: |
        Pings scanner adapter to test endpoint URL and authorization settings.
      tags:
        - scanner
      operationId: pingScanner
      parameters:
        - $ref: '#/components/parameters/requestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationSettings'
        description: A scanner registration settings to be tested.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/scanners/{registration_id}':
    get:
      summary: Get a scanner registration details
      description: |
        Retruns the details of the specified scanner registration.
      tags:
        - scanner
      operationId: getScanner
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: registration_id
          in: path
          description: The scanner registration identifer.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The details of the scanner registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update a scanner registration
      description: |
        Updates the specified scanner registration.
      tags:
        - scanner
      operationId: updateScanner
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: registration_id
          in: path
          description: The scanner registration identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScannerRegistrationReq'
        description: A scanner registraiton to be updated.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete a scanner registration
      description: |
        Deletes the specified scanner registration.
      tags:
        - scanner
      operationId: deleteScanner
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: registration_id
          in: path
          description: The scanner registration identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted successfully and return the deleted registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerRegistration'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Set system default scanner registration
      description: |
        Set the specified scanner registration as the system default one.
      tags:
        - scanner
      operationId: setScannerAsDefault
      parameters:
        - name: registration_id
          in: path
          description: The scanner registration identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IsDefault'
        required: true
      responses:
        '200':
          description: >-
            Successfully set the specified scanner registration as system
            default
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  '/scanners/{registration_id}/metadata':
    get:
      summary: Get the metadata of the specified scanner registration
      description: >
        Get the metadata of the specified scanner registration, including the
        capabilities and customized properties.
      tags:
        - scanner
      operationId: getScannerMetadata
      parameters:
        - $ref: '#/components/parameters/requestId'
        - name: registration_id
          in: path
          required: true
          description: The scanner registration identifier.
          schema:
            type: string
      responses:
        '200':
          description: The metadata of the specified scanner adapter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerAdapterMetadata'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
servers:
  - url: 'http://localhost/api/v2.0'
  - url: 'https://localhost/api/v2.0'
components:
  parameters:
    query:
      name: q
      description: >-
        Query string to query resources. Supported query patterns are "exact
        match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union
        releationship(k={v1 v2 v3})" and "list with intersetion
        relationship(k=(v1 v2 v3))". The value of range and list can be
        string(enclosed by " or '), integer or time(in format "2020-04-09
        02:36:00"). All of these query patterns should be put in the query
        string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
      in: query
      required: false
      schema:
        type: string
    sort:
      name: sort
      description: >-
        Sort the resource list in ascending or descending order. e.g. sort by
        field1 in ascending orderr and field2 in descending order with
        "sort=field1,-field2"
      in: query
      required: false
      schema:
        type: string
    page:
      name: page
      in: query
      required: false
      description: The page number
      schema:
        type: integer
        format: int64
        default: 1
    pageSize:
      name: page_size
      in: query
      required: false
      description: The size of per page
      schema:
        type: integer
        format: int64
        maximum: 100
        default: 10
    requestId:
      name: X-Request-Id
      description: An unique ID for the request
      in: header
      required: false
      schema:
        type: string
        minLength: 1
    resourceNameInLocation:
      name: X-Resource-Name-In-Location
      description: >-
        The flag to indicate whether to return the name of the resource in
        Location. When X-Resource-Name-In-Location is true, the Location will
        return the name of the resource.
      in: header
      required: false
      schema:
        type: boolean
        default: false
    isResourceName:
      name: X-Is-Resource-Name
      description: >-
        The flag to indicate whether the parameter which supports both name and
        id in the path is the name of the resource. When the X-Is-Resource-Name
        is false and the parameter can be converted to an integer, the parameter
        will be as an id, otherwise, it will be as a name.
      in: header
      required: false
      schema:
        type: boolean
        default: false
    acceptVulnerabilities:
      name: X-Accept-Vulnerabilities
      in: header
      description: >-
        A comma-separated lists of MIME types for the scan report or scan
        summary. The first mime type will be used when the report found for it.

        Currently the mime type supports
        'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0'
        and 'application/vnd.security.vulnerability.report; version=1.1'
      schema:
        type: string
        default: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0
    projectName:
      name: project_name
      in: path
      description: The name of the project
      required: true
      schema:
        type: string
    projectNameOrId:
      name: project_name_or_id
      in: path
      description: The name or id of the project
      required: true
      schema:
        type: string
    repositoryName:
      name: repository_name
      in: path
      description: >-
        The name of the repository. If it contains slash, encode it with URL
        encoding. e.g. a/b -> a%252Fb
      required: true
      schema:
        type: string
    reference:
      name: reference
      in: path
      description: 'The reference of the artifact, can be digest or tag'
      required: true
      schema:
        type: string
    digest:
      name: digest
      in: path
      description: The digest of the resource
      required: true
      schema:
        type: string
    tagName:
      name: tag_name
      in: path
      description: The name of the tag
      required: true
      schema:
        type: string
    instanceName:
      name: preheat_instance_name
      in: path
      description: Instance Name
      required: true
      schema:
        type: string
    preheatPolicyName:
      name: preheat_policy_name
      in: path
      description: Preheat Policy Name
      required: true
      schema:
        type: string
    executionId:
      name: execution_id
      in: path
      description: Execution ID
      required: true
      schema:
        type: integer
    taskId:
      name: task_id
      in: path
      description: Task ID
      required: true
      schema:
        type: integer
    robotId:
      name: robot_id
      in: path
      description: Robot ID
      required: true
      schema:
        type: integer
    gcId:
      name: gc_id
      in: path
      description: The ID of the gc log
      required: true
      schema:
        type: integer
        format: int64
    webhookPolicyId:
      name: webhook_policy_id
      in: path
      description: The ID of the webhook policy
      required: true
      schema:
        type: integer
        format: int64
    immutableRuleId:
      name: immutable_rule_id
      in: path
      description: The ID of the immutable rule
      required: true
      schema:
        type: integer
        format: int64
  responses:
    '200':
      description: Success
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
    '201':
      description: Created
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
        Location:
          description: The location of the resource
          schema:
            type: string
    '202':
      description: Accepted
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
    '400':
      description: Bad request
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '401':
      description: Unauthorized
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '403':
      description: Forbidden
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '404':
      description: Not found
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '405':
      description: Method not allowed
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '409':
      description: Conflict
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '412':
      description: Precondition failed
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    '500':
      description: Internal server error
      headers:
        X-Request-Id:
          description: The ID of the corresponding request for the response
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  requestBodies:
    UserGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGroup'
    Schedule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Schedule'
      description: Updates of gc's schedule.
      required: true
    PreheatPolicy:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PreheatPolicy'
      description: The policy schema info
      required: true
    Instance:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Instance'
      description: The JSON object of instance.
      required: true
    Robot:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Robot'
      description: The JSON object of a robot account.
      required: true
    ImmutableRule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImmutableRule'
      required: true
    ReplicationPolicy:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReplicationPolicy'
      description: The replication policy
      required: true
  securitySchemes:
    basic:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int
          description: The ID of the user.
        username:
          type: string
        email:
          type: string
        password:
          type: string
        realname:
          type: string
        comment:
          type: string
        deleted:
          type: boolean
        role_name:
          type: string
        role_id:
          type: integer
          format: int
        sysadmin_flag:
          type: boolean
        admin_role_in_auth:
          type: boolean
          description: >-
            indicate the admin privilege is grant by authenticator (LDAP), is
            always false unless it is the current login user
        reset_uuid:
          type: string
        Salt:
          type: string
        creation_time:
          type: string
        update_time:
          type: string
    UserSearch:
      type: object
      properties:
        user_id:
          type: integer
          format: int
          description: The ID of the user.
        username:
          type: string
    Password:
      type: object
      properties:
        old_password:
          type: string
          description: The user's existing password.
        new_password:
          type: string
          description: New password for marking as to be updated.
    Role:
      type: object
      properties:
        role_id:
          type: integer
          format: int32
          description: ID in table.
        role_code:
          type: string
          description: Description of permissions for the role.
        role_name:
          type: string
          description: Name the the role.
        role_mask:
          type: string
    RoleParam:
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: Role ID for updating project role member.
        username:
          type: string
          description: Username relevant to a project role member.
    StatisticMap:
      type: object
      properties:
        private_project_count:
          type: integer
          format: int32
          description: The count of the private projects which the user is a member of.
        private_repo_count:
          type: integer
          format: int32
          description: >-
            The count of the private repositories belonging to the projects
            which the user is a member of.
        public_project_count:
          type: integer
          format: int32
          description: The count of the public projects.
        public_repo_count:
          type: integer
          format: int32
          description: >-
            The count of the public repositories belonging to the public
            projects which the user is a member of.
        total_project_count:
          type: integer
          format: int32
          description: 'The count of the total projects, only be seen when the is admin.'
        total_repo_count:
          type: integer
          format: int32
          description: >-
            The count of the total repositories, only be seen when the user is
            admin.
    SysAdminFlag:
      type: object
      properties:
        sysadmin_flag:
          type: boolean
          description: 'true-admin, false-not admin.'
    UserProfile:
      type: object
      properties:
        email:
          type: string
          description: The new email.
        realname:
          type: string
          description: The new realname.
        comment:
          type: string
          description: The new comment.
    LdapUsers:
      type: object
      properties:
        ldap_username:
          type: string
          description: search ldap user name based on ldapconf.
        ldap_realname:
          type: string
          description: >-
            system will try to guess the user realname form "uid" or "cn"
            attribute.
        ldap_email:
          type: string
          description: >-
            system will try to guess the user email address form "mail" or
            "email" attribute.
    LdapFailedImportUsers:
      type: object
      properties:
        ldap_uid:
          type: string
          description: the uid can't add to system.
        error:
          type: string
          description: fail reason.
    EmailServerSetting:
      type: object
      properties:
        email_host:
          type: string
          description: The host of email server.
        email_port:
          type: integer
          description: The port of email server.
        email_username:
          type: string
          description: The username of email server.
        email_password:
          type: string
          description: The password of email server.
        email_ssl:
          type: boolean
          description: Use ssl/tls or not.
        email_identity:
          type: string
          description: The dentity of email server.
    ComponentOverviewEntry:
      type: object
      properties:
        severity:
          type: integer
          description: '1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High'
        count:
          type: integer
          description: number of the components with certain severity.
    Configurations:
      type: object
      properties:
        auth_mode:
          type: string
          description: 'The auth mode of current system, such as "db_auth", "ldap_auth"'
        count_per_project:
          type: string
          description: The default count quota for the new created projects.
        email_from:
          type: string
          description: The sender name for Email notification.
        email_host:
          type: string
          description: The hostname of SMTP server that sends Email notification.
        email_port:
          type: integer
          description: The port of SMTP server.
        email_identity:
          type: string
          description: By default it's empty so the email_username is picked.
        email_username:
          type: string
          description: The username for authenticate against SMTP server.
        email_ssl:
          type: boolean
          description: >-
            When it's set to true the system will access Email server via TLS by
            default.  If it's set to false, it still will handle "STARTTLS" from
            server side.
        email_insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the email server.
        ldap_url:
          type: string
          description: The URL of LDAP server.
        ldap_base_dn:
          type: string
          description: The Base DN for LDAP binding.
        ldap_filter:
          type: string
          description: The filter for LDAP binding.
        ldap_scope:
          type: integer
          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
        ldap_uid:
          type: string
          description: >-
            The attribute which is used as identity for the LDAP binding, such
            as "CN" or "SAMAccountname"
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        ldap_timeout:
          type: integer
          description: timeout in seconds for connection to LDAP server.
        ldap_group_attribute_name:
          type: string
          description: >-
            The attribute which is used as identity of the LDAP group, default
            is cn.
        ldap_group_base_dn:
          type: string
          description: The base DN to search LDAP group.
        ldap_group_search_filter:
          type: string
          description: The filter to search the ldap group.
        ldap_group_search_scope:
          type: integer
          description: >-
            The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,
            2-LDAP_SCOPE_SUBTREE'
        ldap_group_admin_dn:
          type: string
          description: >-
            Specify the ldap group which have the same privilege with Harbor
            admin.
        oidc_client_id:
          type: string
          description: The client id of the OIDC.
        oidc_client_secret:
          type: string
          description: The client secret of the OIDC.
        oidc_endpoint:
          type: string
          description: 'The URL of an OIDC-complaint server, must start with ''https://''.'
        oidc_name:
          type: string
          description: The name of the OIDC provider.
        oidc_scope:
          type: string
          description: >-
            The scope sent to OIDC server during authentication, should be
            separated by comma. It has to contain “openid”, and
            “offline_access”. If you are using google, please remove
            “offline_access” from this field.
        oidc_verify_cert:
          type: boolean
          description: >-
            Whether verify your OIDC server certificate, disable it if your OIDC
            server is hosted via self-hosted certificate.
        project_creation_restriction:
          type: string
          description: >-
            This attribute restricts what users have the permission to create
            project.  It can be "everyone" or "adminonly".
        quota_per_project_enable:
          type: boolean
          description: This attribute indicates whether quota per project enabled in harbor
        read_only:
          type: boolean
          description: '''docker push'' is prohibited by Harbor if you set it to true.   '
        self_registration:
          type: boolean
          description: >-
            Whether the Harbor instance supports self-registration.  If it's set
            to false, admin need to add user to the instance.
        storage_per_project:
          type: string
          description: The default storage quota for the new created projects.
        token_expiration:
          type: integer
          description: 'The expiration time of the token for internal Registry, in minutes.'
        verify_remote_cert:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access a remote Harbor instance for replication.
        scan_all_policy:
          type: object
          properties:
            type:
              type: string
              description: >-
                The type of scan all policy, currently the valid values are
                "none" and "daily"
            parameter:
              type: object
              properties:
                daily_time:
                  type: integer
                  description: >-
                    The offset in seconds of UTC 0 o'clock, only valid when the
                    policy type is "daily"
              description: >-
                The parameters of the policy, the values are dependant on the
                type of the policy.
    ConfigurationsResponse:
      type: object
      properties:
        auth_mode:
          $ref: '#/components/schemas/StringConfigItem'
        count_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_from:
          $ref: '#/components/schemas/StringConfigItem'
        email_host:
          $ref: '#/components/schemas/StringConfigItem'
        email_port:
          $ref: '#/components/schemas/IntegerConfigItem'
        email_identity:
          $ref: '#/components/schemas/StringConfigItem'
        email_username:
          $ref: '#/components/schemas/StringConfigItem'
        email_ssl:
          $ref: '#/components/schemas/BoolConfigItem'
        email_insecure:
          $ref: '#/components/schemas/BoolConfigItem'
        ldap_url:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_filter:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_scope:
          type: integer
          description: '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
        ldap_uid:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_search_dn:
          type: string
          description: The DN of the user to do the search.
        ldap_timeout:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_group_attribute_name:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_base_dn:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_search_filter:
          $ref: '#/components/schemas/StringConfigItem'
        ldap_group_search_scope:
          $ref: '#/components/schemas/IntegerConfigItem'
        ldap_group_admin_dn:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_client_id:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_endpoint:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_name:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_scope:
          $ref: '#/components/schemas/StringConfigItem'
        oidc_verify_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        project_creation_restriction:
          $ref: '#/components/schemas/StringConfigItem'
        quota_per_project_enable:
          $ref: '#/components/schemas/BoolConfigItem'
        read_only:
          $ref: '#/components/schemas/BoolConfigItem'
        self_registration:
          $ref: '#/components/schemas/BoolConfigItem'
        storage_per_project:
          $ref: '#/components/schemas/IntegerConfigItem'
        token_expiration:
          $ref: '#/components/schemas/IntegerConfigItem'
        verify_remote_cert:
          $ref: '#/components/schemas/BoolConfigItem'
        scan_all_policy:
          type: object
          properties:
            type:
              type: string
              description: >-
                The type of scan all policy, currently the valid values are
                "none" and "daily"
            parameter:
              type: object
              properties:
                daily_time:
                  type: integer
                  description: >-
                    The offset in seconds of UTC 0 o'clock, only valid when the
                    policy type is "daily"
              description: >-
                The parameters of the policy, the values are dependant on the
                type of the policy.
    ProjectMemberEntity:
      type: object
      properties:
        id:
          type: integer
          description: the project member id
        project_id:
          type: integer
          description: the project id
        entity_name:
          type: string
          description: the name of the group member.
        role_name:
          type: string
          description: the name of the role
        role_id:
          type: integer
          description: the role id
        entity_id:
          type: integer
          description: >-
            the id of entity, if the member is a user, it is user_id in user
            table. if the member is a user group, it is the user group's ID in
            user_group table.
        entity_type:
          type: string
          description: 'the entity''s type, u for user entity, g for group entity.'
    ProjectMember:
      type: object
      properties:
        role_id:
          type: integer
          description: >-
            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for
            maintainer
        member_user:
          $ref: '#/components/schemas/UserEntity'
        member_group:
          $ref: '#/components/schemas/UserGroup'
    RoleRequest:
      type: object
      properties:
        role_id:
          type: integer
          description: >-
            The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for
            maintainer
    UserEntity:
      type: object
      properties:
        user_id:
          type: integer
          description: The ID of the user.
        username:
          type: string
          description: The name of the user.
    StringConfigItem:
      type: object
      properties:
        value:
          type: string
          description: The string value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
    BoolConfigItem:
      type: object
      properties:
        value:
          type: boolean
          description: The boolean value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
    IntegerConfigItem:
      type: object
      properties:
        value:
          type: integer
          description: The integer value of current config item
        editable:
          type: boolean
          description: The configure item can be updated or not
    ChartAPIError:
      description: The error object returned by chart repository API
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: The error message returned by the chart API
    UnauthorizedChartAPIError:
      description: Unauthorized
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    ForbiddenChartAPIError:
      description: Operation is forbidden or quota exceeded
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    InternalChartAPIError:
      description: Internal server error occurred
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    NotFoundChartAPIError:
      description: Not found
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    InsufficientStorageChartAPIError:
      description: Insufficient storage
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    BadRequestFormatedError:
      description: Bad request
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    ConflictFormatedError:
      description: Conflicts
      type: object
      allOf:
        - $ref: '#/components/schemas/ChartAPIError'
    Labels:
      type: array
      description: A list of label
      items:
        $ref: '#/components/schemas/Label'
    OverallHealthStatus:
      type: object
      description: The system health status
      properties:
        status:
          type: string
          description: >-
            The overall health status. It is "healthy" only when all the
            components' status are "healthy"
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentHealthStatus'
    ComponentHealthStatus:
      type: object
      description: The health status of component
      properties:
        name:
          type: string
          description: The component name
        status:
          type: string
          description: The health status of component
        error:
          type: string
          description: (optional) The error message when the status is "unhealthy"
    Permission:
      type: object
      description: The permission
      properties:
        resource:
          type: string
          description: The permission resoruce
        action:
          type: string
          description: The permission action
    Namespace:
      type: object
      description: The namespace of registry
      properties:
        name:
          type: string
          description: The name of namespace
        metadata:
          type: object
          description: The metadata of namespace
    QuotaSwitcher:
      type: object
      properties:
        enabled:
          type: boolean
          description: The quota is enable or disable
    Errors:
      description: >-
        The error array that describe the errors got during the handling of
        request
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      description: a model for all the error response coming from harbor
      type: object
      properties:
        code:
          type: string
          description: The error code
        message:
          type: string
          description: The error message
    Search:
      type: object
      properties:
        project:
          description: Search results of the projects that matched the filter keywords.
          type: array
          items:
            $ref: '#/components/schemas/Project'
        repository:
          description: Search results of the repositories that matched the filter keywords.
          type: array
          items:
            $ref: '#/components/schemas/SearchRepository'
        chart:
          description: Search results of the charts that macthed the filter keywords.
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          x-omitempty: true
          x-isnullable: true
    SearchRepository:
      type: object
      properties:
        project_id:
          type: integer
          description: The ID of the project that the repository belongs to
        project_name:
          type: string
          description: The name of the project that the repository belongs to
        project_public:
          type: boolean
          description: >-
            The flag to indicate the publicity of the project that the
            repository belongs to (1 is public, 0 is not)
        repository_name:
          type: string
          description: The name of the repository
        pull_count:
          type: integer
          description: The count how many times the repository is pulled
        artifact_count:
          type: integer
          description: The count of artifacts in the repository
    SearchResult:
      type: object
      description: The chart search result item
      properties:
        Name:
          type: string
          description: The chart name with repo name
        Score:
          type: integer
          description: The matched level
        Chart:
          $ref: '#/components/schemas/ChartVersion'
    ChartVersion:
      type: object
      description: A specified chart entry
      allOf:
        - $ref: '#/components/schemas/ChartMetadata'
        - type: object
          properties:
            created:
              type: string
              description: The created time of the chart entry
            removed:
              type: boolean
              description: A flag to indicate if the chart entry is removed
            digest:
              type: string
              description: The digest value of the chart entry
            urls:
              type: array
              description: The urls of the chart entry
              items:
                type: string
      properties:
        labels:
          type: array
          description: A list of label
          items:
            $ref: '#/components/schemas/Label'
    ChartMetadata:
      type: object
      description: The metadata of chart version
      required:
        - name
        - version
        - engine
        - icon
        - apiVersion
        - appVersion
      properties:
        name:
          type: string
          description: The name of the chart
        home:
          type: string
          description: The URL to the relevant project page
        sources:
          type: array
          description: The URL to the source code of chart
          items:
            type: string
        version:
          type: string
          description: A SemVer 2 version of chart
        description:
          type: string
          description: A one-sentence description of chart
        keywords:
          type: array
          description: A list of string keywords
          items:
            type: string
        engine:
          type: string
          description: The name of template engine
        icon:
          type: string
          description: The URL to an icon file
        apiVersion:
          type: string
          description: The API version of this chart
        appVersion:
          type: string
          description: The version of the application enclosed in the chart
        deprecated:
          type: boolean
          description: Whether or not this chart is deprecated
    Repository:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the repository
        project_id:
          type: integer
          format: int64
          description: The ID of the project that the repository belongs to
        name:
          type: string
          description: The name of the repository
        description:
          type: string
          description: The description of the repository
        artifact_count:
          type: integer
          format: int64
          description: The count of the artifacts inside the repository
        pull_count:
          type: integer
          format: int64
          description: The count that the artifact inside the repository pulled
        creation_time:
          type: string
          format: date-time
          description: The creation time of the repository
        update_time:
          type: string
          format: date-time
          description: The update time of the repository
    Artifact:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the artifact
        type:
          type: string
          description: 'The type of the artifact, e.g. image, chart, etc'
        media_type:
          type: string
          description: The media type of the artifact
        manifest_media_type:
          type: string
          description: The manifest media type of the artifact
        project_id:
          type: integer
          format: int64
          description: The ID of the project that the artifact belongs to
        repository_id:
          type: integer
          format: int64
          description: The ID of the repository that the artifact belongs to
        digest:
          type: string
          description: The digest of the artifact
        size:
          type: integer
          format: int64
          description: The size of the artifact
        icon:
          type: string
          description: The digest of the icon
        push_time:
          type: string
          format: date-time
          description: The push time of the artifact
        pull_time:
          type: string
          format: date-time
          description: The latest pull time of the artifact
        extra_attrs:
          $ref: '#/components/schemas/ExtraAttrs'
        annotations:
          $ref: '#/components/schemas/Annotations'
        references:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        addition_links:
          $ref: '#/components/schemas/AdditionLinks'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        scan_overview:
          $ref: '#/components/schemas/ScanOverview'
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the tag
        repository_id:
          type: integer
          format: int64
          description: The ID of the repository that the tag belongs to
        artifact_id:
          type: integer
          format: int64
          description: The ID of the artifact that the tag attached to
        name:
          type: string
          description: The name of the tag
        push_time:
          type: string
          format: date-time
          description: The push time of the tag
        pull_time:
          type: string
          format: date-time
          description: The latest pull time of the tag
        immutable:
          type: boolean
          x-omitempty: false
          description: The immutable status of the tag
        signed:
          type: boolean
          x-omitempty: false
          description: The attribute indicates whether the tag is signed or not
    ExtraAttrs:
      type: object
      additionalProperties:
        type: object
    Annotations:
      type: object
      additionalProperties:
        type: string
    AdditionLinks:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AdditionLink'
    AdditionLink:
      type: object
      properties:
        href:
          type: string
          description: The link of the addition
        absolute:
          type: boolean
          x-omitempty: false
          description: Determine whether the link is an absolute URL or not
    Reference:
      type: object
      properties:
        parent_id:
          type: integer
          format: int64
          description: The parent ID of the reference
        child_id:
          type: integer
          format: int64
          description: The child ID of the reference
        child_digest:
          type: string
          description: The digest of the child artifact
        platform:
          $ref: '#/components/schemas/Platform'
        annotations:
          $ref: '#/components/schemas/Annotations'
        urls:
          type: array
          description: The download URLs
          items:
            type: string
    Platform:
      type: object
      properties:
        architecture:
          type: string
          description: The architecture that the artifact applys to
        os:
          type: string
          description: The OS that the artifact applys to
        '''os.version''':
          type: string
          description: The version of the OS that the artifact applys to
        '''os.features''':
          type: array
          description: The features of the OS that the artifact applys to
          items:
            type: string
        variant:
          type: string
          description: The variant of the CPU
    Label:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the label
        name:
          type: string
          description: The name the label
        description:
          type: string
          description: The description the label
        color:
          type: string
          description: The color the label
        scope:
          type: string
          description: The scope the label
        project_id:
          type: integer
          format: int64
          description: The ID of project that the label belongs to
        creation_time:
          type: string
          format: date-time
          description: The creation time the label
        update_time:
          type: string
          format: date-time
          description: The update time of the label
    Scanner:
      type: object
      properties:
        name:
          type: string
          description: Name of the scanner
          example: Trivy
        vendor:
          type: string
          description: Name of the scanner provider
          example: Aqua Security
        version:
          type: string
          description: Version of the scanner adapter
          example: v0.9.1
    ScanOverview:
      type: object
      description: The scan overview attached in the metadata of tag
      additionalProperties:
        $ref: '#/components/schemas/NativeReportSummary'
    NativeReportSummary:
      type: object
      description: The summary for the native report
      properties:
        report_id:
          type: string
          description: id of the native scan report
          example: 5f62c830-f996-11e9-957f-0242c0a89008
        scan_status:
          type: string
          description: The status of the report generating process
          example: Success
        severity:
          type: string
          description: The overall severity
          example: High
        duration:
          type: integer
          format: int64
          description: The seconds spent for generating the report
          example: 300
        summary:
          $ref: '#/components/schemas/VulnerabilitySummary'
        start_time:
          type: string
          format: date-time
          description: The start time of the scan process that generating report
          example: '2006-01-02T14:04:05'
        end_time:
          type: string
          format: date-time
          description: The end time of the scan process that generating report
          example: '2006-01-02T15:04:05'
        complete_percent:
          type: integer
          description: >-
            The complete percent of the scanning which value is between 0 and
            100
          example: 100
        scanner:
          $ref: '#/components/schemas/Scanner'
    VulnerabilitySummary:
      type: object
      description: >
        VulnerabilitySummary contains the total number of the foun d
        vulnerabilities number and numbers of each severity level.
      properties:
        total:
          type: integer
          format: int
          description: The total number of the found vulnerabilities
          example: 500
          x-omitempty: false
        fixable:
          type: integer
          format: int
          description: The number of the fixable vulnerabilities
          example: 100
          x-omitempty: false
        summary:
          type: object
          description: Numbers of the vulnerabilities with different severity
          additionalProperties:
            type: integer
            format: int
            example: 10
          example:
            Critical: 5
            High: 5
          x-omitempty: false
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the audit log entry.
        username:
          type: string
          description: Username of the user in this log entry.
        resource:
          type: string
          description: Name of the repository in this log entry.
        resource_type:
          type: string
          description: Tag of the repository in this log entry.
        operation:
          type: string
          description: The operation against the repository in this log entry.
        op_time:
          type: string
          format: date-time
          example: '2006-01-02T15:04:05'
          description: The time when this operation is triggered.
    Metadata:
      type: object
      properties:
        id:
          type: string
          description: id
        name:
          type: string
          description: name
        icon:
          type: string
          description: icon
        maintainers:
          type: array
          description: maintainers
          items:
            type: string
        version:
          type: string
          description: version
        source:
          type: string
          description: source
    Instance:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID
        name:
          type: string
          description: Instance name
        description:
          type: string
          description: Description of instance
        vendor:
          type: string
          description: 'Based on which driver, identified by ID'
        endpoint:
          type: string
          description: The service endpoint of this instance
        auth_mode:
          type: string
          description: The authentication way supported
        auth_info:
          type: object
          description: The auth credential data if exists
          additionalProperties:
            type: string
        status:
          type: string
          description: The health status
        enabled:
          type: boolean
          description: Whether the instance is activated or not
          x-omitempty: false
        default:
          type: boolean
          description: Whether the instance is default or not
          x-omitempty: false
        insecure:
          type: boolean
          description: Whether the instance endpoint is insecure or not
          x-omitempty: false
        setup_timestamp:
          type: integer
          format: int64
          description: The timestamp of instance setting up
    PreheatPolicy:
      type: object
      properties:
        id:
          type: integer
          description: The ID of preheat policy
        name:
          type: string
          description: The Name of preheat policy
        description:
          type: string
          description: The Description of preheat policy
        project_id:
          type: integer
          description: The ID of preheat policy project
        provider_id:
          type: integer
          description: The ID of preheat policy provider
        provider_name:
          type: string
          description: The Name of preheat policy provider
        filters:
          type: string
          description: The Filters of preheat policy
        trigger:
          type: string
          description: The Trigger of preheat policy
        enabled:
          type: boolean
          description: Whether the preheat policy enabled
          x-omitempty: false
        creation_time:
          type: string
          format: date-time
          description: The Create Time of preheat policy
        update_time:
          type: string
          format: date-time
          description: The Update Time of preheat policy
    Metrics:
      type: object
      properties:
        task_count:
          type: integer
          description: The count of task
        success_task_count:
          type: integer
          description: The count of success task
        error_task_count:
          type: integer
          description: The count of error task
        pending_task_count:
          type: integer
          description: The count of pending task
        running_task_count:
          type: integer
          description: The count of running task
        scheduled_task_count:
          type: integer
          description: The count of scheduled task
        stopped_task_count:
          type: integer
          description: The count of stopped task
    Execution:
      type: object
      properties:
        id:
          type: integer
          description: The ID of execution
        vendor_type:
          type: string
          description: The vendor type of execution
        vendor_id:
          type: integer
          description: The vendor id of execution
        status:
          type: string
          description: The status of execution
        status_message:
          type: string
          description: The status message of execution
        metrics:
          $ref: '#/components/schemas/Metrics'
        trigger:
          type: string
          description: The trigger of execution
        extra_attrs:
          $ref: '#/components/schemas/ExtraAttrs'
        start_time:
          type: string
          description: The start time of execution
        end_time:
          type: string
          description: The end time of execution
    Task:
      type: object
      properties:
        id:
          type: integer
          description: The ID of task
        execution_id:
          type: integer
          description: The ID of task execution
        status:
          type: string
          description: The status of task
        status_message:
          type: string
          description: The status message of task
        run_count:
          type: integer
          format: int32
          description: The count of task run
        extra_attrs:
          $ref: '#/components/schemas/ExtraAttrs'
        creation_time:
          type: string
          description: The creation time of task
        update_time:
          type: string
          description: The update time of task
        start_time:
          type: string
          description: The start time of task
        end_time:
          type: string
          description: The end time of task
    ProviderUnderProject:
      type: object
      properties:
        id:
          type: integer
        provider:
          type: string
        enabled:
          type: boolean
        default:
          type: boolean
    Icon:
      type: object
      properties:
        content-type:
          type: string
          description: The content type of the icon
        content:
          type: string
          description: The base64 encoded content of the icon
    ProjectReq:
      type: object
      properties:
        project_name:
          type: string
          description: The name of the project.
        public:
          type: boolean
          description: 'deprecated, reserved for project creation in replication'
          nullable: true
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        cve_allowlist:
          $ref: '#/components/schemas/CVEAllowlist'
        storage_limit:
          type: integer
          format: int64
          description: The storage quota of the project.
          nullable: true
        registry_id:
          type: integer
          format: int64
          description: The ID of referenced registry when creating the proxy cache project
          nullable: true
    Project:
      type: object
      properties:
        project_id:
          type: integer
          format: int32
          description: Project ID
        owner_id:
          type: integer
          format: int32
          description: The owner ID of the project always means the creator of the project.
        name:
          type: string
          description: The name of the project.
        registry_id:
          type: integer
          format: int64
          description: >-
            The ID of referenced registry when the project is a proxy cache
            project.
        creation_time:
          type: string
          format: date-time
          description: The creation time of the project.
        update_time:
          type: string
          format: date-time
          description: The update time of the project.
        deleted:
          type: boolean
          description: A deletion mark of the project.
        owner_name:
          type: string
          description: The owner name of the project.
        togglable:
          type: boolean
          description: >-
            Correspond to the UI about whether the project's publicity is
            updatable (for UI)
        current_user_role_id:
          type: integer
          description: >-
            The role ID with highest permission of the current user who
            triggered the API (for UI).  This attribute is deprecated and will
            be removed in future versions.
        current_user_role_ids:
          type: array
          nullable: true
          x-omitempty: true
          items:
            type: integer
            format: int32
          description: >-
            The list of role ID of the current user who triggered the API (for
            UI)
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        chart_count:
          type: integer
          description: The total number of charts under this project.
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        cve_allowlist:
          $ref: '#/components/schemas/CVEAllowlist'
    ProjectDeletable:
      type: object
      properties:
        deletable:
          type: boolean
          description: Whether the project can be deleted.
        message:
          type: string
          description: The detail message when the project can not be deleted.
    ProjectMetadata:
      type: object
      properties:
        public:
          type: string
          description: >-
            The public status of the project. The valid values are "true",
            "false".
        enable_content_trust:
          type: string
          description: >-
            Whether content trust is enabled or not. If it is enabled, user
            can't pull unsigned images from this project. The valid values are
            "true", "false".
          nullable: true
        prevent_vul:
          type: string
          description: >-
            Whether prevent the vulnerable images from running. The valid values
            are "true", "false".
          nullable: true
        severity:
          type: string
          description: >-
            If the vulnerability is high than severity defined here, the images
            can't be pulled. The valid values are "none", "low", "medium",
            "high", "critical".
          nullable: true
        auto_scan:
          type: string
          description: >-
            Whether scan images automatically when pushing. The valid values are
            "true", "false".
          nullable: true
        reuse_sys_cve_allowlist:
          type: string
          description: >-
            Whether this project reuse the system level CVE allowlist as the
            allowlist of its own.  The valid values are "true", "false". If it
            is set to "true" the actual allowlist associate with this project,
            if any, will be ignored.
          nullable: true
        retention_id:
          type: string
          description: The ID of the tag retention policy for the project
          nullable: true
    ProjectSummary:
      type: object
      properties:
        repo_count:
          type: integer
          description: The number of the repositories under this project.
        chart_count:
          type: integer
          description: The total number of charts under this project.
        project_admin_count:
          type: integer
          description: The total number of project admin members.
        maintainer_count:
          type: integer
          description: The total number of maintainer members.
        developer_count:
          type: integer
          description: The total number of developer members.
        guest_count:
          type: integer
          description: The total number of guest members.
        limited_guest_count:
          type: integer
          description: The total number of limited guest members.
        quota:
          $ref: '#/components/schemas/ProjectSummaryQuota'
        registry:
          $ref: '#/components/schemas/Registry'
    ProjectSummaryQuota:
      type: object
      properties:
        hard:
          $ref: '#/components/schemas/ResourceList'
        used:
          $ref: '#/components/schemas/ResourceList'
    ProjectScanner:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          description: The identifier of the scanner registration
    CVEAllowlist:
      type: object
      description: The CVE Allowlist for system or project
      properties:
        id:
          type: integer
          description: ID of the allowlist
        project_id:
          type: integer
          description: >-
            ID of the project which the allowlist belongs to.  For system level
            allowlist this attribute is zero.
        expires_at:
          type: integer
          description: >-
            the time for expiration of the allowlist, in the form of seconds
            since epoch.  This is an optional attribute, if it's not set the CVE
            allowlist does not expire.
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CVEAllowlistItem'
        creation_time:
          type: string
          format: date-time
          description: The creation time of the allowlist.
        update_time:
          type: string
          format: date-time
          description: The update time of the allowlist.
    CVEAllowlistItem:
      type: object
      description: The item in CVE allowlist
      properties:
        cve_id:
          type: string
          description: 'The ID of the CVE, such as "CVE-2019-10164"'
    ReplicationPolicy:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The policy ID.
        name:
          type: string
          description: The policy name.
        description:
          type: string
          description: The description of the policy.
        src_registry:
          $ref: '#/components/schemas/Registry'
        dest_registry:
          $ref: '#/components/schemas/Registry'
        dest_namespace:
          type: string
          description: The destination namespace.
        trigger:
          $ref: '#/components/schemas/ReplicationTrigger'
        filters:
          type: array
          description: The replication policy filter array.
          items:
            $ref: '#/components/schemas/ReplicationFilter'
        replicate_deletion:
          type: boolean
          description: Whether to replicate the deletion operation.
        deletion:
          type: boolean
          description: >-
            Deprecated, use "replicate_deletion" instead. Whether to replicate
            the deletion operation.
        override:
          type: boolean
          description: Whether to override the resources on the destination registry.
        enabled:
          type: boolean
          description: Whether the policy is enabled or not.
        creation_time:
          type: string
          format: date-time
          description: The create time of the policy.
        update_time:
          type: string
          format: date-time
          description: The update time of the policy.
    ReplicationTrigger:
      type: object
      properties:
        type:
          type: string
          description: >-
            The replication policy trigger type. The valid values are manual,
            event_based and scheduled.
        trigger_settings:
          $ref: '#/components/schemas/ReplicationTriggerSettings'
    ReplicationTriggerSettings:
      type: object
      properties:
        cron:
          type: string
          description: The cron string for scheduled trigger
    ReplicationFilter:
      type: object
      properties:
        type:
          type: string
          description: The replication policy filter type.
        value:
          type: object
          description: The value of replication policy filter.
    RegistryCredential:
      type: object
      properties:
        type:
          type: string
          description: 'Credential type, such as ''basic'', ''oauth''.'
        access_key:
          type: string
          description: 'Access key, e.g. user name when credential type is ''basic''.'
        access_secret:
          type: string
          description: 'Access secret, e.g. password when credential type is ''basic''.'
    Registry:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The registry ID.
          x-omitempty: false
        url:
          type: string
          description: The registry URL string.
        name:
          type: string
          description: The registry name.
        credential:
          $ref: '#/components/schemas/RegistryCredential'
        type:
          type: string
          description: 'Type of the registry, e.g. ''harbor''.'
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
        description:
          type: string
          description: Description of the registry.
        status:
          type: string
          description: Health status of the registry.
        creation_time:
          type: string
          format: date-time
          description: The create time of the policy.
        update_time:
          type: string
          format: date-time
          description: The update time of the policy.
    RegistryUpdate:
      type: object
      properties:
        name:
          type: string
          description: The registry name.
          nullable: true
        description:
          type: string
          description: Description of the registry.
          nullable: true
        url:
          type: string
          description: The registry URL.
          nullable: true
        credential_type:
          type: string
          description: 'Credential type of the registry, e.g. ''basic''.'
          nullable: true
        access_key:
          type: string
          description: The registry access key.
          nullable: true
        access_secret:
          type: string
          description: The registry access secret.
          nullable: true
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
          nullable: true
    RegistryPing:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The registry ID.
          nullable: true
        type:
          type: string
          description: 'Type of the registry, e.g. ''harbor''.'
          nullable: true
        url:
          type: string
          description: The registry URL.
          nullable: true
        credential_type:
          type: string
          description: 'Credential type of the registry, e.g. ''basic''.'
          nullable: true
        access_key:
          type: string
          description: The registry access key.
          nullable: true
        access_secret:
          type: string
          description: The registry access secret.
          nullable: true
        insecure:
          type: boolean
          description: >-
            Whether or not the certificate will be verified when Harbor tries to
            access the server.
          nullable: true
    RegistryInfo:
      type: object
      description: >-
        The registry info contains the base info and capability declarations of
        the registry
      properties:
        type:
          type: string
          description: The registry type
        description:
          type: string
          description: The description
        supported_resource_filters:
          type: array
          description: The filters that the registry supports
          items:
            $ref: '#/components/schemas/FilterStyle'
        supported_triggers:
          type: array
          description: The triggers that the registry supports
          items:
            type: string
    RegistryProviderInfo:
      type: object
      description: >-
        The registry provider info contains the base info and capability
        declarations of the registry provider
      properties:
        endpoint_pattern:
          $ref: '#/components/schemas/RegistryProviderEndpointPattern'
        credential_pattern:
          $ref: '#/components/schemas/RegistryProviderCredentialPattern'
    RegistryProviderEndpointPattern:
      type: object
      description: The registry endpoint pattern
      properties:
        endpoint_type:
          type: string
          description: The endpoint type
        endpoints:
          type: array
          description: The endpoint list
          items:
            $ref: '#/components/schemas/RegistryEndpoint'
    RegistryProviderCredentialPattern:
      type: object
      description: The registry credential pattern
      properties:
        access_key_type:
          type: string
          description: The access key type
        access_key_data:
          type: string
          description: The access key data
        access_secret_type:
          type: string
          description: The access secret type
        access_secret_data:
          type: string
          description: The access secret data
    RegistryEndpoint:
      type: object
      description: The style of the resource filter
      properties:
        key:
          type: string
          description: The endpoint key
        value:
          type: string
          description: The endpoint value
    FilterStyle:
      type: object
      description: The style of the resource filter
      properties:
        type:
          type: string
          description: The filter type
        style:
          type: string
          description: The filter style
        values:
          type: array
          description: The filter values
          items:
            type: string
    ResourceList:
      type: object
      additionalProperties:
        type: integer
        format: int64
      x-go-type:
        type: ResourceList
        import:
          package: github.com/goharbor/harbor/src/pkg/quota/types
    ReplicationExecution:
      type: object
      description: The replication execution
      properties:
        id:
          type: integer
          description: The ID of the execution
        policy_id:
          type: integer
          description: The ID if the policy that the execution belongs to
        status:
          type: string
          description: The status of the execution
        trigger:
          type: string
          description: The trigger mode
        start_time:
          type: string
          format: date-time
          description: The start time
        end_time:
          type: string
          format: date-time
          description: The end time
        status_text:
          type: string
          x-omitempty: false
          description: The status text
        total:
          type: integer
          x-omitempty: false
          description: The total count of all executions
        failed:
          type: integer
          x-omitempty: false
          description: The count of failed executions
        succeed:
          type: integer
          x-omitempty: false
          description: The count of succeed executions
        in_progress:
          type: integer
          x-omitempty: false
          description: The count of in_progress executions
        stopped:
          type: integer
          x-omitempty: false
          description: The count of stopped executions
    StartReplicationExecution:
      type: object
      properties:
        policy_id:
          type: integer
          format: int64
          description: The ID of policy that the execution belongs to.
    ReplicationTask:
      type: object
      description: The replication task
      properties:
        id:
          type: integer
          description: The ID of the task
        execution_id:
          type: integer
          description: The ID of the execution that the task belongs to
        status:
          type: string
          description: The status of the task
        job_id:
          type: string
          description: The ID of the underlying job that the task related to
        operation:
          type: string
          description: The operation of the task
        resource_type:
          type: string
          description: The type of the resource that the task operates
        src_resource:
          type: string
          description: The source resource that the task operates
        dst_resource:
          type: string
          description: The destination resource that the task operates
        start_time:
          type: string
          format: date-time
          description: The start time of the task
        end_time:
          type: string
          format: date-time
          description: The end time of the task
    Robot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the robot
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: The description of the robot
        secret:
          type: string
          description: The secret of the robot
        level:
          type: string
          description: 'The level of the robot, project or system'
        duration:
          type: integer
          format: int64
          description: The duration of the robot in days
        editable:
          type: boolean
          x-omitempty: false
          description: The editable status of the robot
        disable:
          type: boolean
          x-omitempty: false
          description: The disable status of the robot
        expires_at:
          type: integer
          format: int64
          description: The expiration data of the robot
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/RobotPermission'
        creation_time:
          type: string
          format: date-time
          description: The creation time of the robot.
        update_time:
          type: string
          format: date-time
          description: The update time of the robot.
    RobotCreate:
      type: object
      description: The request for robot account creation.
      properties:
        name:
          type: string
          description: The name of the tag
        description:
          type: string
          description: The description of the robot
        secret:
          type: string
          description: The secret of the robot
        level:
          type: string
          description: 'The level of the robot, project or system'
        disable:
          type: boolean
          description: The disable status of the robot
        duration:
          type: integer
          format: int64
          description: The duration of the robot in days
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/RobotPermission'
    RobotCreated:
      type: object
      description: The response for robot account creation.
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the robot
        name:
          type: string
          description: The name of the tag
        secret:
          type: string
          description: The secret of the robot
        creation_time:
          type: string
          format: date-time
          description: The creation time of the robot.
        expires_at:
          type: integer
          format: int64
          description: The expiration data of the robot
    RobotSec:
      type: object
      description: The response for refresh/update robot account secret.
      properties:
        secret:
          type: string
          description: The secret of the robot
    RobotPermission:
      type: object
      properties:
        kind:
          type: string
          description: The kind of the permission
        namespace:
          type: string
          description: The namespace of the permission
        access:
          type: array
          items:
            $ref: '#/components/schemas/Access'
    Access:
      type: object
      properties:
        resource:
          type: string
          description: The resource of the access
        action:
          type: string
          description: The action of the access
        effect:
          type: string
          description: The effect of the access
    RobotCreateV1:
      type: object
      properties:
        name:
          type: string
          description: The name of robot account
        description:
          type: string
          description: The description of robot account
        expires_at:
          type: integer
          description: >-
            The expiration time on or after which the JWT MUST NOT be accepted
            for processing.
        access:
          type: array
          description: The permission of robot account
          items:
            $ref: '#/components/schemas/Access'
    Storage:
      type: object
      properties:
        total:
          type: integer
          format: uint64
          description: Total volume size.
        free:
          type: integer
          format: uint64
          description: Free volume size.
    GeneralInfo:
      type: object
      properties:
        with_notary:
          type: boolean
          x-omitempty: true
          description: If the Harbor instance is deployed with nested notary.
          nullable: true
        with_chartmuseum:
          type: boolean
          x-omitempty: true
          description: If the Harbor instance is deployed with nested chartmuseum.
          nullable: true
        registry_url:
          type: string
          x-omitempty: true
          description: >-
            The url of registry against which the docker command should be
            issued.
          nullable: true
        external_url:
          type: string
          x-omitempty: true
          description: 'The external URL of Harbor, with protocol.'
          nullable: true
        auth_mode:
          type: string
          x-omitempty: true
          description: The auth mode of current Harbor instance.
          nullable: true
        project_creation_restriction:
          type: string
          x-omitempty: true
          description: >-
            Indicate who can create projects, it could be 'adminonly' or
            'everyone'.
          nullable: true
        self_registration:
          type: boolean
          x-omitempty: true
          description: >-
            Indicate whether the Harbor instance enable user to register
            himself.
          nullable: true
        has_ca_root:
          type: boolean
          x-omitempty: true
          description: >-
            Indicate whether there is a ca root cert file ready for download in
            the file system.
          nullable: true
        harbor_version:
          type: string
          x-omitempty: true
          description: The build version of Harbor.
          nullable: true
        registry_storage_provider_name:
          type: string
          x-omitempty: true
          description: The storage provider's name of Harbor registry
          nullable: true
        read_only:
          type: boolean
          x-omitempty: true
          description: The flag to indicate whether Harbor is in readonly mode.
          nullable: true
        notification_enable:
          type: boolean
          x-omitempty: true
          description: >-
            The flag to indicate whether notification mechanism is enabled on
            Harbor instance.
          nullable: true
        authproxy_settings:
          $ref: '#/components/schemas/AuthproxySetting'
    AuthproxySetting:
      type: object
      properties:
        endpoint:
          type: string
          description: >-
            The fully qualified URI of login endpoint of authproxy, such as
            'https://192.168.1.2:8443/login'
        tokenreivew_endpoint:
          type: string
          description: >-
            The fully qualified URI of token review endpoint of authproxy, such
            as 'https://192.168.1.2:8443/tokenreview'
        skip_search:
          type: boolean
          description: >-
            The flag to determine whether Harbor can skip search the user/group
            when adding him as a member.
        verify_cert:
          type: boolean
          description: >-
            The flag to determine whether Harbor should verify the certificate
            when connecting to the auth proxy.
        server_certificate:
          type: string
          description: The certificate to be pinned when connecting auth proxy.
    SystemInfo:
      type: object
      properties:
        storage:
          type: array
          description: The storage of system.
          items:
            $ref: '#/components/schemas/Storage'
    GCHistory:
      type: object
      properties:
        id:
          type: integer
          description: the id of gc job.
        job_name:
          type: string
          description: the job name of gc job.
        job_kind:
          type: string
          description: the job kind of gc job.
        job_parameters:
          type: string
          description: the job parameters of gc job.
        schedule:
          $ref: '#/components/schemas/ScheduleObj'
        job_status:
          type: string
          description: the status of gc job.
        deleted:
          type: boolean
          description: if gc job was deleted.
        creation_time:
          type: string
          format: date-time
          description: the creation time of gc job.
        update_time:
          type: string
          format: date-time
          description: the update time of gc job.
    Schedule:
      type: object
      properties:
        id:
          type: integer
          description: The id of the schedule.
          readOnly: true
        status:
          type: string
          description: The status of the schedule.
          readOnly: true
        creation_time:
          type: string
          format: date-time
          description: the creation time of the schedule.
          readOnly: true
        update_time:
          type: string
          format: date-time
          description: the update time of the schedule.
          readOnly: true
        schedule:
          $ref: '#/components/schemas/ScheduleObj'
        parameters:
          type: object
          description: The parameters of schedule job
          additionalProperties:
            type: object
    ScheduleObj:
      type: object
      properties:
        type:
          type: string
          description: >
            The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly',
            'Custom', 'Manual' and 'None'.

            'Manual' means to trigger it right away and 'None' means to cancel
            the schedule.
          enum:
            - Hourly
            - Daily
            - Weekly
            - Custom
            - Manual
            - None
        cron:
          type: string
          description: 'A cron expression, a time-based job scheduler.'
    Stats:
      type: object
      description: Stats provides the overall progress of the scan all process.
      properties:
        total:
          type: integer
          format: int
          description: The total number of scan processes triggered by the scan all action
          example: 100
          x-omitempty: false
        completed:
          type: integer
          format: int
          description: >-
            The number of the finished scan processes triggered by the scan all
            action
          example: 90
          x-omitempty: false
        metrics:
          type: object
          description: The metrics data for the each status
          additionalProperties:
            type: integer
            format: int
            example: 10
          example:
            Success: 5
            Error: 2
            Running: 3
        ongoing:
          type: boolean
          description: A flag indicating job status of scan all.
          x-omitempty: false
        trigger:
          type: string
          description: The trigger of the scan all job.
          enum:
            - Manual
            - Schedule
            - Event
    RetentionMetadata:
      type: object
      description: the tag retention metadata
      properties:
        templates:
          type: array
          description: templates
          items:
            $ref: '#/components/schemas/RetentionRuleMetadata'
        scope_selectors:
          type: array
          description: supported scope selectors
          items:
            $ref: '#/components/schemas/RetentionSelectorMetadata'
        tag_selectors:
          type: array
          description: supported tag selectors
          items:
            $ref: '#/components/schemas/RetentionSelectorMetadata'
    RetentionRuleMetadata:
      type: object
      description: the tag retention rule metadata
      properties:
        rule_template:
          type: string
          description: rule id
        display_text:
          type: string
          description: rule display text
        action:
          type: string
          description: rule action
        params:
          type: array
          description: rule params
          items:
            $ref: '#/components/schemas/RetentionRuleParamMetadata'
    RetentionRuleParamMetadata:
      type: object
      description: rule param
      properties:
        type:
          type: string
        unit:
          type: string
        required:
          type: boolean
    RetentionSelectorMetadata:
      type: object
      description: retention selector
      properties:
        display_text:
          type: string
        kind:
          type: string
        decorations:
          type: array
          items:
            type: string
    RetentionPolicy:
      type: object
      description: retention policy
      properties:
        id:
          type: integer
          format: int64
        algorithm:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/RetentionRule'
        trigger:
          $ref: '#/components/schemas/RetentionRuleTrigger'
        scope:
          $ref: '#/components/schemas/RetentionPolicyScope'
    RetentionRuleTrigger:
      type: object
      properties:
        kind:
          type: string
        settings:
          type: object
        references:
          type: object
    RetentionPolicyScope:
      type: object
      properties:
        level:
          type: string
        ref:
          type: integer
    RetentionRule:
      type: object
      properties:
        id:
          type: integer
        priority:
          type: integer
        disabled:
          type: boolean
        action:
          type: string
        template:
          type: string
        params:
          type: object
          additionalProperties:
            type: object
        tag_selectors:
          type: array
          items:
            $ref: '#/components/schemas/RetentionSelector'
        scope_selectors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/RetentionSelector'
    RetentionSelector:
      type: object
      properties:
        kind:
          type: string
        decoration:
          type: string
        pattern:
          type: string
        extras:
          type: string
    RetentionExecution:
      type: object
      properties:
        id:
          type: integer
          format: int64
        policy_id:
          type: integer
          format: int64
        start_time:
          type: string
        end_time:
          type: string
        status:
          type: string
        trigger:
          type: string
        dry_run:
          type: boolean
    RetentionExecutionTask:
      type: object
      properties:
        id:
          type: integer
          format: int64
        execution_id:
          type: integer
          format: int64
        repository:
          type: string
        job_id:
          type: string
        status:
          type: string
        status_code:
          type: integer
          x-omitempty: false
        status_revision:
          type: integer
          format: int64
        start_time:
          type: string
        end_time:
          type: string
        total:
          type: integer
          x-omitempty: false
        retained:
          type: integer
          x-omitempty: false
    QuotaUpdateReq:
      type: object
      properties:
        hard:
          $ref: '#/components/schemas/ResourceList'
    QuotaRefObject:
      type: object
      additionalProperties: {}
    Quota:
      type: object
      description: The quota object
      properties:
        id:
          type: integer
          description: ID of the quota
        ref:
          $ref: '#/components/schemas/QuotaRefObject'
        hard:
          $ref: '#/components/schemas/ResourceList'
        used:
          $ref: '#/components/schemas/ResourceList'
        creation_time:
          type: string
          format: date-time
          description: the creation time of the quota
        update_time:
          type: string
          format: date-time
          description: the update time of the quota
    ScannerRegistration:
      type: object
      description: >
        Registration represents a named configuration for invoking a scanner via
        its adapter.
      properties:
        uuid:
          type: string
          description: The unique identifier of this registration.
        name:
          type: string
          example: Trivy
          description: The name of this registration.
        description:
          type: string
          description: An optional description of this registration.
          example: >
            A free-to-use tool that scans container images for package
            vulnerabilities.
          x-omitempty: false
        url:
          type: string
          format: url
          description: A base URL of the scanner adapter
          example: 'http://harbor-scanner-trivy:8080'
        disabled:
          type: boolean
          default: false
          description: Indicate whether the registration is enabled or not
          x-omitempty: false
        is_default:
          type: boolean
          default: false
          description: Indicate if the registration is set as the system default one
          x-omitempty: false
        auth:
          type: string
          default: ''
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
          example: Bearer
          x-omitempty: false
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
          x-omitempty: false
        skip_certVerify:
          type: boolean
          default: false
          description: >-
            Indicate if skip the certificate verification when sending HTTP
            requests
          x-omitempty: false
        use_internal_addr:
          type: boolean
          default: false
          description: >-
            Indicate whether use internal registry addr for the scanner to pull
            content or not
          x-omitempty: false
        create_time:
          type: string
          format: date-time
          description: The creation time of this registration
        update_time:
          type: string
          format: date-time
          description: The update time of this registration
        adapter:
          type: string
          description: Optional property to describe the name of the scanner registration
          example: Clair
        vendor:
          type: string
          description: Optional property to describe the vendor of the scanner registration
          example: CentOS
        version:
          type: string
          description: >-
            Optional property to describe the version of the scanner
            registration
          example: 1.0.1
        health:
          type: string
          default: ''
          description: Indicate the healthy of the registration
          example: healthy
    ScannerRegistrationReq:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: The name of this registration
          example: Trivy
        description:
          type: string
          description: An optional description of this registration.
          example: >
            A free-to-use tool that scans container images for package
            vulnerabilities.
        url:
          type: string
          format: uri
          description: A base URL of the scanner adapter.
          example: 'http://harbor-scanner-trivy:8080'
        auth:
          type: string
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
          example: Bearer
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
        skip_certVerify:
          type: boolean
          default: false
          description: >-
            Indicate if skip the certificate verification when sending HTTP
            requests
        use_internal_addr:
          type: boolean
          default: false
          description: >-
            Indicate whether use internal registry addr for the scanner to pull
            content or not
        disabled:
          type: boolean
          default: false
          description: Indicate whether the registration is enabled or not
    ScannerRegistrationSettings:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: The name of this registration
          example: Trivy
        url:
          type: string
          format: uri
          description: A base URL of the scanner adapter.
          example: 'http://harbor-scanner-trivy:8080'
        auth:
          type: string
          default: ''
          description: >
            Specify what authentication approach is adopted for the HTTP
            communications.

            Supported types Basic", "Bearer" and api key header
            "X-ScannerAdapter-API-Key"
        access_credential:
          type: string
          description: >
            An optional value of the HTTP Authorization header sent with each
            request to the Scanner Adapter API.
          example: 'Bearer: JWTTOKENGOESHERE'
    IsDefault:
      type: object
      properties:
        is_default:
          type: boolean
          description: A flag indicating whether a scanner registration is default.
    ScannerCapability:
      type: object
      properties:
        consumes_mime_types:
          type: array
          items:
            type: string
            example: application/vnd.docker.distribution.manifest.v2+json
        produces_mime_types:
          type: array
          items:
            type: string
            example: >-
              application/vnd.scanner.adapter.vuln.report.harbor+json;
              version=1.0
    ScannerAdapterMetadata:
      type: object
      description: The metadata info of the scanner adapter
      properties:
        scanner:
          $ref: '#/components/schemas/Scanner'
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/ScannerCapability'
        properties:
          type: object
          additionalProperties:
            type: string
          example:
            harbor.scanner-adapter/registry-authorization-type: Bearer
      x-go-type:
        type: ScannerAdapterMetadata
        import:
          package: github.com/goharbor/harbor/src/pkg/scan/rest/v1
          alias: v1
    ImmutableRule:
      type: object
      properties:
        id:
          type: integer
        priority:
          type: integer
        disabled:
          type: boolean
        action:
          type: string
        template:
          type: string
        params:
          type: object
          additionalProperties:
            type: object
        tag_selectors:
          type: array
          items:
            $ref: '#/components/schemas/ImmutableSelector'
        scope_selectors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ImmutableSelector'
    ImmutableSelector:
      type: object
      properties:
        kind:
          type: string
        decoration:
          type: string
        pattern:
          type: string
        extras:
          type: string
    LdapConf:
      type: object
      description: The ldap configure properties
      properties:
        ldap_url:
          type: string
          description: The url of ldap service.
        ldap_search_dn:
          type: string
          description: The search dn of ldap service.
        ldap_search_password:
          type: string
          description: The search password of ldap service.
        ldap_base_dn:
          type: string
          description: The base dn of ldap service.
        ldap_filter:
          type: string
          description: The serach filter of ldap service.
        ldap_uid:
          type: string
          description: The serach uid from ldap service attributes.
        ldap_scope:
          type: integer
          format: int64
          description: The serach scope of ldap service.
        ldap_connection_timeout:
          type: integer
          format: int64
          description: The connect timeout of ldap service(second).
        ldap_verify_cert:
          type: boolean
          description: Verify Ldap server certificate.
    LdapPingResult:
      type: object
      description: The ldap ping result
      properties:
        success:
          type: boolean
          description: Test success
        message:
          type: string
          description: The ping operation output message.
    LdapImportUsers:
      type: object
      properties:
        ldap_uid_list:
          type: array
          description: selected uid list
          items:
            type: string
    LdapFailedImportUser:
      type: object
      properties:
        uid:
          type: string
          description: the uid can't add to system.
        error:
          type: string
          description: fail reason.
    LdapUser:
      type: object
      properties:
        username:
          type: string
          description: ldap username.
        realname:
          type: string
          description: The user realname from "uid" or "cn" attribute.
        email:
          type: string
          description: The user email address from "mail" or "email" attribute.
    UserGroup:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the user group
        group_name:
          type: string
          description: The name of the user group
        group_type:
          type: integer
          description: 'The group type, 1 for LDAP group, 2 for HTTP group.'
        ldap_group_dn:
          type: string
          description: The DN of the LDAP group if group type is 1 (LDAP group).
    SupportedWebhookEventTypes:
      type: object
      description: Supportted webhook event types and notify types.
      properties:
        event_type:
          type: array
          items:
            $ref: '#/components/schemas/EventType'
        notify_type:
          type: array
          items:
            $ref: '#/components/schemas/NotifyType'
    EventType:
      type: string
      description: Webhook supportted event type.
      example: pullImage
    NotifyType:
      type: string
      description: Webhook supportted notify type.
      example: http
    WebhookTargetObject:
      type: object
      description: The webhook policy target object.
      properties:
        type:
          type: string
          description: The webhook target notify type.
        address:
          type: string
          description: The webhook target address.
        auth_header:
          type: string
          description: The webhook auth header.
        skip_cert_verify:
          type: boolean
          description: Whether or not to skip cert verify.
    WebhookPolicy:
      type: object
      description: The webhook policy object
      properties:
        id:
          type: integer
          format: int64
          description: The webhook policy ID.
        name:
          type: string
          description: The name of webhook policy.
        description:
          type: string
          description: The description of webhook policy.
        project_id:
          type: integer
          description: The project ID of webhook policy.
        targets:
          type: array
          items:
            $ref: '#/components/schemas/WebhookTargetObject'
        event_types:
          type: array
          items:
            type: string
        creator:
          type: string
          description: The creator of the webhook policy.
        creation_time:
          type: string
          description: The create time of the webhook policy.
          format: date-time
        update_time:
          type: string
          description: The update time of the webhook policy.
          format: date-time
        enabled:
          type: boolean
          description: Whether the webhook policy is enabled or not.
          x-omitempty: false
    WebhookLastTrigger:
      type: object
      description: The webhook policy and last trigger time group by event type.
      properties:
        policy_name:
          type: string
          description: The webhook policy name.
        event_type:
          type: string
          description: The webhook event type.
        enabled:
          type: boolean
          description: Whether or not the webhook policy enabled.
        creation_time:
          type: string
          description: The creation time of webhook policy.
          format: date-time
        last_trigger_time:
          type: string
          description: The last trigger time of webhook policy.
          format: date-time
    WebhookJob:
      type: object
      description: The webhook job.
      properties:
        id:
          type: integer
          format: int64
          description: The webhook job ID.
        policy_id:
          type: integer
          format: int64
          description: The webhook policy ID.
        event_type:
          type: string
          description: The webhook job event type.
        notify_type:
          type: string
          description: The webhook job notify type.
        status:
          type: string
          description: The webhook job status.
        job_detail:
          type: string
          description: The webhook job notify detailed data.
        creation_time:
          type: string
          description: The webhook job creation time.
          format: date-time
        update_time:
          type: string
          description: The webhook job update time.
          format: date-time
