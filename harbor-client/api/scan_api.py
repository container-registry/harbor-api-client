"""
    Harbor API

    These APIs provide services for manipulating Harbor project.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from harbor-client.api_client import ApiClient, Endpoint as _Endpoint
from harbor-client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from harbor-client.model.errors import Errors


class ScanApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_report_log(
            self,
            project_name,
            repository_name,
            reference,
            report_id,
            **kwargs
        ):
            """Get the log of the scan report  # noqa: E501

            Get the log of the scan report  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_report_log(project_name, repository_name, reference, report_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag
                report_id (str): The report id to get the log

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            kwargs['report_id'] = \
                report_id
            return self.call_with_http_info(**kwargs)

        self.get_report_log = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log',
                'operation_id': 'get_report_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'report_id',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'report_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'report_id':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'report_id': 'report_id',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'report_id': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_report_log
        )

        def __scan_artifact(
            self,
            project_name,
            repository_name,
            reference,
            **kwargs
        ):
            """Scan the artifact  # noqa: E501

            Scan the specified artifact  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.scan_artifact(project_name, repository_name, reference, async_req=True)
            >>> result = thread.get()

            Args:
                project_name (str): The name of the project
                repository_name (str): The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb
                reference (str): The reference of the artifact, can be digest or tag

            Keyword Args:
                x_request_id (str): An unique ID for the request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_name'] = \
                project_name
            kwargs['repository_name'] = \
                repository_name
            kwargs['reference'] = \
                reference
            return self.call_with_http_info(**kwargs)

        self.scan_artifact = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan',
                'operation_id': 'scan_artifact',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_name',
                    'repository_name',
                    'reference',
                    'x_request_id',
                ],
                'required': [
                    'project_name',
                    'repository_name',
                    'reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'x_request_id',
                ]
            },
            root_map={
                'validations': {
                    ('x_request_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_name':
                        (str,),
                    'repository_name':
                        (str,),
                    'reference':
                        (str,),
                    'x_request_id':
                        (str,),
                },
                'attribute_map': {
                    'project_name': 'project_name',
                    'repository_name': 'repository_name',
                    'reference': 'reference',
                    'x_request_id': 'X-Request-Id',
                },
                'location_map': {
                    'project_name': 'path',
                    'repository_name': 'path',
                    'reference': 'path',
                    'x_request_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__scan_artifact
        )
